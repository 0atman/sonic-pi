# This file is distributed under the same license as the Sonic Pi package.
# Do not edit this file, use Weblate instead.
# Read TRANSLATION.md for more information.
msgid ""
msgstr ""
"Project-Id-Version: Sonic Pi\n"
"PO-Revision-Date: 2016-07-21 09:13+0000\n"
"Last-Translator: filip faste <fasteonline@gmail.com>\n"
"Language-Team: Dutch <https://hosted.weblate.org/projects/sonic-"
"pi/tutorial/nl/>\n"
"Language: nl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 2.8-dev\n"

#: 01-Welcome-to-Sonic-Pi.md:1
msgid "1 Welcome to Sonic Pi"
msgstr "1 Welkom bij Sonic Pi"

#: 01-Welcome-to-Sonic-Pi.md:3
msgid "Welcome friend :-)"
msgstr "Welkom vriend :-)"

#: 01-Welcome-to-Sonic-Pi.md:5
msgid ""
"Welcome to Sonic Pi. Hopefully you're as excited to get started making crazy "
"sounds as I am to show you. It's going to be a really *fun* ride where "
"you'll learn all about music, synthesis, programming, composition, "
"performance and more."
msgstr ""
"Welkom bij Sonic Pi. Hopelijk ben je zo enthousiast als ik, om te gekke "
"klanken te gaan maken. Het zal een *prettige* belevenis worden, waarin je "
"alles over muziek, synthese, programmeren, compositie en optreden gaat leren "
"en nog veel meer..."

#: 01-Welcome-to-Sonic-Pi.md:10
msgid ""
"But wait, how rude of me! Let me introduce myself - I'm [Sam Aaron](http://"
"twitter.com/samaaron) - the chap that created Sonic Pi. You can find me at "
"[@samaaron](http://twitter.com/samaaron) on Twitter and I'd be more than "
"happy to say hello to you. You might also be interested in finding out more "
"about my [Live Coding Performances](http://facebook.com/livecodersamaaron) "
"where I code with Sonic Pi live in front of audiences."
msgstr ""
"Maar wacht,dat was onbeleefd van mij! Ik moet mij nog voorstellen.\n"
"Ik ben [Sam Aaron] ( http://twitter.com/samaaron ) de kerel die Sonic Pi "
"creëerde.\n"
"Je vind mij als [@samaaron](http://twitter.com/samaaron) op Twitter en ik "
"zal heel blij zijn om je daar te kunnen begroeten. Misschien ben je ook "
"geïnteresseerd om meer te weten te komen over mijn [Live Coding Performances]"
" (http://facebook.com/livecodersamaaron) waar ik, voor publiek, live codeer "
"met Sonic Pi."

#: 01-Welcome-to-Sonic-Pi.md:18
msgid ""
"If you have any thoughts, or ideas for improving Sonic Pi - please pass them "
"on - feedback is so helpful. You never know, your idea might be the next big "
"feature!"
msgstr ""
"Mocht je bedenkingen hebben, of ideeën, om Sonic Pi te verbeteren, aarzel "
"dan niet om deze te laten weten, daar feedback zo nuttig is . En, je weet "
"nooit, … jouw idee kan wel eens de volgende, voornaamste nieuwe functie zijn!"

#: 01-Welcome-to-Sonic-Pi.md:22
msgid ""
"This tutorial is divided up into sections grouped by category. Whilst I've "
"written it to have an easy learning progression from start to finish, feel "
"very free just to dip in and out of sections as you see fit. If you feel "
"that there's something missing, do let me know and I'll consider it for a "
"future version."
msgstr ""
"Deze handleiding is verdeeld in secties en gegroepeerd per categorie. Hoewel "
"ik deze in een volgorde geschreven heb met een eenvoudige leercurve voor "
"ogen, wees vrij, om in afzonderlijke secties te duiken zoals jij dat wil. "
"Heb je het gevoel dat er iets ontbreekt, laat het mij weten, ik zal deze in "
"overweging nemen voor een toekomstige versie."

#: 01-Welcome-to-Sonic-Pi.md:28
msgid ""
"Finally, watching others live code is a really great way to learn. I "
"regularly stream live on [livecoding.tv/samaaron](http://livecoding.tv/"
"samaaron) so please do drop by, say hi and ask me lots of questions :-)"
msgstr ""
"Tenslotte, de “live code” van anderen is een fantastische manier van leren. "
"Regelmatig live-stream ik op  "
"[livecoding.tv/samaaron](http://livecoding.tv/samaaron) dus neem daar zeker "
"af en toe een kijkje, zeg me even dag en stel dan veel vragen :-)"

#: 01-Welcome-to-Sonic-Pi.md:33
msgid "OK, let's get started..."
msgstr "OK, laten we beginnen..."

#: 01.1-Live-Coding.md:1
msgid "1.1 Live Coding"
msgstr "1.1 Live Coderen (Live Coding)"

#: 01.1-Live-Coding.md:3 09-Live-Coding.md:3 09.1-Live-Coding-Fundamentals.md:3
#: A.02-live-coding.md:3
msgid "Live Coding"
msgstr "Live Coderen"

#: 01.1-Live-Coding.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write "
"and *modify code live* to make music, just like you might perform live with "
"a guitar. This means that given some practice you can take Sonic Pi on stage "
"and gig with it."
msgstr ""
"Een van de meest opwindende aspecten van Sonic Pi is, dat het je in staat "
"stelt, code te gaan schrijven en *de code, ook live te wijzigen* om muziek "
"te spelen, net zoals je live gitaar zou spelen. Dit betekent dat je, mits "
"wat oefening, met Sonic Pi het podium op kan en hiermee kan optreden."

#: 01.1-Live-Coding.md:10
msgid "Free your mind"
msgstr "Maak je hoofd leeg"

#: 01.1-Live-Coding.md:12
msgid ""
"Before we get into the real details of how Sonic Pi works in the rest of "
"this tutorial, I'd like to give you an experience of what it's like to live "
"code. Don't worry if you don't understand much (or any) of this. Just try to "
"hold onto your seats and enjoy..."
msgstr ""
"Voor we in detail gaan over hoe Sonic Pi werkt, verderop in deze "
"handleiding, wil ik je even de ervaring meegeven, hoe het voelt om live te "
"coderen. Maak je geen zorgen als je hier niet veel (of niets) van begrijpt. "
"Blijf gewoon even zitten en geniet ..."

#: 01.1-Live-Coding.md:17
msgid "A live loop"
msgstr "Een loop \"live\" brengen"

#: 01.1-Live-Coding.md:19
msgid "Let's get started, copy the following code into an empty buffer above:"
msgstr ""
"We gaan van start, kopieer de volgende code in een lege buffer hierboven:"

#: 01.1-Live-Coding.md:21
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :typmaarlustig do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"

#: 01.1-Live-Coding.md:28
msgid ""
"Now, press the `Run` button and you'll hear a nice fast bass drum beating "
"away. If at any time you wish to stop the sound just hit the `Stop` button. "
"Although don't hit it just yet... Instead, follow these steps:"
msgstr ""
"Klik nu op de `afspeel` knop en je zal een lekkere snelle basdrum horen "
"vertrekken. Je kan nu, wanneer jij dat wenst, het geluid stoppen door op de "
"`Stop`' knop te klikken. Maar doe dat nog even niet... neem in plaats "
"daarvan de volgende stappen:"

#: 01.1-Live-Coding.md:32
msgid "Make sure the bass drum sound is still running"
msgstr "Zorg ervoor dat deze basdrum klank nog steeds loopt"

#: 01.1-Live-Coding.md:33
msgid "Change the `sleep` value from `0.5` to something higher like `1`."
msgstr ""
"Verander de waarde van 'sleep' van '0.5' naar een ietwat hoger getal,zoals "
"bv. `1`."

#: 01.1-Live-Coding.md:34
msgid "Press the `Run` button again"
msgstr "Klik opnieuw op de `afspeelknop`"

#: 01.1-Live-Coding.md:35
msgid "Notice how the drum speed has changed."
msgstr "Merk op dat de snelheid van de drum hierbij veranderd is."

#: 01.1-Live-Coding.md:36
msgid ""
"Finally, *remember this moment*, this is the first time you've live coded "
"with Sonic Pi and it's unlikely to be your last..."
msgstr ""
"En, *onthou dit moment*, dit is de eerste keer dat je live hebt gecodeerd "
"met Sonic Pi en het is waarschijnlijk niet je laatste keer..."

#: 01.1-Live-Coding.md:39
msgid ""
"Ok, that was simple enough. Let's add something else into the mix. Above "
"`sample :bd_haus` add the line `sample :ambi_choir, rate: 0.3`. Your code "
"should look like this:"
msgstr ""
"Ok, dat was eenvoudig. We gaan er nog iets aan de mix toevoegen. Boven `"
"sample :bd_haus` voeg je deze lijn toe  `sample :ambi_choir, rate: 0.3`. "
"Jouw code moet er nu als volgt uitzien:"

#: 01.1-Live-Coding.md:43
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :typmaarlustig do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"

#: 01.1-Live-Coding.md:51
msgid ""
"Now, play around. Change the rates - what happens when you use high values, "
"or small values or negative values? See what happens when you change the "
"`rate:` value for the `:ambi_choir` sample just slightly (say to 0.29). What "
"happens if you choose a really small `sleep` value? See if you can make it "
"go so fast your computer will stop with an error because it can't keep up "
"(if that happens, just choose a bigger `sleep` time and hit `Run` again)."
msgstr ""
"Speel hier even mee. Verander de koers (rate) - wat gebeurd er, als je hoge "
"waarden gebruikt,of kleine waarden of negatieve waarden? Kijk wat er gebeurd "
"wanneer je de `rate:` waarde van de  `:ambi_choir` sample maar een tikkeltje "
"veranderd (bv. 0.29). Wat gebeurd er als je een héél kleine `sleep` (rust) "
"waarde kiest? Kijk nu of je het zo snel kan laten gaan dat je computer ervan "
"stopt omdat hij het nu niet meer kan verwerken (wanneer dit gebeurd,moet je "
"maar een een grotere 'sleep' tijd instellen en op `afspelen` klikken)."

#: 01.1-Live-Coding.md:59
msgid ""
"Try commenting one of the `sample` lines out by adding a `#` to the "
"beginning:"
msgstr ""
"Probeer één van de `sample` lijnen van een commentaar te voorzien door er "
"een `#` voor te zetten:"

#: 01.1-Live-Coding.md:62
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :typmaarlustig do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"

#: 01.1-Live-Coding.md:70
msgid ""
"Notice how it tells the computer to ignore it, so we don't hear it. This is "
"called a comment. In Sonic Pi we can use comments to remove and add things "
"into the mix."
msgstr ""
"Merk op hoe het de computer opdraagt deze lijn te negeren, zodat we deze "
"niet horen. Dit heet een comment (commentaarlijn). In Sonic Pi kunnen we een "
"commentaarlijn gebruiken om klanken uit de mix te verwijderen of toe te "
"voegen."

#: 01.1-Live-Coding.md:74
msgid ""
"Finally, let me leave you something fun to play with. Take the code below, "
"and copy it into a spare buffer. Now, don't try to understand it too much "
"other than see that there are two loops - so two things going round at the "
"same time. Now, do what you do best - experiment and play around. Here are "
"some suggestions:"
msgstr ""
"Ik laat je nu even met het volgende spelen. Neem de onderstaande code, en "
"kopieer deze in een lege buffer. Probeer er nu nog niet al te veel van te "
"begrijpen, maar wel in te zien dat er twee loops zijn - dus twee klanken die "
"op het zelfde moment spelen. Het beste wat je kan doen nu is, experimenteren "
"en er, gewoon op los, mee te gaan spelen. Hier zijn enkele suggesties:"

#: 01.1-Live-Coding.md:80
msgid "Try changing the blue `rate:` values to hear the sample sound change."
msgstr ""
"Wijzig de blauwe `rate:` waarden en hoor hierbij dat de klank van de „sample”"
" verandert."

#: 01.1-Live-Coding.md:81
msgid ""
"Try changing the `sleep` times and hear that both loops can spin round at "
"different rates."
msgstr ""
"Wijzig de `sleep` tijd en hoor dat beide loops kunnen afspelen met "
"verschillende rusttijden."

#: 01.1-Live-Coding.md:83
msgid ""
"Try uncommenting the sample line (remove the `#`) and enjoy the sound of the "
"guitar played backwards."
msgstr ""
"Probeer de commentaarlijn te wissen (verwijder het `#`) uit onze "
"voorbeeldlijn en geniet van de gitaarklank, die nu achteruit afspeelt."

#: 01.1-Live-Coding.md:85
msgid ""
"Try changing any of the blue `mix:` values to numbers between `0` (not in "
"the mix) and `1` (fully in the mix)."
msgstr ""
"Probeer de blauwe `mix:` waarden te veranderen naar cijfers tussen `0` (niet "
"in de mix) en `1` (voluit in de mix)."

#: 01.1-Live-Coding.md:88
msgid ""
"Remember to press `Run` and you'll hear the change next time the loop goes "
"round. If you end up in a pickle, don't worry - hit `Stop`, delete the code "
"in the buffer and paste a fresh copy in and you're ready to jam again. "
"Making mistakes is how you'll learn the quickest..."
msgstr ""
"Denk eraan te klikken op 'afspelen' om deze veranderingen te kunnen horen, "
"bij de volgende loop die vertrekt. Maak je geen zorgen als het hierbij soms "
"in de soep draait, klik dan op `Stop`, wis de code in de buffer en plak er "
"een nieuwe kopie in, zo je bent weer gereed om opnieuw te gaan improviseren. "
"Van je fouten kan je nu eenmaal het beste leren."

#: 01.1-Live-Coding.md:94
#, no-wrap
msgid ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"

#: 01.1-Live-Coding.md:111
msgid ""
"Now, keep playing and experimenting until your curiosity about how this all "
"actually works kicks in and you start wondering what else you can do with "
"this. You're now ready to read the rest of the tutorial."
msgstr ""
"Blijf nu spelen en experimenteren tot je de nieuwsgierigheid begint te "
"voelen en je je begint af te vragen wat je hier nog allemaal mee kan doen. "
"Dan ben je nu klaar om de rest van de handleiding te lezen."

#: 01.1-Live-Coding.md:115
msgid "So what are you waiting for..."
msgstr "Zo,waar wacht je nog op . . ."

#: 01.2-Exploring-the-Interface.md:1
msgid "1.2 Exploring the Interface"
msgstr "1.2 De Interface Verkennen"

#: 01.2-Exploring-the-Interface.md:3
msgid "The Sonic Pi Interface"
msgstr "De Interface van Sonic Pi"

#: 01.2-Exploring-the-Interface.md:5
msgid ""
"Sonic Pi has a very simple interface for coding music. Let's spend a little "
"time exploring it."
msgstr ""
"Sonic Pi heeft een zeer eenvoudige interface om muziek te coderen. Laten we "
"hier eens wat tijd aan besteden om deze te verkennen."

#: 01.2-Exploring-the-Interface.md:8
msgid "![Sonic Pi Interface](../images/tutorial/GUI.png)"
msgstr "![Sonic Pi Interface](../images/tutorial/GUI.png)"

#: 01.2-Exploring-the-Interface.md:11
msgid "*A* - Play Controls"
msgstr "*A* - Afspeel knoppen"

#: 01.2-Exploring-the-Interface.md:12
msgid "*B* - Editor Controls"
msgstr "*B* - Editor aanpassen"

#: 01.2-Exploring-the-Interface.md:13
msgid "*C* - Info and Help"
msgstr "*C* - Info en Hulp"

#: 01.2-Exploring-the-Interface.md:14
msgid "*D* - Code Editor"
msgstr "*D* - Code Editor"

#: 01.2-Exploring-the-Interface.md:15
msgid "*E* - Prefs Panel"
msgstr "*E* - Paneel Voorkeursinstellingen"

#: 01.2-Exploring-the-Interface.md:16
msgid "*F* - Log Viewer"
msgstr "*F* - Log Venster"

#: 01.2-Exploring-the-Interface.md:17
msgid "*G* - Help System"
msgstr "*G* - Hulp-Systeem"

#: 01.2-Exploring-the-Interface.md:20
msgid "A. Play Controls"
msgstr "A. Afspeel knoppen"

#: 01.2-Exploring-the-Interface.md:22
msgid ""
"These pink buttons are the main controls for starting and stopping sounds. "
"There's the *Run* button for running the code in the editor, *Stop* for "
"stopping all running code, *Save* for saving the code to an external file "
"and *Record* to create a recording (a WAV file) of the sound playing."
msgstr ""
"Deze roze knoppen zijn de belangrijkste bedieningselementen voor het starten "
"en stoppen van het geluid. Er is de *Afspelen* knop om de code in de editor "
"af te spelen, *Stop* om alle actieve code te stoppen, *opslaan* om de code "
"naar een extern bestand op te slaan en *Opnemen* om een opname (WAV-bestand) "
"te maken van het afgespeelde geluid."

#: 01.2-Exploring-the-Interface.md:28
msgid "B. Editor Controls"
msgstr "B.  Controle over de Editor"

#: 01.2-Exploring-the-Interface.md:30
msgid ""
"These orange buttons allow you to manipulate the code editor. The *Size +* "
"and *Size -* buttons allow you to make the text bigger and smaller. The "
"*Align* button will neaten the code for you to make it look more "
"professional."
msgstr ""
"Deze oranje knoppen kunt u gebruiken om de code editor te manipuleren. Met "
"de *grootte +* en *grootte -* knoppen kan je de tekst groter en kleiner "
"maken. De *uitlijnen* knop zal de code netjes worden gemaakt, zodat deze er "
"professioneler gaat uitzien."

#: 01.2-Exploring-the-Interface.md:35
msgid "C. Info and Help"
msgstr "C. Info and Hulp"

#: 01.2-Exploring-the-Interface.md:37
msgid ""
"These blue buttons give you access to information, help and preferences. The "
"*Info* button will open up the information window which contains information "
"about Sonic Pi itself - the core team, history, contributors and community. "
"The *Help* button toggles the help system (*G*) and the *Prefs* button "
"toggles the preferences window which allows you to control some basic system "
"parameters."
msgstr ""
"Deze blauwe knoppen geven je toegang tot hulp-, informatie- en "
"voorkeursinstellingen. De *Info* knop opent het venster die informatie over "
"Sonic Pi zelf bevat - het kernteam, de geschiedenis, de medewerkers en ook "
"de Sonic Pi \"gemeenschap\". De *Hulp* knop schakelt naar het hulp-systeem "
"(*G*) en de *Voorkeuren* knop schakelt naar het voorkeur-venster waarmee u "
"een aantal fundamentele systeemparameters kan bijsturen."

#: 01.2-Exploring-the-Interface.md:44
msgid "D. Code Editor"
msgstr "D. Code Editor"

#: 01.2-Exploring-the-Interface.md:46
msgid ""
"This is the area where you'll write your code and compose/perform music. "
"It's a simple text editor where you can write code, delete it, cut and "
"paste, etc. Think of it like a very basic version of Word or Google Docs. "
"The editor will automatically colour words based on their meaning in the "
"code. This may seem strange at first, but you'll soon find it very useful. "
"For example, you'll know something is a number because it is blue."
msgstr ""
"Dit is het gebied waarin je jouw code schrijft en muziek componeert/"
"uitvoert. Het is een eenvoudige tekst-editor, waarin je code kan schrijven, "
"verwijderen, knippen en plakken, enz. Denk aan een zeer eenvoudige versie "
"van Word of Google Docs. De editor zal de kleur van woorden automatisch "
"aanpassen op basis van hun betekenis in de code. Dit lijkt misschien eerst "
"wat vreemd, maar je zal dit snel heel nuttig vinden. Bijvoorbeeld als het "
"het blauw ziet, dan weet je dat het om een getal gaat."

#: 01.2-Exploring-the-Interface.md:54
msgid "E. Prefs Panel"
msgstr "E. Paneel Voorkeursinstellingen"

#: 01.2-Exploring-the-Interface.md:56
msgid ""
"Sonic Pi supports a number of tweakable preferences which can be accessed by "
"toggling the *prefs* button in the Info and Help button set. This will "
"toggle the visibility of the Prefs Panel which includes a number of options "
"to be changed. Examples are forcing mono mode, inverting stereo, Toggling "
"log output verbosity and also a volume slider and audio selector on the "
"Raspberry Pi."
msgstr ""
"Sonic Pi ondersteunt een aantal instelbare voorkeursinstellingen die "
"toegankelijk zijn door het in-/uitschakelen van de knop *Voorkeuren*  in de "
"Info en Hulp knoppen-set. Dit zal de zichtbaarheid van het Paneel "
"Voorkeursinstellingen, waarin een aantal regelbare opties zitten, in of "
"uitschakelen. Voorbeelden zijn: het brengen van stereo naar mono, stereo "
"omkeren, de detaillering van het log en ook een volumeregelaar en audio "
"keuze voor de Raspberry Pi."

#: 01.2-Exploring-the-Interface.md:63
msgid "F. Log Viewer"
msgstr "F. Log Venster"

#: 01.2-Exploring-the-Interface.md:65
msgid ""
"When you run your code, information about what the program is doing will be "
"displayed in the log viewer. By default, you'll see a message for every "
"sound you create with the exact time the sound was triggered. This is very "
"useful for debugging your code and understanding what your code is doing."
msgstr ""
"Wanneer je je code uitvoert,zal informatie over wat het programma doet, "
"getoond worden in een soort logboek. Standaard zal je een berichtje zien, "
"voor elk geluid dat je maakt, met de exacte tijd dat het geluid werd "
"geactiveerd. Dit is zeer handig om fouten in je code op te kunnen sporen en "
"om te kunnen begrijpen wat je code doet."

#: 01.2-Exploring-the-Interface.md:71
msgid "G. Help System"
msgstr "G. Hulp Systeem"

#: 01.2-Exploring-the-Interface.md:73
msgid ""
"Finally, one of the most important parts of the Sonic Pi interface is the "
"help system which appears at the bottom of the window. This can be toggled "
"on and off by clicking on the blue *Help* button. The help system contains "
"help and information about all aspects of Sonic Pi including this tutorial, "
"a list of available synths, samples, examples, FX and a full list of all the "
"functions Sonic Pi provides for coding music."
msgstr ""
"Tot slot, een van de belangrijkste onderdelen van de Sonic Pi-interface is "
"het hulp-systeem dat wordt weergegeven aan de onderkant van het venster. Dit "
"kan worden in-/uitschakelt door op de blauwe knop *Hulp* te klikken. Het "
"hulp-systeem bevat hulp en informatie over alle aspecten van Sonic Pi, met "
"inbegrip van deze handleiding, een lijst van beschikbare synths, samples, "
"voorbeelden, Effecten en een volledige lijst van alle functies die Sonic Pi "
"biedt voor het muziek-coderen ."

#: 01.3-Learning-through-Play.md:1
msgid "1.3 Learning through Play"
msgstr "1.3 Spelenderwijs Leren"

#: 01.3-Learning-through-Play.md:3
msgid "Learning through Play"
msgstr "Spelenderwijs Leren"

#: 01.3-Learning-through-Play.md:5
msgid ""
"Sonic Pi encourages you to learn about both computing and music through play "
"and experimentation. The most important thing is that you're having fun, and "
"before you know it you'll have accidentally learned how to code, compose and "
"perform."
msgstr ""
"Sonic Pi moedigt je aan om meer te gaan leren over zowel de computer als "
"over muziek door middel van spel en experimenteren. Het belangrijkste is dat "
"je hierin plezier hebt, en voor je het beseft, heb je hierdoor geleerd, hoe "
"te coderen, te componeren en live te spelen."

#: 01.3-Learning-through-Play.md:10
msgid "There are no mistakes"
msgstr "Er bestaan geen fouten"

#: 01.3-Learning-through-Play.md:12
msgid ""
"Whilst we're on this subject, let me just give you one piece of advice I've "
"learned over my years of live coding with music - *there are no mistakes, "
"only opportunities*. This is something I've often heard in relation to jazz "
"but it works equally well with live coding. No matter how experienced you "
"are - from a complete beginner to a seasoned Algoraver, you'll run some code "
"that has a completely unexpected outcome. It might sound insanely cool - in "
"which case run with it. However, it might sound totally jarring and out of "
"place. It doesn't matter that it happened - what matters is what you do next "
"with it. Take the sound, manipulate it and morph it into something awesome. "
"The crowd will go *wild*."
msgstr ""
"Nu we er toch over bezig zijn, geef ik je graag een raad mee, wat ik heb "
"geleerd in de jaren van live muziek coderen is - *er bestaan geen fouten, "
"alleen kansen*. Dit is iets wat ik vaak heb horen zeggen over jazz, maar het "
"werkt even goed met live codering. Ongeacht hoe ervaren je bent - van een "
"complete beginner tot een doorgewinterde Algoraver, je  zal soms code "
"uitvoeren met een geheel onverwacht resultaat. Het kan waanzinnig cool "
"klinken- in dat geval komen we er mee weg. Het kan ook compleet dwaas en "
"ontoepasselijk klinken. Maar het maakt niet uit dat het gebeurd is - waar "
"het om gaat is, wat je er vervolgens mee doet. Pak de klank, manipuleer deze "
"en morph het naar iets ongeloofelijk. Je publiek zal uit de *bol* gaan."

#: 01.3-Learning-through-Play.md:24
msgid "Start Simple"
msgstr "Start Eenvoudig"

#: 01.3-Learning-through-Play.md:26
msgid ""
"When you're learning, it's tempting to want to do amazing things *now*. "
"However, just hold that thought and see it as a distant goal to reach "
"*later*. For now, instead think of the *simplest* thing you could write "
"which would be fun and rewarding that's a small step towards the amazing "
"thing you have in your head. Once you have an idea about that simple step, "
"then try and build it, play with it and then see what new ideas it gives "
"you. Before long you'll be too busy having fun and making real progress."
msgstr ""
"Wanneer je aan het leren bent, is het verleidelijk om *nu al* "
"verbazingwekkende dingen te gaan doen. Maar het is beter om die wens vast te "
"houden en als een toekomstig doel voor ogen te houden om later te bereiken. "
"Probeer kleine, eenvoudige stappen te zetten en te zien hoe dit jou plezier "
"geeft en je dichter tot je doel brengen. Eens je de kleine stappen onder de "
"knie hebt, kan je deze als bouwstenen gebruiken en hiermee spelen, en je zal "
"zien dat deze nieuwe inzichten, jou ook verse ideeën zullen geven. Snel "
"genoeg ben je fijn bezig én maak je vooruitgang."

#: 01.3-Learning-through-Play.md:35
msgid "Just make sure to share your work with others!"
msgstr "Zorg ervoor dat je je werk deelt met anderen!"

#: 02-Synths.md:1
msgid "2 Synths"
msgstr "2 Synthesizers (Synths)"

#: 02-Synths.md:3 02.3-Switching-Synths.md:11
msgid "Synths"
msgstr "Synthesizers"

#: 02-Synths.md:5
msgid "OK, enough of the intros - let's get into some sound."
msgstr "OK, genoeg intro's - laat ons in enkele klanken duiken."

#: 02-Synths.md:7
msgid ""
"In this section we'll cover the basics of triggering and manipulating "
"synths. Synth is short for synthesiser which is a fancy word for something "
"which creates sounds. Typically synths are quite complicated to use - "
"especially analog synths with many patch wires and modules. However, Sonic "
"Pi gives you much of that power in a very simple and approachable manner."
msgstr ""
"In deze sectie zullen we de basisprincipes van triggering en het manipuleren "
"van synths behandelen. Synth is kort voor synthesizer, wat een chique woord "
"is voor iets dat geluiden kan creëren. Synths zijn doorgaans vrij "
"ingewikkeld om te gebruiken - met name analoge synths met vele patch kabels "
"en modules. Sonic Pi geeft je veel van hun kracht op een zeer eenvoudige en "
"toegankelijke wijze."

#: 02-Synths.md:14
msgid ""
"Don't be fooled by the immediate simplicity of Sonic Pi's interface. You can "
"get very deep into very sophisticated sound manipulation if that's your "
"thing. Hold on to your hats..."
msgstr ""
"Laat je niet misleiden door de directe eenvoud van de Sonic Pi interface. Je "
"kunt hier diepgaand, in zeer geavanceerde geluidsmanipulatie gaan als dat je "
"ding mocht zijn. Hou je maar vast..."

#: 02.1-Your-First-Beeps.md:1
msgid "2.1 Your First Beeps"
msgstr "2.1 Je Eerste Bliepjes"

#: 02.1-Your-First-Beeps.md:3
msgid "Your First Beeps"
msgstr "Je Eerste Bliepjes"

#: 02.1-Your-First-Beeps.md:5
msgid "Take a look at the following code:"
msgstr "Bestudeer de volgende code:"

#: 02.1-Your-First-Beeps.md:7 02.4-Durations-with-Envelopes.md:49
#, no-wrap
msgid "play 70"
msgstr "play 70"

#: 02.1-Your-First-Beeps.md:11
msgid ""
"This is where it all starts. Go ahead, copy and paste it into the code "
"window at the top of the app (the big white space under the Run button). "
"Now, press Run..."
msgstr ""
"Dit is waar het allemaal begint. Ga je gang, kopieer en plak deze in het "
"codevenster aan de bovenzijde van de app (de grote witte ruimte onder de "
"Afspeel knop). Nu, klik op Afspelen..."

#: 02.1-Your-First-Beeps.md:15
msgid "Beep!"
msgstr "Bliep!"

#: 02.1-Your-First-Beeps.md:17
msgid "Intense. Press it again. And again. *And again...*"
msgstr "Heftig. Klik opnieuw. En opnieuw. *En opnieuw…*"

#: 02.1-Your-First-Beeps.md:19
msgid ""
"Woah, crazy, I'm sure you could keep doing that all day. But wait, before "
"you lose yourself in an infinite stream of beeps, try changing the number:"
msgstr ""
"Woah, te gek, ik weet zeker dat je dit een hele dag kan blijven doen. Maar "
"wacht, voordat je jezelf verliest in een oneindige stroom van bliepjes, "
"probeer het cijfer te wijzigen:"

#: 02.1-Your-First-Beeps.md:23
#, no-wrap
msgid "play 75"
msgstr "play 75"

#: 02.1-Your-First-Beeps.md:27
msgid "Can you hear the difference? Try a lower number:"
msgstr "Hoor je het verschil? Probeer een lager cijfer:"

#: 02.1-Your-First-Beeps.md:29
#, no-wrap
msgid "play 60"
msgstr "play 60"

#: 02.1-Your-First-Beeps.md:33
msgid ""
"So, lower numbers make lower pitched beeps and higher numbers make higher "
"pitched beeps. Just like on a piano, the keys at the lower part of the piano "
"(the left hand side) play lower notes and the keys on the higher part of the "
"piano (the right hand side) play higher notes. In fact, the numbers actually "
"relate to notes on the piano. `play 47` actually means play the 47th note on "
"the piano. Which means that `play 48` is one note up (the next note to the "
"right). It just so happens that the 4th octave C is number 60. Go ahead and "
"play it: `play 60`."
msgstr ""
"Dus, lagere nummers maken lagere bieps en hogere getallen maken hogere biep-"
"tonen. Net zoals bij een piano, de toetsen op het onderste deel van de piano "
"(de linker kant) lagere noten spelen en de toetsen op het hogere deel van de "
"piano (de rechterkant) hogere noten spelen. De cijfers betreffen in feite "
"eigenlijk notities op de piano.  `play 47` betekent eigenlijk dat de 47e "
"noot op de piano speelt. Wat betekent dat `play 48`  is een noot omhoog (de "
"volgende noot naar rechts). Het is dan gewoon zo dat het 4e octaaf C het "
"cijfer 60 is . Ga je gang en speel deze: `play 60`."

#: 02.1-Your-First-Beeps.md:42
msgid ""
"*Don't worry* if this means nothing to you - it didn't to me when I first "
"started. All that matters right now is that you know that *low numbers make "
"lower beeps* and *high numbers make higher beeps*."
msgstr ""
"*Maak je geen zorgen* wanneer dit niets voor jou betekent, mij betekende het "
"ook niets toen ik er eerst aan begon. Het belangrijkste is dat je weet dat *"
"lage getallen, lagere tonen maken* en *hoge getallen, hogere tonen*."

#: 02.1-Your-First-Beeps.md:46 08.2-Chords.md:3
msgid "Chords"
msgstr "Akkoorden"

#: 02.1-Your-First-Beeps.md:48
msgid ""
"Playing a note is quite fun, but playing many at the same time can be even "
"better. Try it:"
msgstr ""
"Een noot spelen kan leuk zijn, maar veel noten op het zelfde moment spelen "
"kan het beter maken. Probeer dit:"

#: 02.1-Your-First-Beeps.md:51
#, no-wrap
msgid ""
"play 72\n"
"play 75\n"
"play 79"
msgstr ""
"play 72\n"
"play 75\n"
"play 79"

#: 02.1-Your-First-Beeps.md:57
msgid ""
"Jazzy! So, when you write multiple `play`s, they all play at the same time. "
"Try it for yourself - which numbers sound good together? Which sound "
"terrible? Experiment, explore and find out for yourself."
msgstr ""
"Jazzy! Dus, als je meerdere „play”s typt, spelen ze allemaal op hetzelfde "
"moment. Probeer het voor jezelf - welke cijfers klinken goed samen? En welke "
"verschrikkelijk samen? Experimenteer, verken en ontdek dit voor jezelf."

#: 02.1-Your-First-Beeps.md:61
msgid "Melody"
msgstr "Melodie"

#: 02.1-Your-First-Beeps.md:63
msgid ""
"So, playing notes and chords is fun - but how about a melody? What if you "
"wanted to play one note after another and not at the same time? Well, that's "
"easy, you just need to `sleep` between the notes:"
msgstr ""
"Zo, het spelen van noten en akkoorden is leuk, maar hoe zit dat met een "
"melodie? Wat als je noten achter elkaar wil spelen en niet op dezelfde "
"moment? Wel dat is eenvoudig, je moet enkel een rust („sleep\") zetten "
"tussen de noten:"

#: 02.1-Your-First-Beeps.md:67
#, no-wrap
msgid ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"
msgstr ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"

#: 02.1-Your-First-Beeps.md:75
msgid ""
"How lovely, a little arpeggio. So what does the `1` mean in `sleep 1`? Well "
"it means the *duration of the sleep*. It actually means sleep for one beat, "
"but for now we can think about it as sleeping for 1 second. So, what if we "
"wanted to make our arpeggio a little faster? Well, we need to use shorter "
"sleep values. What about a half i.e. `0.5`:"
msgstr ""
"Hoe mooi, zo een beetje arpeggio. Dus wat betekent de '1' in 'sleep 1'? Nou "
"het betekent de *duur van de rust*. Het betekent eigenlijk slaap voor één "
"tel , voor 1 seconde rusten. Dus, wat als we onze arpeggio een beetje "
"sneller willen? Nou, dan moeten we kortere slaap waarde gebruiken. Wat denk "
"je van de helft? D.w.z. '0.5':"

#: 02.1-Your-First-Beeps.md:81
#, no-wrap
msgid ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"
msgstr ""
"lay 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"

#: 02.1-Your-First-Beeps.md:89
msgid ""
"Notice how it plays faster. Now, try for yourself, change the times - use "
"different times and notes."
msgstr ""
"Merk op hoe het sneller speelt. Probeer dit nu voor jezelf, verander de "
"rusttijd- gebruik verschillende tijden en noten."

#: 02.1-Your-First-Beeps.md:92
msgid ""
"One thing to try is in-between notes such as `play 52.3` and `play 52.63`. "
"There's absolutely no need to stick to standard whole notes. Play around and "
"have fun."
msgstr ""
"Wat je zeker ook kan proberen is om \"tussen” noten te spelen zoals `play "
"52.3` and `play 52.63`. Het is absoluut niet noodzakelijk om te blijven "
"vasthouden aan standaard „hele” noten. Speel erop los en amuseer je."

#: 02.1-Your-First-Beeps.md:97
msgid "Traditional Note Names"
msgstr "Traditionele Notennamen"

#: 02.1-Your-First-Beeps.md:99
msgid ""
"For those of you that already know some musical notation (don't worry if you "
"don't - you don't need it to have fun) you might want to write a melody "
"using note names such as C and F# rather than numbers. Sonic Pi has you "
"covered. You can do the following:"
msgstr ""
"Als je al kennis hebt van muzieknotatie (maak je geen zorgen als dit niet "
"het geval is, zonder deze kennis blijft het even leuk), dan wil je  bij het "
"schrijven van een melodie, misschien liever de nootnamen gebruiken zoals: C "
"en F# in plaats van cijfers. In Sonic Pi kan je dat.\n"
"Je kan dan het volgende doen:"

#: 02.1-Your-First-Beeps.md:104
#, no-wrap
msgid ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"
msgstr ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"

#: 02.1-Your-First-Beeps.md:112
msgid ""
"Remember to put the colon `:` in front of your note name so that it goes "
"pink. Also, you can specify the octave by adding a number after the note "
"name:"
msgstr ""
"Denk eraan, een dubbelpunt voor de nootnaam te plaatsen, zodat deze in roze "
"wordt. Je kan hierbij ook het octaaf aangeven door achter de nootnaam een "
"cijfer te plaatsen:"

#: 02.1-Your-First-Beeps.md:116
#, no-wrap
msgid ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"
msgstr ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"

#: 02.1-Your-First-Beeps.md:124
msgid ""
"If you want to make a note sharp, add an `s` after the note name such as "
"`play :Fs3` and if you want to make a note flat, add a `b` such as `play :"
"Eb3`."
msgstr ""
"Als je een verhoogde alteratie (bv. F#) zet je een 's' achter de nootnaam, "
"bv. `play :Fs3`. Als je een verlaagde alteratie wil maken (bv. E mol), zet "
"dan een 'b' achter de nootnaam bv. `play :Eb3`."

#: 02.1-Your-First-Beeps.md:127
msgid "Now go *crazy* and have fun making your own tunes."
msgstr ""
"Ga nu maar lekker loos bij het maken van je eigen melodietjes, veel plezier "
"ermee."

#: 02.2-Synth-Params.md:1
msgid "2.2 Synth Options"
msgstr "2.2 Synthesizer Opties"

#: 02.2-Synth-Params.md:3
msgid "Synth Options: Amp and Pan"
msgstr "Synthesizer Opties: Amp en Pan"

#: 02.2-Synth-Params.md:5
msgid ""
"As well as allowing you to control which note to play or which sample to "
"trigger, Sonic Pi provides a whole range of options to craft and control the "
"sounds. We'll be covering many of these in this tutorial and there's "
"extensive documentation for each in the help system. However, for now we'll "
"introduce two of the most useful: *amplitude* and *pan*. First, let's look "
"at what options actually are."
msgstr ""
"Zoals je kan bepalen welke noot er gespeeld wordt of welke sample er wordt "
"getriggert, zo biedt Sonic Pi een hele waaier aan mogelijkheden om geluiden "
"te bewerken en manipuleren. We gaan velen daarvan in deze handleiding "
"bekijken en in het hulp systeem is een uitgebreide documentatie voorzien van "
"deze 'opties'. De belangrijkste op dit moment zijn: 'amplitude' en 'pan'. "
"Laat ons eerst even bekijken wat opties eigenlijk zijn."

#: 02.2-Synth-Params.md:13
msgid "Options"
msgstr "Opties"

#: 02.2-Synth-Params.md:15
msgid ""
"Sonic Pi supports the notion of options (or opts for short) for its synths. "
"Opts are controls you pass to `play` which modify and control aspects of the "
"sound you hear. Each synth has its own set of opts for finely tuning its "
"sound. However, there are common sets of opts shared by many sounds such as "
"`amp:` and envelope opts (covered in another section)."
msgstr ""
"Sonic Pi ondersteunt het noteren van opties (afgekort: opts) voor haar "
"synths. Opts zijn controle-elementen  die je samen met het commando 'play' "
"doorgeeft die wijzigingen en manipulaties van het afgespeelde geluid. Elke "
"synth heeft zijn eigen unieke set van opts om haar geluid fijn af te "
"stemmen. Er zijn echter opts die bij elke synth, of bij elk geluid gebruikt "
"kunnen worden zoals 'amp:' en 'envelope' (= geluidsverloop) opties (In een "
"andere sectie gaan we dieper op die 'envelopes' in)."

#: 02.2-Synth-Params.md:22
msgid ""
"Opts have two major parts, their name (the name of the control) and their "
"value (the value you want to set the control at). For example, you might "
"have a opt called `cheese:` and want to set it with a value of `1`."
msgstr ""
"Opts bestaan uit twee belangrijke delen (de naam van het element waar je "
"controle over wil hebben) en de waarde hiervan (de mate van controle over "
"dit element). Een voorbeeld, je hebt een opt genaamd 'kaas' en je wilt deze "
"instellen op een waarde van '1'."

#: 02.2-Synth-Params.md:27
msgid ""
"Opts are passed to calls to `play` by using a comma `,` and then the name of "
"the opt such as `amp:` (don't forget the colon `:`) and then a space and the "
"value of the opt. For example:"
msgstr ""
"Opts worden samen met 'play' commando's doorgegeven, dor gebruik te maken "
"van een komma ',' gevolgd door de naam van de optie, we kiezen hier 'amp:' ("
"vergeet de dubbelpunt niet ':' ) gevolgd door een spatie en de waarde van de "
"optie. Bijvoorbeeld:"

#: 02.2-Synth-Params.md:31
#, no-wrap
msgid "play 50, cheese: 1"
msgstr "play 50, kaas: 1"

#: 02.2-Synth-Params.md:35
msgid ""
"(Note that `cheese:` isn't a valid opt, we're just using it as an example)."
msgstr ""
"(Merk op dat ' kaas: \"geen geldige opt is, we gebruiken deze gewoon als "
"voorbeeld)."

#: 02.2-Synth-Params.md:37
msgid "You can pass multiple opts by separating them with a comma:"
msgstr ""
"Je kan meerdere opts tegelijk doorgeven door deze te scheiden met een komma:"

#: 02.2-Synth-Params.md:39
#, no-wrap
msgid "play 50, cheese: 1, beans: 0.5"
msgstr "play 50, kaas: 1, eieren: 0.5"

#: 02.2-Synth-Params.md:43
msgid "The order of the opts doesn't matter, so the following is identical:"
msgstr "De volgorde van de opts maakt niet uit, dus het volgende is identiek:"

#: 02.2-Synth-Params.md:45
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 1"
msgstr "play 50, eieren: 0.5, kaas: 1"

#: 02.2-Synth-Params.md:49
msgid ""
"Opts that aren't recognised by the synth are just ignored (like `cheese` and "
"`beans` which are clearly ridiculous opt names!)"
msgstr ""
"Opts die door de synth niet worden herkent zullen gewoon genegeerd worden ("
"zoals 'kaas' en 'eieren' duidelijk zeer ridicule opt namen!)"

#: 02.2-Synth-Params.md:52
msgid ""
"If you accidentally use the same opt twice with different values, the last "
"one wins. For example, `beans:` here will have the value 2 rather than 0.5:"
msgstr ""
"Mocht je per ongeluk twee keer dezelfde opt hebben ingevoerd maar met "
"verschillende waarden, dan zal de laatste waarde winnen. Bijvoorbeeld, "
"'eieren' zal de waarde 2 hebben in plaats van 0.5:"

#: 02.2-Synth-Params.md:56
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 3, eggs: 0.1, beans: 2"
msgstr "play 50, eieren: 0.5, kaas: 3, tomaat: 0.1, eieren: 2"

#: 02.2-Synth-Params.md:60
msgid ""
"Many things in Sonic Pi accept opts, so just spend a little time learning "
"how to use them and you'll be set! Let's play with our first opt: `amp:`."
msgstr ""
"Opts worden door veel items in Sonic Pi geaccepteerd, dus probeer deze onder "
"de knie te krijgen, het loont echt! Laten we wat spelen met onze eerste opt: "
"`amp:`."

#: 02.2-Synth-Params.md:64 02.4-Durations-with-Envelopes.md:25
msgid "Amplitude"
msgstr "Amplitude"

#: 02.2-Synth-Params.md:66
msgid ""
"Amplitude is a computer representation of the loudness of a sound. A *high "
"amplitude produces a loud sound* and a *low amplitude produces a quiet "
"sound*. Just as Sonic Pi uses numbers to represent time and notes, it uses "
"numbers to represent amplitude. An amplitude of 0 is silent (you'll hear "
"nothing) whereas an amplitude of 1 is normal volume. You can even crank up "
"the amplitude higher to 2, 10, 100. However, you should note that when the "
"overall amplitude of all the sounds gets too high, Sonic Pi uses what's "
"called a compressor to squash them all to make sure things aren't too loud "
"for your ears. This can often make the sound muddy and strange. So try to "
"use low amplitudes, i.e. in the range 0 to 0.5 to avoid compression."
msgstr ""
"Amplitude is de representatie van het geluidsvolume op een computer. Een "
"hoge amplitude produceert het geluid op een luid volume en een lage "
"amplitude op een zacht volume. Net zoals Sonic Pi cijfers gebruikt om noten "
"en tijden aan te geven, gebruikt het cijfers om amplitude te bepalen. Een "
"amplitude van '0' is stil (je zal niets horen) en een amplitude van '1' is "
"een normaal volume. Je kan het volume zelfs nog opdrijven en verhogen tot 2, "
"10, 100. Maar u moet er wel rekening mee houden dat wanneer het globale "
"volume te hoog wordt, zal Sonic Pi een compressie inschakelen en het geluid "
"onderdrukken om ervoor te zorgen dat je oren gespaard blijven. Dit kan het "
"geluid dan weer dof en vreemd doen laten klinken. Dus is het beter lage "
"amplitudes te gebruiken, dwz. tussen 0 tot0.5 om compressie te vermijden."

#: 02.2-Synth-Params.md:79
msgid "Amp it up"
msgstr "Amp 't op"

#: 02.2-Synth-Params.md:81
msgid ""
"To change the amplitude of a sound, you can use the `amp:` opt. For example, "
"to play at half amplitude pass 0.5:"
msgstr ""
"Om de amplitude van een geluid te veranderen, kan je de 'amp:' optie "
"gebruiken. Bijvoorbeeld, op gemiddelde amplitude afspelen, gebruik dan 0.5:"

#: 02.2-Synth-Params.md:84
#, no-wrap
msgid "play 60, amp: 0.5"
msgstr "play 60, amp: 0.5"

#: 02.2-Synth-Params.md:88
msgid "To play at double amplitude pass 2:"
msgstr "Afspelen op dubbel zo hoge amplitude gebruik 2:"

#: 02.2-Synth-Params.md:90
#, no-wrap
msgid "play 60, amp: 2"
msgstr "play 60, amp: 2"

#: 02.2-Synth-Params.md:94
msgid ""
"The `amp:` opt only modifies the call to `play` it's associated with. So, in "
"this example, the first call to play is at half volume and the second is "
"back to the default (1):"
msgstr ""
"De amp opt verandert enkel de 'play' oproep waarmee deze wordt geassocieerd. "
"In dit voorbeeld zal de eerste oproep dus aan de helft van het volume spelen "
"en de tweede op standaard-instelling (1):"

#: 02.2-Synth-Params.md:98
#, no-wrap
msgid ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"
msgstr ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"

#: 02.2-Synth-Params.md:104
msgid "Of course, you can use different `amp:` values for each call to play:"
msgstr ""
"Natuurlijk kunnen verschillende 'amp:' waarden per 'play' oproep worden "
"gebruikt:"

#: 02.2-Synth-Params.md:106
#, no-wrap
msgid ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"
msgstr ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"

#: 02.2-Synth-Params.md:116
msgid "Panning"
msgstr "Pannen"

#: 02.2-Synth-Params.md:118
msgid ""
"Another fun opt to use is `pan:` which controls the panning of a sound in "
"stereo. Panning a sound to the left means that you hear it out of the left "
"speaker, and panning it to the right means you hear it out of your right "
"speaker. For our values, we use a -1 to represent fully left, 0 to represent "
"center and 1 to represent fully right in the stereo field. Of course, we're "
"free to use any value between -1 and 1 to control the exact positioning of "
"our sound."
msgstr ""
"Een ander leuke opt om te gebruiken is 'pan:' die bepaalt de panning van een "
"geluid in stereo. Naar links pannen betekent dat je het geluid door de "
"linker-luidspreker hoort,  naar rechts pannen betekent dat je het geluid "
"door de rechter-luidspreker hoort. Onze cijferwaarde -1 betekend helemaal "
"links, 0 geeft het midden weer en 1 geeft helemaal rechts van ons "
"stereobeeld. Natuurlijk zijn we vrij om elke waarde tussen -1 en 1 te "
"gebruiken om de exacte positie van ons geluid te bepalen."

#: 02.2-Synth-Params.md:126
msgid "Let's play a beep out of the left speaker:"
msgstr "Laten we eens een bliepje uit de linkerluidspreker doen klinken:"

#: 02.2-Synth-Params.md:128
#, no-wrap
msgid "play 60, pan: -1"
msgstr "play 60, pan: -1"

#: 02.2-Synth-Params.md:132
msgid "Now, let's play it out of the right speaker:"
msgstr "En nu uit de rechter luidspreker:"

#: 02.2-Synth-Params.md:134
#, no-wrap
msgid "play 60, pan: 1"
msgstr "play 60, pan: 1"

#: 02.2-Synth-Params.md:138
msgid ""
"Finally let's play it back out of the center of both (the default position):"
msgstr "En nu terug vanuit beiden samen (standaard positie):"

#: 02.2-Synth-Params.md:141
#, no-wrap
msgid "play 60, pan: 0"
msgstr "play 60, pan: 0"

#: 02.2-Synth-Params.md:145
msgid "Now, go and have fun changing the amplitude and panning of your sounds!"
msgstr ""
"Doe nu maar, en veel plezier met het veranderen van de amplitude en het "
"pannen van uw geluiden!"

#: 02.3-Switching-Synths.md:1
msgid "2.3 Switching Synths"
msgstr "2.3 Synths Veranderen"

#: 02.3-Switching-Synths.md:3
msgid "Switching Synths"
msgstr "Synths Veranderen"

#: 02.3-Switching-Synths.md:5
msgid ""
"So far we've had quite a lot of fun making beeps. However, you're probably "
"starting to get bored of the basic beep noise. Is that all Sonic Pi has to "
"offer? Surely there's more to live coding than just playing beeps? Yes there "
"is, and in this section we'll explore the exciting range of sounds that "
"Sonic Pi has to offer."
msgstr ""
"Tot nu hebben we al heel wat plezier beleeft met onze biepjes. Dit standaard "
"biepje zal ons echter na een tijdje gaan vervelen. Is het dit alles wat "
"Sonic Pi ons te bieden heeft? Er moet toch meer kunnen dan alleen maar wat "
"biepjes maken met dit hele gedoe van live-coderen? Oh ja zeker, en in deze "
"sectie gaan we de spannende serie klanken die Sonic Pi te bieden heeft "
"verkennen."

#: 02.3-Switching-Synths.md:13
msgid ""
"Sonic Pi has a range of instruments it calls synths which is *short for "
"synthesisers*. Whereas samples represent pre-recorded sounds, synths are "
"capable of generating new sounds depending on how you control them (which "
"we'll explore later in this tutorial). Sonic Pi's synths are very powerful "
"and expressive and you'll have a lot of fun exploring and playing with them. "
"First, let's learn how to select the current synth to use."
msgstr ""
"Sonic Pi heeft een waaier aan instrumenten, synths genaamd -dat is de "
"verkorting van synthesizers. Waar samples reeds opgenomen klanken "
"vertegenwoordigen, zijn synths in staat om nieuwe klanken te genereren, "
"afhankelijk van hoe je deze instelt (dat gaan we  later in deze handleiding "
"ontdekken). Sonic Pi's synths zijn heel krachtig en expressief en je zal er "
"een veel plezier aan beleven deze te leren kenen en te bespelen. Maar eerst  "
"gaan we leren hoe we deze kunnen selecteren."

#: 02.3-Switching-Synths.md:21
msgid "Buzzy saws and prophets"
msgstr "Drukke Zaagtand-golven en \"Prophets\""

#: 02.3-Switching-Synths.md:23
msgid "A fun sound is the *saw wave* - let's give it a try:"
msgstr "Een leuke klank is de *zaagtand-golf*, laten we deze uitproberen:"

#: 02.3-Switching-Synths.md:25
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:35
msgid "Let's try another sound - the *prophet*:"
msgstr "Laten we nog een andere klank proberen, de *prophet*:"

#: 02.3-Switching-Synths.md:37
#, no-wrap
msgid ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:47
msgid "How about combining two sounds. First one after another:"
msgstr ""
"Hoe zit het dan met het combineren van twee verschillende klanken? Eerst de "
"ene na de andere:"

#: 02.3-Switching-Synths.md:49
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:60
msgid "Now at the same time:"
msgstr "En nu tezelfdertijd:"

#: 02.3-Switching-Synths.md:62
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 38\n"
"sleep 0.25\n"
"use_synth :dsaw\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"
msgstr ""
"use_synth :tb303\n"
"play 38\n"
"sleep 0.25\n"
"use_synth :dsaw\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:74
msgid ""
"Notice that the `use_synth` command only affects the following calls to "
"`play`. Think of it like a *big switch* - new calls to `play` will play "
"whatever synth it's currently pointing to. You can move the switch to a new "
"synth with `use_synth`."
msgstr ""
"Merk hierbij op dat het `use_synth` commando, alleen invloed heeft op de "
"daarop volgende oproepen van 'play'. Stel je deze even voor,als een grote "
"schakelaar, die bij nieuwe 'play' opvragingen, eender welke synth laat "
"afspelen waar momenteel naar verwezen wordt. Je kan die dan omschakelen naar "
"andere synth door het gebruik van `use_synth`."

#: 02.3-Switching-Synths.md:80
msgid "Discovering Synths"
msgstr "Synths Ontdekken"

#: 02.3-Switching-Synths.md:82
msgid ""
"To see which synths Sonic Pi has for you to play with take a look at the "
"Synths option in the far left vertical menu (above Fx). There are over 20 to "
"choose from. Here are a few of my favourites:"
msgstr ""
"Om te zien welke synths Sonic Pi voor u heeft om mee te spelen neem dan een "
"kijkje op de Synths-opties in het uiterst links verticale menu (boven "
"Effecten). Er zijn er meer dan 20 om uit te kiezen. Hier zijn een paar van "
"mijn favorieten:"

#: 02.3-Switching-Synths.md:86
msgid "`:prophet`"
msgstr "`:prophet`"

#: 02.3-Switching-Synths.md:87
msgid "`:dsaw`"
msgstr "`:dsaw`"

#: 02.3-Switching-Synths.md:88
msgid "`:fm`"
msgstr "`:fm`"

#: 02.3-Switching-Synths.md:89
msgid "`:tb303`"
msgstr "`:tb303`"

#: 02.3-Switching-Synths.md:90
msgid "`:pulse`"
msgstr "`:pulse`"

#: 02.3-Switching-Synths.md:92
msgid ""
"Now play around with *switching synths during your music*. Have fun "
"combining synths to make new sounds as well as using different synths for "
"different sections of your music."
msgstr ""
"Speel nu een beetje met dit schakelen van synths terwijl je muziekstuk "
"afspeelt. Veel plezier met het combineren van synths om nieuwe klanken te "
"maken of om verschillende secties in uw muziekstuk van verschillende synths "
"te voorzien."

#: 02.4-Durations-with-Envelopes.md:1
msgid "2.4 Duration with Envelopes"
msgstr "2.4 Geluidsduur met \"Envelopes\""

#: 02.4-Durations-with-Envelopes.md:3
msgid "Duration with Envelopes"
msgstr "Geluidsduur met \"Envelopes\""

#: 02.4-Durations-with-Envelopes.md:5
msgid ""
"In an earlier section, we looked at how we can use the `sleep` command to "
"control when to trigger our sounds. However, we haven't yet been able to "
"control the duration of our sounds."
msgstr ""
"In een eerdere sectie, hebben we gezien hoe we de opdracht 'sleep' gebruiken "
"om te bepalen wanneer we onze geluiden activeren . We zijn echter nog in "
"staat geweest om te bepalen hoe lang onze klank duurt."

#: 02.4-Durations-with-Envelopes.md:9
msgid ""
"In order to give us a simple, yet powerful means of *controlling the "
"duration* of our sounds, Sonic Pi provides the notion of an *ADSR amplitude "
"envelope* (we'll cover what ADSR means later in this section). An amplitude "
"envelope offers two useful aspects of control:"
msgstr ""
"Om ons een eenvoudig maar krachtig middel te geven waar we de controle "
"hebben over de tijdsduur van onze klank, biedt Sonic Pi ons een zekere "
"manier van notering van een zogenaamde *ADSR amplitude envelope* (we "
"bespreken later in deze sectie wat dat betekent). Een amplitude \"envelope\" "
"biedt twee manieren van controle:"

#: 02.4-Durations-with-Envelopes.md:14
msgid "control over the duration of a sound"
msgstr "controle over de duurtijd van een klank"

#: 02.4-Durations-with-Envelopes.md:15
msgid "control over the amplitude of a sound"
msgstr "controle over de amplitude van een klank"

#: 02.4-Durations-with-Envelopes.md:17
msgid "Duration"
msgstr "Duurtijd"

#: 02.4-Durations-with-Envelopes.md:19
msgid ""
"The duration is the length the sound lasts for. A longer duration means that "
"you hear the sound for longer. Sonic Pi's sounds all have a controllable "
"amplitude envelope, and the total duration of that envelope is the duration "
"of the sound. Therefore, by controlling the envelope you control the "
"duration."
msgstr ""
"De duurtijd is de lengte dat een klank aanhoud . Een langere duur betekent "
"dat u de klank langer hoort. De klanken van Sonic Pi hebben allen een "
"instelbare amplitude envelop, de totale duur van die envelop is dan de "
"totale duurtijd van die klank. Daarom kan je, door het instellen van de "
"envelop,  de duurtijd bepalen."

#: 02.4-Durations-with-Envelopes.md:27
msgid ""
"The ADSR envelope not only controls duration, it also gives you *fine "
"control over the amplitude of the sound*. All audible sounds start and end "
"silent and contain some non-silent part in-between. Envelopes allow you to "
"slide and hold the amplitude of non-silent parts of the sound. It's like "
"giving someone instructions on how to turn up and down the volume of a "
"guitar amplifier. For example you might ask someone to \"start at silence, "
"slowly move up to full volume, hold it for a bit, then quickly fall back to "
"silence.\" Sonic Pi allows you to program exactly this behaviour with "
"envelopes."
msgstr ""
"De ADSR envelop regelt niet alleen de duurtijd, het geeft je ook een *"
"fijnregeling van de geluidssterkte van de klank*. Alle hoorbare klanken "
"starten en eindigen van en naar onhoorbaarheid en bevatten, tussendoor, "
"luidere en minder luide delen. De ASDR envelop staat je toe de "
"geluidssterkte van de hoorbare gedeelten van een klank te verschuiven en "
"vast te houden. Zoals je iemand instructies zou geven aan het volume van een "
"gitaarversterker en deze van stil, naar langzaam omhoog tot het hoogste "
"volume en deze even aan te laten houden, om deze dan, snel of traag, terug "
"naar stil te brengen. Door de envelop kan je dit gedrag in Sonic Pi "
"programmeren."

#: 02.4-Durations-with-Envelopes.md:37
msgid ""
"Just to recap, as we have seen before, an amplitude of 0 is silence and an "
"amplitude of 1 is normal volume."
msgstr ""
"Even recapituleren, zoals we eerder hebben gezien, is een amplitude van 0 is "
"stilte en een amplitude van 1 is het normale volume."

#: 02.4-Durations-with-Envelopes.md:40
msgid "Now, let us look at each of the parts of the envelopes in turn."
msgstr "Laten we nu kijken naar elk onderdeel van de envelop."

#: 02.4-Durations-with-Envelopes.md:42
msgid "Release Phase"
msgstr "Release fase"

#: 02.4-Durations-with-Envelopes.md:44
msgid ""
"The only part of the envelope that's used by default is the release time. "
"This is the time it takes for the synth's sound to fade out. All synths have "
"a release time of 1 which means that by default they have a duration of 1 "
"beat (which at the default BPM of 60 is 1 second):"
msgstr ""
"Het enige deel van de envelop die standaard wordt gebruikt is de release "
"tijd. Dit is de tijd die nodig is om het geluid van een synth uit te "
"vervagen. Alle synthesizers hebben een release tijd van 1, wat betekent dat "
"ze standaard een duur van 1 beat hebben (en dus op onze standaard 60 BPM, 1 "
"seconde lang is):"

#: 02.4-Durations-with-Envelopes.md:53
msgid ""
"The note will be audible for 1 second. Go ahead and time it :-) This is "
"short hand for the longer more explicit version:"
msgstr ""
"De noot zal 1 seconde lang hoorbaar zijn. Chronometreer maar :-) Dit is de "
"verkorting van de langere, meer uitgesproken versie:"

#: 02.4-Durations-with-Envelopes.md:56
#, no-wrap
msgid "play 70, release: 1"
msgstr "play 70, release: 1"

#: 02.4-Durations-with-Envelopes.md:60
msgid ""
"Notice how this sounds exactly the same (the sound lasts for one second). "
"However, it's now very easy to change the duration by modifying the value of "
"the `release:` opt:"
msgstr ""
"Merk op dat deze exact hetzelfde klinkt (de klank duurt één seconde). Het is "
"dus heel makkelijk om de duurtijd in te stellen door de waarde te veranderen "
"van de  `release:` optie:"

#: 02.4-Durations-with-Envelopes.md:64
#, no-wrap
msgid "play 60, release: 2"
msgstr "play 60, release: 2"

#: 02.4-Durations-with-Envelopes.md:68
msgid ""
"We can make the synth sound for a very short amount of time by using a very "
"small release time:"
msgstr ""
"We kunnen de synth voor een heel korte tijd laten klinken door een heel "
"korte release tijd te gebruiken:"

#: 02.4-Durations-with-Envelopes.md:71
#, no-wrap
msgid "play 60, release: 0.2"
msgstr "play 60, release: 0.2"

#: 02.4-Durations-with-Envelopes.md:75
msgid ""
"The duration of the release of the sound is called the *release phase* and "
"by default is a linear transition (i.e. a straight line). The following "
"diagram illustrates this transition:"
msgstr ""
"De duur van het “vrijlaten\" van het geluid noemen we de *release fase* en "
"staat standaard op een lineaire overgang ingesteld (dwz rechtlijnig).Het "
"volgende diagram illustreert deze overgang:"

#: 02.4-Durations-with-Envelopes.md:79
msgid "![release envelope](../images/tutorial/env-release.png)"
msgstr "![release envelope](../images/tutorial/env-release.png)"

#: 02.4-Durations-with-Envelopes.md:81
msgid ""
"The vertical line at the far left of the diagram shows that the sound starts "
"at 0 amplitude, but goes up to full amplitude immediately (this is the "
"attack phase which we'll cover next). Once at full amplitude it then moves "
"in a straight line down to zero taking the amount of time specified by "
"`release:`. *Longer release times produce longer synth fade outs.*"
msgstr ""
"De verticale lijn aan de linkerkant van het diagram toont ons dat het geluid "
"bij amplitude 0 begint, onmiddellijk klimt naar volledige amplitude (dit is "
"de  aanslag fase, die zullen we vervolgens bespreken). Eens bij volledige "
"amplitude gaat het in een rechte lijn naar nul zakken in de tijd die is "
"opgegeven met `release:`. *Langere release tijden leveren een langer "
"verloop, waarmee het geluid van de synth uitvaagt, op*"

#: 02.4-Durations-with-Envelopes.md:88
msgid ""
"You can therefore change the duration of your sound by changing the release "
"time. Have a play adding release times to your music."
msgstr ""
"Je kan dus de duurtijd van je klank veranderen aan de hand van de release "
"tijd. Speel hier even mee, door deze release tijden toe te voegen aan je "
"klanken."

#: 02.4-Durations-with-Envelopes.md:91
msgid "Attack Phase"
msgstr "Aanslag fase (de Attack)"

#: 02.4-Durations-with-Envelopes.md:93
msgid ""
"By default, the *attack phase* is 0 for all synths which means they move "
"from 0 amplitude to 1 immediately. This gives the synth an initial "
"percussive sound. However, you may wish to fade your sound in. This can be "
"achieved with the `attack:` opt. Try fading in some sounds:"
msgstr ""
"De aanslag fase is voor alle synths standaard ingesteld op 0, wat betekend "
"dat deze onmiddellijk van 0 naar 1 gaat. Dit geeft aan de synth een korte "
"hevige klank zoals bij een percussie-instrument. Maar misschien wil je je "
"geluid zachtjes luider laten worden. Dit kunnen we met de `attack:` optie. "
"Probeer nu eens van klanken te laten aanzwellen:"

#: 02.4-Durations-with-Envelopes.md:98
#, no-wrap
msgid ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"
msgstr ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"

#: 02.4-Durations-with-Envelopes.md:104
msgid ""
"You may use multiple opts at the same time. For example for a short attack "
"and a long release try:"
msgstr ""
"Je kan meerdere opties tegelijk kiezen. Probeer deze bijvoorbeeld voor een "
"kortere aanslag en een langere uitloop:"

#: 02.4-Durations-with-Envelopes.md:107
#, no-wrap
msgid "play 60, attack: 0.7, release: 4"
msgstr "play 60, attack: 0.7, release: 4"

#: 02.4-Durations-with-Envelopes.md:111
msgid ""
"This short attack and long release envelope is illustrated in the following "
"diagram:"
msgstr ""
"Deze korte attack en lange release envelop wordt geïllustreerd in het "
"volgende diagram:"

#: 02.4-Durations-with-Envelopes.md:114
msgid "![attack release envelope](../images/tutorial/env-attack-release.png)"
msgstr "![attack release envelope](../images/tutorial/env-attack-release.png)"

#: 02.4-Durations-with-Envelopes.md:116
msgid ""
"Of course, you may switch things around. Try a long attack and a short "
"release:"
msgstr ""
"Natuurlijk, kan je de dingen omdraaien. Probeer een lange attack en een "
"korte release:"

#: 02.4-Durations-with-Envelopes.md:119
#, no-wrap
msgid "play 60, attack: 4, release: 0.7"
msgstr "play 60, attack: 4, release: 0.7"

#: 02.4-Durations-with-Envelopes.md:123
msgid ""
"![long attack short release envelope](../images/tutorial/env-long-attack-"
"short-release.png)"
msgstr ""
"![long attack short release envelope](../images/tutorial/env-long-attack-"
"short-release.png)"

#: 02.4-Durations-with-Envelopes.md:125
msgid ""
"Finally, you can also have both short attack and release times for shorter "
"sounds."
msgstr ""
"Voorts kan je ook korte Attack en release tijden hebben voor korte klanken."

#: 02.4-Durations-with-Envelopes.md:128
#, no-wrap
msgid "play 60, attack: 0.5, release: 0.5"
msgstr "play 60, attack: 0.5, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:132
msgid ""
"![short attack short release envelope](../images/tutorial/env-short-attack-"
"short-release.png)"
msgstr ""
"![short attack short release envelope](../images/tutorial/env-short-attack-"
"short-release.png)"

#: 02.4-Durations-with-Envelopes.md:134
msgid "Sustain Phase"
msgstr "SustainFase"

#: 02.4-Durations-with-Envelopes.md:136
msgid ""
"In addition to specifying attack and release times, you may also specify a "
"sustain time to control the *sustain phase*. This is the time for which the "
"sound is maintained at full amplitude between the attack and release phases."
msgstr ""
"Naast het opgeven van attack en release tijden, u kunt ook een sustain-tijd "
"opgeven om de *sustain fase* in te stellen. Dit is de tijd dat het geluid "
"bij een volledige amplitude tussen de attack en de release fase wordt "
"gehandhaafd."

#: 02.4-Durations-with-Envelopes.md:141
#, no-wrap
msgid "play 60, attack: 0.3, sustain: 1, release: 1"
msgstr "play 60, attack: 0.3, sustain: 1, release: 1"

#: 02.4-Durations-with-Envelopes.md:145
msgid "![ASR envelope](../images/tutorial/env-attack-sustain-release.png)"
msgstr "![ASR envelope](../images/tutorial/env-attack-sustain-release.png)"

#: 02.4-Durations-with-Envelopes.md:147
msgid ""
"The sustain time is useful for important sounds you wish to give full "
"presence in the mix before entering an optional release phase. Of course, "
"it's totally valid to set both the `attack:` and `release:` opts to 0 and "
"just use the sustain to have absolutely no fade in or fade out to the sound. "
"However, be warned, a release of 0 can produce clicks in the audio and it's "
"often better to use a very small value such as 0.2."
msgstr ""
"De sustain-tijd is nuttig voor de klanken die je een volledige "
"tegenwoordigheid in de mix wil geven voordat deze een release fase "
"doorlopen. Natuurlijk, is het volkomen geldig om zowel de `attack:` als de  "
"`release:` optie in te stellen op 0, om gewoon geen fade in- of fade out aan "
"het geluid toe te voegen. Maar hier moet je mee opletten, een release van 0 "
"kan klikjes in de audio produceren en het is vaak beter om een zeer kleine "
"waarde te gebruiken zoals 0,2."

#: 02.4-Durations-with-Envelopes.md:154
msgid "Decay Phase"
msgstr "Verval fase (Decay Phase)"

#: 02.4-Durations-with-Envelopes.md:156
msgid ""
"For an extra level of control, you can also specify a decay time. This is a "
"phase of the envelope that fits between the attack and sustain phases and "
"specifies a time where the amplitude will drop from the `attack_level:` to "
"the `decay_level:` (which unless you explicitly set it will be set to the "
"`sustain_level:`). By default, the `decay:` opt is 0 and both the attack and "
"sustain levels are 1 so you'll need to specify them for the decay time to "
"have any effect:"
msgstr ""
"Voor een extra controle niveau kunt u ook de verval tijd instellen. Dit is "
"de fase van de envelop die past tussen de attack en sustain fasen en geeft u "
"een tijdwaarde waarbij de amplitude zal dalen het  `attack_niveau:` naar het "
"`decay_niveau:` (die, tenzij u die expliciet instelt, op het ' "
"sustain_niveau:' gebracht zal worden). Standaard, is de `decay:` optie 0 en "
"hebben zowel attack en sustain niveaus zijn 1, deze zal je dus moeten "
"opgeven voor de verval  tijd effect heeft:"

#: 02.4-Durations-with-Envelopes.md:164
#, no-wrap
msgid "play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain: 1, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, "
"sustain: 1, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:168
msgid ""
"![ADSR envelope](../images/tutorial/env-attack-decay-sustain-release.png)"
msgstr ""
"![ADSR envelope](../images/tutorial/env-attack-decay-sustain-release.png)"

#: 02.4-Durations-with-Envelopes.md:170
msgid "Decay Level"
msgstr "Verval niveau"

#: 02.4-Durations-with-Envelopes.md:172
msgid ""
"One last trick is that although the `decay_level:` opt defaults to be the "
"same value as `sustain_level:` you can explicitly set them to different "
"values for full control over the envelope. This allows you to to create "
"envelopes such as the following:"
msgstr ""
"Één laatste truc is dat hoewel de `decay_level:` optie dezelfde standaard "
"ingestelde waarde heeft als `sustain_level:` kan je deze wel expliciet "
"instellen op verschillende waarden voor de volledige controle over de "
"envelop. Hierdoor kan je een envelop maken zoals de volgende:"

#: 02.4-Durations-with-Envelopes.md:177
#, no-wrap
msgid "play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: 1, sustain_level: 0.4, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain:"
" 1, sustain_level: 0.4, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:181
msgid "![ASR envelope](../images/tutorial/env-decay-level.png)"
msgstr "![ASR envelope](../images/tutorial/env-decay-level.png)"

#: 02.4-Durations-with-Envelopes.md:183
msgid ""
"It's also possible to set the `decay_level:` to be higher than "
"`sustain_level:`:"
msgstr ""
"Het is ook mogelijk om het  `decay_niveau:` hoger te zetten dan het "
"`sustain_niveau:`:"

#: 02.4-Durations-with-Envelopes.md:185
#, no-wrap
msgid "play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: 0.5, sustain_level: 0.8, release: 1.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain:"
" 0.5, sustain_level: 0.8, release: 1.5"

#: 02.4-Durations-with-Envelopes.md:189
msgid "![ASR envelope](../images/tutorial/env-decay-level-2.png)"
msgstr "![ASR envelope](../images/tutorial/env-decay-level-2.png"

#: 02.4-Durations-with-Envelopes.md:191
msgid "ADSR Envelopes"
msgstr "ADSR Enveloppen"

#: 02.4-Durations-with-Envelopes.md:193
msgid "So to summarise, Sonic Pi's ADSR envelopes have the following phases:"
msgstr "Dus samengevat , hebben Sonic Pi's ADSR enveloppen de volgende fasen:"

#: 02.4-Durations-with-Envelopes.md:195
msgid "*attack* - time from 0 amplitude to the `attack_level`,"
msgstr "*attack* - tijd vanaf 0 amplitude naar `attack_niveau`,"

#: 02.4-Durations-with-Envelopes.md:196
msgid "*decay* - time to move amplitude from `attack_level` to `decay_level`,"
msgstr ""
"*decay* - tijd om de amplitude van `attack_niveau` naar `decay_niveau` te "
"brengen,"

#: 02.4-Durations-with-Envelopes.md:197
msgid ""
"*sustain* - time to move the amplitude from `decay_level` to `sustain_level`,"
msgstr ""
"*sustain* - tijd om de amplitude van `decay_niveau` naar `sustain_niveau` te "
"brengen,"

#: 02.4-Durations-with-Envelopes.md:198
msgid "*release* - time to move amplitude from `sustain_level` to 0"
msgstr "*release* - tijd om de amplitude van `sustain_niveau` naar 0 te brengen"

#: 02.4-Durations-with-Envelopes.md:200
msgid ""
"It's important to note that the duration of a sound is the summation of the "
"times of each of these phases. Therefore the following sound will have a "
"duration of 0.5 + 1 + 2 + 0.5 = 4 beats:"
msgstr ""
"Het is belangrijk op te merken dat de duur van een geluid de som is van van "
"de tijd van elk van deze fasen. Daarom zal het volgende geluid een duur van "
"0,5 + 1 + 2 + 0,5 = 4 hebben:"

#: 02.4-Durations-with-Envelopes.md:204
#, no-wrap
msgid "play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: 2, release: 0.5"
msgstr ""
"play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain:"
" 2, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:208
msgid "Now go and have a play adding envelopes to your sounds..."
msgstr ""
"Nu gaan we hiermee spelen, door deze envelop aan jouw klanken toe te voegen…"

#: 03-Samples.md:1
msgid "3 Samples"
msgstr "3 Samples"

#: 03-Samples.md:3
msgid "Samples"
msgstr "Samples"

#: 03-Samples.md:5
msgid ""
"Another great way to develop your music is to use pre-recorded sounds. In "
"great hip-hop tradition, we call these pre-recorded sounds *samples*. So, if "
"you take a microphone outside, go and record the gentle sound of rain "
"hitting canvas, you've just created a sample."
msgstr ""
"Een andere goede manier om je muziek op te bouwen is het gebruik van vooraf "
"opgenomen geluiden. In de traditie van de hip-hop, noemen we deze vooraf "
"opgenomen geluiden *samples*. Dus, als je met een microfoon buiten gaat en "
"je neemt het geluid van de regen op, dat zachtjes tegen een zeil tikt, heb "
"je een sample gemaakt."

#: 03-Samples.md:10
msgid ""
"Sonic Pi lets you do lots of fun things with samples. Not only does it ship "
"with over 90 public domain samples ready for you to jam with, it lets you "
"play and manipulate your own. Let's get to it..."
msgstr ""
"Sonic Pi laat je allerlei prettige dingen doen door gebruik te maken van "
"samples. En niet alleen omdat deze over de 90 samples aan boord heeft waar "
"je mee aan de slag kan gaan, ook laat het je toe om jouw eigen samples te "
"gebruiken en deze te manipuleren. We vertrekken…"

#: 03.1-Triggering-Samples.md:1
msgid "3.1 Triggering Samples"
msgstr "3.1 Samples Triggeren"

#: 03.1-Triggering-Samples.md:3
msgid "Triggering Samples"
msgstr "Samples Triggeren"

#: 03.1-Triggering-Samples.md:5
msgid ""
"Playing beeps is only the beginning. Something that's a lot of fun is "
"triggering pre-recorded samples. Try it:"
msgstr ""
"Bliepjes spelen was slechts het begin. Vooraf opgenomen samples triggeren is "
"ook echt fijn . Probeer het:"

#: 03.1-Triggering-Samples.md:8
#, no-wrap
msgid "sample :ambi_lunar_land"
msgstr "sample :ambi_lunar_land"

#: 03.1-Triggering-Samples.md:12
msgid ""
"Sonic Pi includes many samples for you to play with. You can use them just "
"like you use the `play` command. To play multiple samples and notes just "
"write them one after another:"
msgstr ""
"Sonic Pi bevat vele samples waarmee je aan de slag kunt gaan. Je kan ze "
"gebruiken met het `play` commando, net zoals de bliepjes. Als je meerder "
"samples en noten wil gebruiken kan je ze dus achter elkaar schrijven:"

#: 03.1-Triggering-Samples.md:16
#, no-wrap
msgid ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"
msgstr ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"

#: 03.1-Triggering-Samples.md:23
msgid "If you want to space them out in time, use the `sleep` command:"
msgstr ""
"Als je ze in tijd wil verspreiden, maak dan gebruik van het `sleep` commando:"

#: 03.1-Triggering-Samples.md:25
#, no-wrap
msgid ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"
msgstr ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"

#: 03.1-Triggering-Samples.md:36
msgid ""
"Notice how Sonic Pi doesn't wait for a sound to finish before starting the "
"next sound. The `sleep` command only describes the separation of the "
"*triggering* of the sounds. This allows you to easily layer sounds together "
"creating interesting overlap effects. Later in this tutorial we'll take a "
"look at controlling the *duration* of sounds with envelopes."
msgstr ""
"Merk op hoe Sonic Pi niet zal wachten om een geluid te voltooien voordat het "
"volgende geluid begint. De opdracht `sleep` beschrijft alleen de scheiding "
"tussen het *activeren* van de geluiden. Hierdoor kan je makkelijk "
"verschillende lagen van klanken creëren die een interessant effect kunnen "
"hebben door overlapping. Verderop in deze handleiding zullen we een kijkje  "
"nemen om de *duur* van geluiden met enveloppen in te stellen."

#: 03.1-Triggering-Samples.md:44
msgid "Discovering Samples"
msgstr "Samples Ontdekken"

#: 03.1-Triggering-Samples.md:46
msgid ""
"There are two ways to discover the range of samples provided in Sonic Pi. "
"First, you can use this help system. Click on Samples in the far left "
"vertical menu, choose your category and then you'll see a list of available "
"sounds."
msgstr ""
"Er zijn twee manieren om samples in Sonic Pi te verkennen. Eerst, kunt u dit "
"hulp-systeem gebruiken. Klik op Samples in het meest linkse verticale menu, "
"kies uw categorie en vervolgens ziet u een lijst met beschikbare geluiden."

#: 03.1-Triggering-Samples.md:51
msgid ""
"Alternatively you can use the *auto-completion system*. Simply type the "
"start of a sample group such as: `sample :ambi_` and you'll see a drop-down "
"of sample names appear for you to select. Try the following category "
"prefixes:"
msgstr ""
"Alternatief kan je het *auto-vervollediging systeem* gebruiken.  Typ enkel "
"het begin van de groep waartoe de sample behoort zoals `sample :ambi_`  en "
"je zal een menu zien openklappen waarin de samples weergegeven worden die je "
"kan selecteren. Probeer de volgende categorie-voorvoegsels:"

#: 03.1-Triggering-Samples.md:56
msgid "`:ambi_`"
msgstr "`:ambi_`"

#: 03.1-Triggering-Samples.md:57
msgid "`:bass_`"
msgstr "`:bass_`"

#: 03.1-Triggering-Samples.md:58
msgid "`:elec_`"
msgstr "`:elec_`"

#: 03.1-Triggering-Samples.md:59
msgid "`:perc_`"
msgstr "`:perc_`"

#: 03.1-Triggering-Samples.md:60
msgid "`:guit_`"
msgstr "`:guit_`"

#: 03.1-Triggering-Samples.md:61
msgid "`:drum_`"
msgstr "`:drum_`"

#: 03.1-Triggering-Samples.md:62
msgid "`:misc_`"
msgstr "`:misc_`"

#: 03.1-Triggering-Samples.md:63
msgid "`:bd_`"
msgstr "`:bd_`"

#: 03.1-Triggering-Samples.md:65
msgid "Now start mixing samples into your compositions!"
msgstr "Begin nu de samples in je composities te mixen!"

#: 03.2-Sample-Params.md:1
msgid "3.2 Sample Parameters"
msgstr "3.2 Sample Parameters"

#: 03.2-Sample-Params.md:3
msgid "Sample Parameters: Amp and Pan"
msgstr "Sample Parameters: Amp en Pan"

#: 03.2-Sample-Params.md:5
msgid ""
"As we saw with synths, we can easily control our sounds with parameters. "
"Samples support exactly the same parameterisation mechanism. Let's revisit "
"our friends `amp:` and `pan:`."
msgstr ""
"Zoals we met synths zagen, kunnen we gemakkelijk onze geluiden met "
"parameters regelen. Samples steunen op precies hetzelfde parameter "
"mechanisme. Laten we opnieuw onze vrienden `amp:` en `pan:` erbij halen."

#: 03.2-Sample-Params.md:9
msgid "Amping samples"
msgstr "Samples amp-en"

#: 03.2-Sample-Params.md:11
msgid ""
"You can change the amplitude of samples with exactly the same approach you "
"used for synths:"
msgstr ""
"Je kan de amplitude van de samples met precies dezelfde aanpak instellen die "
"je voor synthesizers gebruikt:"

#: 03.2-Sample-Params.md:14
#, no-wrap
msgid "sample :ambi_lunar_land, amp: 0.5"
msgstr "sample :ambi_lunar_land, amp: 0.5"

#: 03.2-Sample-Params.md:18
msgid "Panning samples"
msgstr "Samples Pannen"

#: 03.2-Sample-Params.md:20
msgid ""
"We're also able to use the `pan:` parameter on samples. For example, here's "
"how we'd play the amen break in the left ear and then half way through play "
"it again through the right ear:"
msgstr ""
"We kunnen ook gebruik maken van de `pan:` parameter op samples. "
"Bijvoorbeeld, hier zouden we de amen break met het linker oor en halverwege "
"met het rechter oor horen:"

#: 03.2-Sample-Params.md:24
#, no-wrap
msgid ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"
msgstr ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"

#: 03.2-Sample-Params.md:30
msgid ""
"Note that 0.877 is half the duration of the `:loop_amen` sample in seconds."
msgstr ""
"Merk op dat 0.877 de helft van de lengte is, van de ': loop_amen' sample in "
"seconden uitgedrukt."

#: 03.2-Sample-Params.md:33
msgid ""
"Finally, note that if you set some synth defaults with `use_synth_defaults` "
"(which we will discuss later), these will be ignored by `sample`."
msgstr ""
"Hou er tenslotte ook rekening mee dat als je sommige synths van het commando "
"`use_synth_defaults` voorziet (welke we later zullen bespreken), deze door "
"`sample` zullen genegeerd worden."

#: 03.3-Stretching-Samples.md:1
msgid "3.3 Stretching Samples"
msgstr "3.3  Samples Stretchen"

#: 03.3-Stretching-Samples.md:3
msgid "Stretching Samples"
msgstr "Samples Stretchen"

#: 03.3-Stretching-Samples.md:5
msgid ""
"Now that we can play a variety of synths and samples to create some music, "
"it's time to learn how to modify both the synths and samples to make the "
"music even more unique and interesting. First, let's explore the ability to "
"*stretch* and *squash* samples."
msgstr ""
"Nu  we  met verschillende synths en samples muziek kunnen gaan spelen, is "
"het tijd om te leren hoe je zowel de synths als de samples in kan stellen om "
"de muziek nog meer uniek en interessant te maken. Ten eerste, laten we  de "
"mogelijkheid onderzoeken om te samples te *stretchen* of te *krimpen*."

#: 03.3-Stretching-Samples.md:10
msgid "Sample Representation"
msgstr "Sample Representatie"

#: 03.3-Stretching-Samples.md:12
msgid ""
"Samples are pre-recorded sounds stored as numbers which represent how to "
"move the speaker cone to reproduce the sound. The speaker cone can move in "
"and out, and so the numbers just need to represent how far in and out the "
"cone needs to be for each moment in time. To be able to faithfully reproduce "
"a recorded sound the sample typically needs to store many thousands of "
"numbers per second! Sonic Pi takes this list of numbers and feeds them at "
"the right speed to move your computer's speaker in and out in just the right "
"way to reproduce the sound. However, it's also fun to change the speed with "
"which the numbers are fed to the speaker to change the sound."
msgstr ""
"Samples zijn eigenlijk vooraf opgenomen geluiden die opgeslagen zijn als "
"getallen die het verplaatsen van de conus van de luidspreker veroorzaken, om "
"het geluid te kunnen representeren. De conus van de luidspreker kan zich "
"naar voor en naar achter verplaatsen , en dus hoeven de nummers alleen maar "
"weer te geven, hoe ver in en uit de kegel op elk moment in de tijd moet "
"bewegen. Om een getrouwe afspiegeling van een opgenomen geluid te kunnen "
"zijn moet de sample meestal vele duizenden nummers per seconde opslaan! "
"Sonic Pi neemt deze lijst van nummers en voedt hen met de juiste snelheid, "
"om de luidspreker van uw computer op de juiste manier in en uit te "
"verplaatsen om het geluid te kunnen weergeven. Het is echter ook leuk om  de "
"snelheid waarmee de nummers worden gevoed aan de luidspreker te veranderen, "
"om het geluid te veranderen ."

#: 03.3-Stretching-Samples.md:23
msgid "Changing Rate"
msgstr "Koers wijzigen (rate)"

#: 03.3-Stretching-Samples.md:25
msgid ""
"Let's play with one of the ambient sounds: `:ambi_choir`. To play it with "
"the default rate, you can pass a `rate:` opt to `sample`:"
msgstr ""
"Laten we even spelen met één van de  ambient sounds: `:ambi_choir`. Om deze "
"af te spelen op de standaard ingestelde koers, kan je een `rate:` optie aan "
"`sample` doorgeven:"

#: 03.3-Stretching-Samples.md:28
#, no-wrap
msgid "sample :ambi_choir, rate: 1"
msgstr "sample :ambi_choir, rate: 1"

#: 03.3-Stretching-Samples.md:32
msgid ""
"This plays it at normal rate (1), so nothing special yet. However, we're "
"free to change that number to something else. How about `0.5`:"
msgstr ""
"Deze speelt de normale koers (1), nog niets bijzonders dus. We zijn echter "
"vrij om dat cijfer te veranderen naar iets anders. Hoe zit het met '0.5':"

#: 03.3-Stretching-Samples.md:35
#, no-wrap
msgid "sample :ambi_choir, rate: 0.5"
msgstr "sample :ambi_choir, rate: 0.5"

#: 03.3-Stretching-Samples.md:39
msgid ""
"Woah! What's going on here? Well, two things. Firstly, the sample takes "
"twice as long to play, secondly the sound is an octave lower. Let's explore "
"these things in a little more detail."
msgstr ""
"Woah! Wat gebeurt hier? Nou, twee dingen. Ten eerste, de sample duurt twee "
"keer zo lang in deze weergave, ten tweede is het geluid een octaaf lager. "
"Laten we deze dingen meer in detail gaan bekijken."

#: 03.3-Stretching-Samples.md:43
msgid "Let's stretch"
msgstr "Laten we stretchen"

#: 03.3-Stretching-Samples.md:45
msgid ""
"A sample that's fun to stretch and compress is the Amen Break. At normal "
"rate, we might imagine throwing it into a *drum 'n' bass* track:"
msgstr ""
"Een sample die is leuk om te stretchen en te comprimeren is de Amen Break. "
"Op normale koers, kunnen we het ons voorstellen deze in een *drum 'n' bass* "
"track te gooien:"

#: 03.3-Stretching-Samples.md:48 03.4-Enveloped-Samples.md:17
#: 03.5-Partial-Samples.md:9 A.03-coded-beats.md:33 A.12-sample-slicing.md:22
#, no-wrap
msgid "sample :loop_amen"
msgstr "sample :loop_amen"

#: 03.3-Stretching-Samples.md:52
msgid ""
"However by changing the rate we can switch up genres. Try half speed for "
"*old school hip-hop*:"
msgstr ""
"Door de koerssnelheid te veranderen kunnen we van genre schakelen. Probeer "
"eens halve snelheid voor *old school hiphop*:"

#: 03.3-Stretching-Samples.md:55 03.5-Partial-Samples.md:16
#, no-wrap
msgid "sample :loop_amen, rate: 0.5"
msgstr "sample :loop_amen, rate: 0.5"

#: 03.3-Stretching-Samples.md:59
msgid "If we speed it up, we enter *jungle* territory:"
msgstr "Als we het versnellen, komen we op het grondgebied van *jungle*:"

#: 03.3-Stretching-Samples.md:61
#, no-wrap
msgid "sample :loop_amen, rate: 1.5"
msgstr "sample :loop_amen, rate: 1.5"

#: 03.3-Stretching-Samples.md:65
msgid ""
"Now for our final party trick - let's see what happens if we use a negative "
"rate:"
msgstr ""
"En nog een laatste truc - laten we eens kijken wat er gebeurt als we gebruik "
"maken van een negatieve koers:"

#: 03.3-Stretching-Samples.md:68
#, no-wrap
msgid "sample :loop_amen, rate: -1"
msgstr "sample :loop_amen, rate: -1"

#: 03.3-Stretching-Samples.md:72
msgid ""
"Woah! It plays it *backwards*! Now try playing with lots of different "
"samples at different rates. Try very fast rates. Try crazy slow rates. See "
"what interesting sounds you can produce."
msgstr ""
"Woah! Nu speelt het *achteruit*! Proberen nu met een heleboel verschillende "
"samples aan verschillende koerssnelheden te spelen. Probeer zeer snelle "
"rates. Probeer gek trage rates. Zie welke interessante geluiden je zo kan "
"produceren."

#: 03.3-Stretching-Samples.md:76
msgid "A Simple Explanation of Sample Rate"
msgstr "Een eenvoudige uitleg over de Sample Rate"

#: 03.3-Stretching-Samples.md:78
msgid ""
"A useful way to think of samples is as springs. Playback rate is like "
"squashing and stretching the spring. If you play the sample at rate 2, "
"you're *squashing the spring* to half its normal length. The sample "
"therefore takes half the amount of time to play as it's shorter. If you play "
"the sample at half rate, you're *stretching the spring* to double its "
"length. The sample therefore takes twice the amount of time to play as it's "
"longer. The more you squash (higher rate), the shorter it gets, the more you "
"stretch (lower rate), the longer it gets."
msgstr ""
"Een handige manier van denken is om samples te zien als een veer. Afspeel "
"snelheid is als het stretchen en indrukken van de veer. Als je de sample aan "
"snelheid (rate) 2 afspeelt, ben je de *veer aan het indrukken* met de helft "
"daarvan, heb je de veer in rust. Het neemt de sample dus de helft van de "
"tijd om te spelen, aangezien deze nu korter is. Als je de sample aan half "
"tempo speelt, *stretch je de veer* tot het dubbele van zijn lengte. De "
"sample neemt daarom tweemaal zolang tijd om te spelen, aangezien deze nu "
"langer is. Hoe meer u indrukt (hogere snelheid), hoe korter deze wordt, hoe "
"meer je stretcht (lagere snelheid), hoe langer deze wordt."

#: 03.3-Stretching-Samples.md:87
msgid ""
"Compressing a spring increases its density (the number of coils per cm) - "
"this is similar to the sample sounding *higher pitched*. Stretching the "
"spring decreases its density and is similar to the sound having a *lower "
"pitch*."
msgstr ""
"Het comprimeren van een veer verhoogt de dichtheid (het aantal windingen per "
"cm) - deze is vergelijkbaar met de sample die dan *hoger gepitcht* klinkt. "
"De veer rekken neemt de dichtheid af en is dan vergelijkbaar met het geluid "
"met een *lagere toonhoogte*."

#: 03.3-Stretching-Samples.md:93
msgid "The Maths Behind Sample Rate"
msgstr "De wiskunde achter Sample Rate"

#: 03.3-Stretching-Samples.md:95
msgid ""
"(This section is provided for those that are interested in the details. "
"Please feel free to skip it...)"
msgstr ""
"(Deze sectie is bedoeld voor degenen die geïnteresseerd zijn in de details. "
"Je kan deze gerust overslaan...)"

#: 03.3-Stretching-Samples.md:98
msgid ""
"As we saw above, a sample is represented by a big long list of numbers "
"representing where the speaker should be through time. We can take this list "
"of numbers and use it to draw a graph which would look similar to this:"
msgstr ""
"Zoals we hierboven zagen, wordt een sample vertegenwoordigd door een grote "
"lange lijst nummers, die de luidspreker vertelt waar deze zou moeten zijn "
"doorheen een zekere tijd. We kunnen deze lijst van getallen gebruiken om bv. "
"deze grafiek te tekenen:"

#: 03.3-Stretching-Samples.md:103
msgid "![sample graph](../images/tutorial/sample.png)"
msgstr "![sample graph](../images/tutorial/sample.png)"

#: 03.3-Stretching-Samples.md:105
msgid ""
"You might have seen pictures like this before. It's called the *waveform* of "
"a sample. It's just a graph of numbers. Typically a waveform like this will "
"have 44100 points of data per second (this is due to the Nyquist-Shannon "
"sampling theorem). So, if the sample lasts for 2 seconds, the waveform will "
"be represented by 88200 numbers which we would feed to the speaker at a rate "
"of 44100 points per second. Of course, we could feed it at double rate which "
"would be 88200 points per second. This would therefore take only 1 second to "
"play back. We could also play it back at half rate which would be 22050 "
"points per second taking 4 seconds to play back."
msgstr ""
"Misschien hebt u al wel eens afbeeldingen gezien zoals deze. Het is een "
"*geluidsgolf* van een sample.Het is gewoon een grafiek van getallen. Meestal "
"zal een golfvorm 44100 punten per seconde bevatten over de gegevens (dit is "
"te wijten aan de Nyquist-Shannon sample-theoriën). Dus, als de sample 2 "
"seconden duurt, za de golfvorm vertegenwoordigd worden door 88200 nummers "
"die we aan de luidspreker met een snelheid van 44100 punten per seconde "
"zouden voeden. Natuurlijk, kunnen we deze aan dubbele snelheid voeden, dat "
"zou dan 88200 punten per seconde zijn. Dit zou dus slechts 1 seconde in "
"beslag nemen om af te spelen. We kunnen ook aan halve snelheid afspelen, dat "
"zou 22050 punten per seconde zijn waarbij deze 4 seconden nodig heeft om af "
"te spelen."

#: 03.3-Stretching-Samples.md:116
msgid "The duration of the sample is affected by the playback rate:"
msgstr "De duur van de sample wordt beïnvloed door de afspeelsnelheid (rate):"

#: 03.3-Stretching-Samples.md:118
msgid "Doubling the playback rate halves the playback time,"
msgstr "De afspeelsnelheid verdubbelen, halveert de afspeeltijd,"

#: 03.3-Stretching-Samples.md:119
msgid "Halving the playback rate doubles the playback time,"
msgstr "Halvering van de afspeelsnelheid, verdubbelt de afspeeltijd,"

#: 03.3-Stretching-Samples.md:120
msgid "Using a playback rate of one fourth quadruples the playback time,"
msgstr "Een kwart van de afspeelsnelheid, verviervoudigt de speeltijd,"

#: 03.3-Stretching-Samples.md:121
msgid "Using a playback rate of 1/10 makes playback last 10 times longer."
msgstr "1/10 van de afspeelsnelheid, maakt het afspelen 10 keer langer."

#: 03.3-Stretching-Samples.md:123
msgid "We can represent this with the formula:"
msgstr "Wij kunnen deze representeren met de formule:"

#: 03.3-Stretching-Samples.md:125
#, no-wrap
msgid "new_sample_duration = (1 / rate) * sample_duration "
msgstr "new_sample_duur = (1 / rate) * sample_duur "

#: 03.3-Stretching-Samples.md:129
msgid ""
"Changing the playback rate also affects the pitch of the sample. The "
"frequency or pitch of a waveform is determined by how fast it moves up and "
"down. Our brains somehow turn fast movement of speakers into high notes and "
"slow movement of speakers into low notes. This is why you can sometimes even "
"see a big bass speaker move as it pumps out super low bass - it's actually "
"moving a lot slower in and out than a speaker producing higher notes."
msgstr ""
"De afspeelsnelheid zal ook de toonhoogte van de sample wijzigen. De "
"frequentie of toonhoogte van een golfvorm wordt bepaald door hoe snel deze "
"op en neer beweegt. Onze hersenen vormen  de snelle beweging van "
"luidsprekers om tot hoge noten en de trage beweging tot lage noten. Daarom "
"kan je soms zelfs zien hoe uit een grote bas luidspreker de super lage tonen "
"worden gepompt, en in feite gaan deze veel trager dan een luidspreker die "
"hoge noten reproduceert."

#: 03.3-Stretching-Samples.md:137
msgid ""
"If you take a waveform and squash it it will move up and down more times per "
"second. This will make it sound higher pitched. It turns out that doubling "
"the amount of up and down movements (oscillations) doubles the frequency. "
"So, *playing your sample at double rate will double the frequency you hear "
"it*. Also, *halving the rate will halve the frequency*. Other rates will "
"affect the frequency accordingly."
msgstr ""
"Als je een golfvorm neemt van een geluid en deze over de lengte samendruk,t "
"zal deze per seconde vaker op en neer gaan. Dit zal het geluid hoger laten "
"klinken.Het blijkt dat een verdubbeling van het aantal op en neer bewegingen "
"(trillingen) de frequentie verdubbelt . Ook zal *bij het afspelen van je "
"sample aan dubbele rate, de frequentie verdubbelen die je hoort*. Dus ook "
"zal *een halvering van de rate waarde, de frequentie halveren*. Andere "
"waarden zullen de frequenties dan naargelang beïnvloeden."

#: 03.4-Enveloped-Samples.md:1
msgid "3.4 Enveloped Samples"
msgstr "3.4 Envelop op Samples"

#: 03.4-Enveloped-Samples.md:3
msgid "Enveloped Samples"
msgstr "Envelop op Samples"

#: 03.4-Enveloped-Samples.md:5
msgid ""
"It is also possible to modify the *duration* and *amplitude* of a sample "
"using an ADSR envelope. However, this works slightly differently to the ADSR "
"envelope available on synths. Sample envelopes only allow you to reduce the "
"amplitude and duration of a sample - and never to increase it. The sample "
"will stop when either the sample has finished playing or the envelope has "
"completed - whichever is first. So, if you use a very long `release:`, it "
"won't extend the duration of the sample."
msgstr ""
"Het is ook mogelijk om  de *duur* en *amplitude* te wijzigen van een samples "
"met behulp van een ADSR-envelop. Nochtans, werkt dit enigszins anders dan de "
"ADSR envelop voor synths. Sample enveloppen kunnen alleen de amplitude en de "
"duur van een sample verminderen  - en nooit om deze te verhogen. De sample "
"wordt gestopt wanneer de sample is afgespeeld of de envelop heeft voltooid - "
"welke van deze het eerst is. Dus, bij een erg lange release:`, het zal de "
"sample niet verlengen."

#: 03.4-Enveloped-Samples.md:13
msgid "Amen Envelopes"
msgstr "Amen Envelop"

#: 03.4-Enveloped-Samples.md:15
msgid "Let's return to our trusty friend the Amen Break:"
msgstr "Laten we terugkeren naar onze trouwe vriend de Amen Break:"

#: 03.4-Enveloped-Samples.md:21
msgid ""
"With no opts, we hear the full sample at full amplitude. If we want to fade "
"this in over 1 second we can use the `attack:` param:"
msgstr ""
"Zonder opties zullen we de volledige sample horen aan normale volle "
"amplitude. Als we deze met behulp van het volume in willen mixen over een "
"tijd van 1 seconde kunnen we de `attack:` parameter gebruiken:"

#: 03.4-Enveloped-Samples.md:24
#, no-wrap
msgid "sample :loop_amen, attack: 1"
msgstr "sample :loop_amen, attack: 1"

#: 03.4-Enveloped-Samples.md:28
msgid "For a shorter fade in, choose a shorter attack value:"
msgstr "Voor een kortere fade in, kies een kleinere waarde voor de attack:"

#: 03.4-Enveloped-Samples.md:30
#, no-wrap
msgid "sample :loop_amen, attack: 0.3"
msgstr "sample :loop_amen, attack: 0.3"

#: 03.4-Enveloped-Samples.md:34
msgid "Auto Sustain"
msgstr "Auto Sustain"

#: 03.4-Enveloped-Samples.md:36
msgid ""
"Where the ADSR envelope's behaviour differs from the standard synth envelope "
"is in the *sustain* value. In the standard synth envelope, the sustain "
"defaulted to 0 unless you set it manually. With samples, the sustain value "
"defaults to an *automagical* value - the time left to play the rest of the "
"sample. This is why we hear the full sample when we pass no defaults. If the "
"attack, decay, sustain and release values were all 0 we'd never hear a peep. "
"Sonic Pi therefore calculates how long the sample is, deducts any attack, "
"decay and release times and uses the result as your sustain time. If the "
"attack, decay and release values add up to more than the duration of the "
"sample, the sustain is simply set to 0."
msgstr ""
"Waar de ADSR envelop zeker van gedrag verschilt met de standaard synth-"
"envelop is in de *sustain* waarde. In de standaard synth envelop, is de "
"sustain waarde, standaard op 0 ingesteld, tenzij u deze handmatig instelt. "
"Met samples, is de sustain waarde, standaard  een *automagische* waarde - "
"namelijk de speelduur die de sample rest . Dit is de reden waarom we de "
"totale sample horen als we geen waarden instellen. Als de attack, decay, "
"sustain en release waarden allen 0 waren zouden we  niks horen . Sonic Pi "
"berekent dus hoe lang de sample is, trekt elke attack, decay en release "
"tijden af en wordt het resultaat, de sustain tijd. Als de som van de attack, "
"decay en release waarden meer dan de duur van de sample zijn, is de sustain "
"gewoon ingesteld op 0."

#: 03.4-Enveloped-Samples.md:48
msgid "Fade Outs"
msgstr "Fade Outs"

#: 03.4-Enveloped-Samples.md:50
msgid ""
"To explore this, let's consider our Amen break in more detail. If we ask "
"Sonic Pi how long the sample is:"
msgstr ""
"Om deze te ontdekken, laten we dan onze Amen break in meer detail bekijken. "
"Als wij Sonic Pi nu eens vragen hoe lang de sample is:"

#: 03.4-Enveloped-Samples.md:53
#, no-wrap
msgid "print sample_duration :loop_amen"
msgstr "print sample_duration :loop_amen"

#: 03.4-Enveloped-Samples.md:57
msgid ""
"It will print out `1.753310657596372` which is the length of the sample in "
"seconds. Let's just round that to `1.75` for convenience here. Now, if we "
"set the release to `0.75`, something surprising will happen:"
msgstr ""
"Het zal `1.753310657596372` uitprinten wat de de lengte is  van de sample in "
"seconden uitgedrukt. Laten we dit gewoon even afronden naar '1,75' voor het "
"gemak hier. Nu, als we de release naar '0,75' instellen zal er iets "
"verrassend gebeuren:"

#: 03.4-Enveloped-Samples.md:61
#, no-wrap
msgid "sample :loop_amen, release: 0.75"
msgstr "sample :loop_amen, release: 0.75"

#: 03.4-Enveloped-Samples.md:65
msgid ""
"It will play the first second of the sample at full amplitude before then "
"fading out over a period of 0.75 seconds. This is the *auto sustain* in "
"action. By default, the release always works from the end of the sample. If "
"our sample was 10.75 seconds long, it would play the first 10 seconds at "
"full amplitude before fading out over 0.75s."
msgstr ""
"Het zal de eerste seconde van de sample met volledige amplitude afspelen "
"voordat deze dan uit-fade over een periode van 0.75 seconden. Dit is de *"
"auto sustain* in actie. Standaard werkt de release altijd vanaf het einde "
"van de sample. Als onze sample 10.75 seconden lang was, zou het de eerste 10 "
"seconden spelen met volledige amplitude vooraleer deze met 0.75s uit te fade-"
"en ."

#: 03.4-Enveloped-Samples.md:71
msgid "Remember: by default, `release:` fades out at the end of a sample."
msgstr ""
"Dus onthoud: standaard geeft de release, aan het einde van de sample, een "
"fade-out ."

#: 03.4-Enveloped-Samples.md:73
msgid "Fade In and Out"
msgstr "Fade In en Uit"

#: 03.4-Enveloped-Samples.md:75
msgid ""
"We can use both `attack:` and `release:` together with the auto sustain "
"behaviour to fade both in and out over the duration of the sample:"
msgstr ""
"We kunnen `attack:` een `release:` samen met het gedrag van de auto sustain "
"gebruiken om in de duurtijd van de sample  in en uit te fade-en:"

#: 03.4-Enveloped-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, attack: 0.75, release: 0.75"
msgstr "sample :loop_amen, attack: 0.75, release: 0.75"

#: 03.4-Enveloped-Samples.md:82
msgid ""
"As the full duration of the sample is 1.75s and our attack and release "
"phases add up to 1.5s, the sustain is automatically set to 0.25s. This "
"allows us to easily fade the sample in and out."
msgstr ""
"Als de totale duurtijd van de sample 1.75s is en onze attack en release fase "
"opgeteld 1.5 is, wordt de sustain fase automatisch op 0.25 ingesteld. Dit "
"staat ons toe van makkelijk in en uit te fade-en."

#: 03.4-Enveloped-Samples.md:86
msgid "Explicit sustain"
msgstr "Expliciete sustain"

#: 03.4-Enveloped-Samples.md:88
msgid ""
"We can easily get back to our normal synth ADSR behaviour by manually "
"setting `sustain:` to a value such as 0:"
msgstr ""
"We kunnen makkelijk naar ons normale synth ADSR gedrag terugkeren door de "
"`sustain:` manueel naar een waarde te brengen zoals bv. 0:"

#: 03.4-Enveloped-Samples.md:91
#, no-wrap
msgid "sample :loop_amen, sustain: 0, release: 0.75"
msgstr "sample :loop_amen, sustain: 0, release: 0.75"

#: 03.4-Enveloped-Samples.md:95
msgid ""
"Now, our sample only plays for 0.75 seconds in total. With the default for "
"`attack:` and `decay:` at 0, the sample jumps straight to full amplitude, "
"sustains there for 0s then releases back down to 0 amplitude over the "
"release period - 0.75s."
msgstr ""
"Nu zal onze sample in totaal 0.75s spelen. Met de standaard waarden voor "
"`attack:` en`decay:` van 0, springt de sample recht naar volle amplitude, "
"zal 0s sustain-en maakt een neerwaardse release tot amplitude 0 over een "
"periode van 0.75s."

#: 03.4-Enveloped-Samples.md:100
msgid "Percussive cymbals"
msgstr "Percussieve cymbalen"

#: 03.4-Enveloped-Samples.md:102
msgid ""
"We can use this behaviour to good effect to turn longer sounding samples "
"into shorter, more percussive versions. Consider the sample `:"
"drum_cymbal_open`:"
msgstr ""
"We kunnen dit gedrag goed gebruiken om langer klinkende geluiden om te "
"zetten naar korte, meer percussieve geluiden. We overwegen dit even met de "
"sample `:drum_cymbal_open`:"

#: 03.4-Enveloped-Samples.md:106
#, no-wrap
msgid "sample :drum_cymbal_open"
msgstr "sample :drum_cymbal_open"

#: 03.4-Enveloped-Samples.md:110
msgid ""
"You can hear the cymbal sound ringing out over a period of time. However, we "
"can use our envelope to make it more percussive:"
msgstr ""
"Je hoort het cimbaal over een zekere periode uitzingen. We kunnen nu de "
"envelop gebruiken om deze meer percussief te maken:"

#: 03.4-Enveloped-Samples.md:113
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"

#: 03.4-Enveloped-Samples.md:117
msgid ""
"You can then emulate hitting the cymbal and then dampening it by increasing "
"the sustain period:"
msgstr ""
"Je kan het slaan op de cymbaal, en het dempen ervan veranderen, door de "
"sustain fase te vergroten:"

#: 03.4-Enveloped-Samples.md:120
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"

#: 03.4-Enveloped-Samples.md:124
msgid ""
"Now go and have fun putting envelopes over the samples. Try changing the "
"rate too for really interesting results."
msgstr ""
"Leef je uit door aan samples een envelop toe te voegen. Probeer ook de rate "
"te veranderen voor echt interessante resultaten."

#: 03.5-Partial-Samples.md:1
msgid "3.5 Partial Samples"
msgstr "3.5 gedeeltelijke Samples"

#: 03.5-Partial-Samples.md:3
msgid "Partial Samples"
msgstr "gedeeltelijke Samples"

#: 03.5-Partial-Samples.md:5
msgid ""
"This section will conclude our exploration of Sonic Pi's sample player. "
"Let's do a quick recap. So far we've looked at how we can trigger samples:"
msgstr ""
"Deze sectie zal onze verkenning afsluiten van Sonic Pi's sample player. "
"Laten we een snelle samenvatting maken. Tot nu toe hebben we gekeken hoe we "
"samples kunnen triggeren:"

#: 03.5-Partial-Samples.md:13
msgid ""
"We then looked at how we can change the rate of samples such as playing them "
"at half speed:"
msgstr ""
"Vervolgens hebben we gekeken hoe we de rate kunnen wijzigen naar bv. het "
"afspelen op halve snelheid:"

#: 03.5-Partial-Samples.md:20
msgid ""
"Next, we looked at how we could fade a sample in (let's do it at half speed):"
msgstr ""
"Verder hebben we gekeken hoe we deze sample konden in fade-en (we doen deze "
"op halve snelheid):"

#: 03.5-Partial-Samples.md:23
#, no-wrap
msgid "sample :loop_amen, rate: 0.5, attack: 1"
msgstr "sample :loop_amen, rate: 0.5, attack: 1"

#: 03.5-Partial-Samples.md:27
msgid ""
"We also looked at how we could use the start of a sample percussively by "
"giving `sustain:` an explicit value and setting both the attack and release "
"to be short values:"
msgstr ""
"We hebben ook gekeken hoe we de start van een sample meer percussief kunne "
"maken door aan de `sustain:` een expliciete waarde te geven en aan zowel de "
"attack als de release korte waarden te geven:"

#: 03.5-Partial-Samples.md:31
#, no-wrap
msgid "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"
msgstr "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"

#: 03.5-Partial-Samples.md:35
msgid ""
"However, wouldn't it be nice if we didn't have to always start at the "
"beginning of the sample? Wouldn't it also be nice if we didn't have to "
"always finish at the end of the sample?"
msgstr ""
"Zou het niet leuk zijn, als we deze niet altijd hoeven te laten starten "
"vanaf het begin van de sample? Zou het niet leuk zijn, als we deze niet "
"altijd hoeven te laten stoppen tot het einde van de sample?"

#: 03.5-Partial-Samples.md:39
msgid "Choosing a starting point"
msgstr "Startpunt kiezen"

#: 03.5-Partial-Samples.md:41
msgid ""
"It is possible to choose an arbitrary starting point in the sample as a "
"value between 0 and 1 where 0 is the start of the sample, 1 is the end and "
"0.5 is half way through the sample. Let's try playing only the last half of "
"the amen break:"
msgstr ""
"Het is mogelijk om een willekeurige startpunt in de sample te kiezen als een "
"waarde tussen 0 en 1, waarbij 0 is het begin van de sample 1 is het einde en "
"0,5 is halverwege sample. Laten we proberen om alleen de laatste helft van "
"de amen break te spelen:"

#: 03.5-Partial-Samples.md:46
#, no-wrap
msgid "sample :loop_amen, start: 0.5"
msgstr "sample :loop_amen, start: 0.5"

#: 03.5-Partial-Samples.md:50
msgid "How about the last quarter of the sample:"
msgstr "Of het laatste kwart van de sample:"

#: 03.5-Partial-Samples.md:52
#, no-wrap
msgid "sample :loop_amen, start: 0.75"
msgstr "sample :loop_amen, start: 0.75"

#: 03.5-Partial-Samples.md:56
msgid "Choosing a finish point"
msgstr "Eindpunt kiezen"

#: 03.5-Partial-Samples.md:58
msgid ""
"Similarly, it is possible to choose an arbitrary finish point in the sample "
"as a value between 0 and 1. Let's finish the amen break half way through:"
msgstr ""
"Ook is het mogelijk om een willekeurig eindpunt te bepalen in de sample met "
"een waarde tussen 0 en 1. Laat ons de Amen Break halverwege doen stoppen:"

#: 03.5-Partial-Samples.md:62 A.12-sample-slicing.md:62
#, no-wrap
msgid "sample :loop_amen, finish: 0.5"
msgstr "sample :loop_amen, finish: 0.5"

#: 03.5-Partial-Samples.md:66
msgid "Specifying start and finish"
msgstr "Specifieke begin- en eindpunten opgeven"

#: 03.5-Partial-Samples.md:68
msgid ""
"Of course, we can combine these two to play arbitrary segments of the audio "
"file. How about only a small section in the middle:"
msgstr ""
"Natuurlijk kunnen we deze alle twee gebruiken om elk willekeurig segment van "
"het audiobestand af te laten spelen. Hoe zit dat met een heel kleine sectie "
"ergens in het midden:"

#: 03.5-Partial-Samples.md:71
#, no-wrap
msgid "sample :loop_amen, start: 0.4, finish: 0.6"
msgstr "sample :loop_amen, start: 0.4, finish: 0.6"

#: 03.5-Partial-Samples.md:75
msgid "What happens if we choose a start position after the finish position?"
msgstr "Wat gebeurd er als we een startpunt achter het eind punt kiezen?"

#: 03.5-Partial-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, start: 0.6, finish: 0.4"
msgstr "sample :loop_amen, start: 0.6, finish: 0.4"

#: 03.5-Partial-Samples.md:82
msgid "Cool! It plays it backwards!"
msgstr "Cool! Het speelt achterstevoren!"

#: 03.5-Partial-Samples.md:84
msgid "Combining with rate"
msgstr "Combineren met rate"

#: 03.5-Partial-Samples.md:86
msgid ""
"We can combine this new ability to play arbitrary segments of audio with our "
"friend `rate:`. For example, we can play a very small section of the middle "
"of the amen break very slowly:"
msgstr ""
"We kunnen deze nieuwe mogelijkheid combineren om een willekeurige selectie "
"in ons audiofragment met onze oude vriend `rate:`. We kunnen bijvoorbeeld "
"een heel klein stukje in het midden van onze amen break sample traag laten "
"afspelen:"

#: 03.5-Partial-Samples.md:90
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"
msgstr "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"

#: 03.5-Partial-Samples.md:94
msgid "Combining with envelopes"
msgstr "Combineren met de envelop"

#: 03.5-Partial-Samples.md:96
msgid ""
"Finally, we can combine all of this with our ADSR envelopes to produce "
"interesting results:"
msgstr ""
"Tot slot kunnen we dit alles combineren met onze ADSR envelop om tot "
"interessante resultaten te komen:"

#: 03.5-Partial-Samples.md:99
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: 1"
msgstr ""
"sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release:"
" 1"

#: 03.5-Partial-Samples.md:103
msgid "Now go and have a play mashing up samples with all of this fun stuff..."
msgstr ""
"Experimenteer er nu maar even op los en maak leuke mash-ups van samples met "
"deze toffe nieuwigheden..."

#: 03.6-External-Samples.md:1
msgid "3.6 External Samples"
msgstr "3.6 Externe Samples"

#: 03.6-External-Samples.md:3
msgid "External Samples"
msgstr "Externe Sample"

#: 03.6-External-Samples.md:5
msgid ""
"Whilst the built-in samples can get you up and started quickly, you might "
"wish to experiment with other recorded sounds in your music. Sonic Pi "
"totally supports this. First though, let's have a quick discussion on the "
"portability of your piece."
msgstr ""
"Terwijl de ingebouwde samples je direct lanceren om mee aan de slag te laten "
"gaan, wil je misschien experimenteren met ander vooraf opgenomen materiaal "
"om jouw muziek mee te maken. Sonic Pi ondersteund dit ook. Vooraleerst, gaan "
"we eerst even snel iets anders bespreken nl. de portabiliteit van jouw "
"muziekstuk."

#: 03.6-External-Samples.md:10
msgid "Portability"
msgstr "Portabiliteit"

#: 03.6-External-Samples.md:12
msgid ""
"When you compose your piece purely with built-in synths and samples, the "
"code is all you need to faithfully reproduce your music. Think about that "
"for a moment - that's amazing! A simple piece of text you can email around "
"or stick in a [Gist](https://gist.github.com) represents everything you need "
"to reproduce your sounds. That makes it *really easy to share* with your "
"friends as they just need to get hold of the code."
msgstr ""
"Wanneer je je muziekstuk louter met de ingebouwde synth's en samples "
"componeert, is de code het enige wat je nodig hebt om een getrouwe weergave "
"van jou muziek te horen. Fantastisch toch,als je hier even over nadenkt! Een "
"simpel stukje tekst dat je rond kan e-mailen  of in een "
"[Gist](https://gist.github.com) kan steken, vertegenwoordigd alles wat je "
"nodig hebt om jouw klanken te laten horen. Dit maakt het *echt makkelijk om "
"te delen* met jouw vrienden, daar zij alleen over jouw stukje code moeten "
"beschikken."

#: 03.6-External-Samples.md:19
msgid ""
"However, if you start using your own pre-recorded samples, you lose this "
"portability. This is because to reproduce your music other people not only "
"need your code, they need your samples too. This limits the ability for "
"others to manipulate, mash-up and experiment with your work. Of course this "
"shouldn't stop you from using your own samples, it's just something to "
"consider."
msgstr ""
"Als je echter met je eigen voor-opgenomen samples begint te werken verlies "
"je deze portabiliteit. Dit komt  omdat je nu  niet alleen de code nodig "
"hebt, maar ook de samples om je muziek getrouw af te spelen. Dit beperkt  de "
"mogelijkheid voor anderen om met jouw werk te gaan experimenteren, te "
"manipuleren of een mash up van te  maken. Natuurlijk mag dit jou niet "
"tegenhouden om je eigen samples te gaan gebruiken, gewoon om even bij stil "
"te staan."

#: 03.6-External-Samples.md:26
msgid "Local Samples"
msgstr "Lokale Samples"

#: 03.6-External-Samples.md:28
msgid ""
"So how do you play any arbitrary WAV, AIFF or FLAC file on your computer? "
"All you need to do is pass the path of that file to `sample`:"
msgstr ""
"Dus hoe speel je elke willekeurige WAV-, AIFF- of FLAC-bestand op uw "
"computer? Het enige wat je hoeft te doen is het pad opgeven van het bestand "
"naar `sample`:"

#: 03.6-External-Samples.md:31
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""

#: 03.6-External-Samples.md:38
msgid ""
"Sonic Pi will automatically load and play the sample. You can also pass all "
"the standard params you're used to passing `sample`:"
msgstr ""
"Sonic Pi zal deze samples automatisch laden en afspelen. Je kan ook alle "
"standaard parameters toewijzen aan deze doorgegeven `sample`:"

#: 03.6-External-Samples.md:41
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"

#: 03.7-Sample-Packs.md:1
msgid "3.7 Sample Packs"
msgstr "3.7 Sample Packs"

#: 03.7-Sample-Packs.md:3
msgid "Sample Packs"
msgstr "Sample Packs"

#: 03.7-Sample-Packs.md:5
msgid ""
"**Note: this section of the tutorial covers the advanced topic of working "
"with large directories of your own samples. This will be the case if you've "
"downloaded or bought your own sample packs and wish to use them within Sonic "
"Pi.**"
msgstr ""
"**Opmerking dit gedeelte van de handleiding behandeld een meer geavanceerd "
"thema, nl. over het werken met grote bestanden van eigen samples. Dit zal "
"bijvoorbeeld het geval zijn als je sample packs kocht of hebt gedownload en "
"deze in Sonic Pi wenst te gebruiken.**"

#: 03.7-Sample-Packs.md:10
msgid ""
"**Feel free to skip this if you're happy working with the built-in samples.**"
msgstr ""
"**U mag dit gedeelte gerust overslaan wanneer je tevreden bent met de "
"ingebouwde samples.**"

#: 03.7-Sample-Packs.md:13
msgid ""
"When working with large folders of external samples it can be cumbersome to "
"have to type the whole path every time to trigger an individual sample."
msgstr ""
"Wanneer je werkt met grote mappen van externe samples kan het erg onhandig "
"zijn om telkens het hele pad te typen die jouw eigen samples triggeren."

#: 03.7-Sample-Packs.md:17
msgid "For example, say you have the following folder on your machine:"
msgstr "Bijvoorbeeld, stel dat je de volgende map hebt op je computer:"

#: 03.7-Sample-Packs.md:19
#, no-wrap
msgid "/path/to/my/samples/"
msgstr "/path/to/my/samples/"

#: 03.7-Sample-Packs.md:23
msgid "When we look inside that folder we find the following samples:"
msgstr "Als we in die map kijken vinden we de volgende voorbeelden:"

#: 03.7-Sample-Packs.md:25 03.7-Sample-Packs.md:86
msgid "`100_A#_melody1.wav`"
msgstr "`100_A#_melody1.wav`"

#: 03.7-Sample-Packs.md:26 03.7-Sample-Packs.md:87
msgid "`100_A#_melody2.wav`"
msgstr "`100_A#_melody2.wav`"

#: 03.7-Sample-Packs.md:27 03.7-Sample-Packs.md:88
msgid "`100_A#_melody3.wav`"
msgstr "`100_A#_melody3.wav`"

#: 03.7-Sample-Packs.md:28 03.7-Sample-Packs.md:89
msgid "`120_A#_melody4.wav`"
msgstr "`120_A#_melody4.wav`"

#: 03.7-Sample-Packs.md:29 03.7-Sample-Packs.md:90
msgid "`120_Bb_guit1.wav`"
msgstr "`120_Bb_guit1.wav`"

#: 03.7-Sample-Packs.md:30 03.7-Sample-Packs.md:91
msgid "`120_Bb_piano1.wav`"
msgstr "`120_Bb_piano1.wav`"

#: 03.7-Sample-Packs.md:32
msgid "Typically in order to play the piano sample we can use the full path:"
msgstr ""
"Om de piano sample te spelen gebruiken we dan normaal gezien het volledige "
"pad:"

#: 03.7-Sample-Packs.md:34
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_piano1.wav\""
msgstr "sample \"/pad/naar/mijn/samples/120_Bb_piano1.wav\""

#: 03.7-Sample-Packs.md:38
msgid "If we want to then play the guitar sample we can use its full path too:"
msgstr ""
"Om vervolgens de gitaar sample te willen gebruiken we ook het volledige pad:"

#: 03.7-Sample-Packs.md:40
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_guit.wav\""
msgstr "sample \"/pad/naar/mijn/samples/120_Bb_guit.wav\""

#: 03.7-Sample-Packs.md:44
msgid ""
"However, both of these calls to sample requires us to *know* the names of "
"the samples within our directory. What if we just want to listen to each "
"sample in turn quickly?"
msgstr ""
"Echter, om beide samples op te roepen zijn we genoodzaakt te weten welke de "
"naam is van deze samples in onze map. Wat als we  snel door onze samples "
"willen gaan om deze even te beluisteren?"

#: 03.7-Sample-Packs.md:48
msgid "Indexing Sample Packs"
msgstr "Sample Packs Indexeren"

#: 03.7-Sample-Packs.md:50
msgid ""
"If we want to play the first sample in a directory we just need to pass the "
"directory's name to `sample` and the index `0` as follows:"
msgstr ""
"Als we de eerste sample binnen een map willen spelen moeten we alleen de "
"naam van de map doorgeven aan `sample` en de index `0` als volgt:"

#: 03.7-Sample-Packs.md:53
#, no-wrap
msgid "sample \"/path/to/my/samples/\", 0"
msgstr "sample \"/pad/naar/mijn/samples/\", 0"

#: 03.7-Sample-Packs.md:57
msgid "We can even make a shortcut to our directory path using a variable:"
msgstr ""
"We kunnen zelfs een binnenweg maken naar ons pad van de map met behulp van "
"een variabele:"

#: 03.7-Sample-Packs.md:59
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:64
msgid ""
"Now, if we want to play the second sample in our directory, we just need to "
"add 1 to our index:"
msgstr ""
"Als we dan de tweede sample in onze folder willen afspelen, moeten we gewoon "
"1 aan onze index toevoegen:"

#: 03.7-Sample-Packs.md:67
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 1"
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, 1"

#: 03.7-Sample-Packs.md:72
msgid ""
"Notice that we no longer need to know the names of the samples in the "
"directory - we just need to know the directory itself (or have a shortcut to "
"it). If we ask for an index which is larger than the number of samples, it "
"simply wraps round just like Rings. Therefore, whatever number we use we're "
"guaranteed to get one of the samples in that directory."
msgstr ""
"Merk op dat we hierbij niet meer de naam van de sample in de map hoeven op "
"te geven,  alleen de map zelf (of de snelkoppeling). Als we nu een "
"indexnummer zouden gebruiken dat hoger is dan het aantal samples, gaan de "
"eerste samples in de map terug aan de beurt komen, als in een kring werpt "
"deze er zich rond. Welk nummer we ook gaan gebruiken, we komen gegarandeerd "
"één van onze samples tegen in deze map."

#: 03.7-Sample-Packs.md:79
msgid "Filtering Sample Packs"
msgstr "Sample Packs Filteren"

#: 03.7-Sample-Packs.md:81
msgid ""
"Usually indexing is enough, but sometimes we need more power to sort and "
"organise our samples. Luckily many sample packs add useful information in "
"the filenames. Let's take another look at the sample file names in our "
"directory:"
msgstr ""
"Meestal is indexeren genoeg, maar soms moeten we wat meer \"power\" hebben "
"om onze samples te sorteren en te organiseren. Gelukkig voegen veel sample "
"packs nuttige informatie in de bestandsnamen toe. Laten we nog eens kijken "
"naar de sample-bestandsnamen in onze folder:"

#: 03.7-Sample-Packs.md:93
msgid ""
"Notice that in these filenames we have quite a bit of information. Firstly, "
"we have the BPM of the sample (beats per minute) at the start. So, the piano "
"sample is at 120 BPM and our first three melodies are at 100 BPM. Also, our "
"sample names contain the key. So the guitar sample is in Bb and the melodies "
"are in A#. This information is very useful for mixing in these samples with "
"our other code. For example, we know we can only play the piano sample with "
"code that's in 120 BPM and in the key of Bb."
msgstr ""
"Merk op dat we in deze bestandsnamen vrij veel informatie hebben. Ten eerste "
"hebben we de BPM van de sample (beats per minute) aan het begin. Dus, de "
"piano sample bedraagt 120 BPM en onze eerste drie melodieën hebben 100 BPM. "
"Ook bevatten onze samples,de toonhoogte (key). Dus de sample van de gitaar "
"is in Bb en de melodieën zijn in A #. Deze informatie is zeer nuttig bij het "
"mengen van deze samples, samen met onze andere code. Bijvoorbeeld, nu weten "
"we dat de piano sample enkel in een code past die 120 BPM heeft met "
"toonhoogte van Bb."

#: 03.7-Sample-Packs.md:102
msgid ""
"It turns out that we can use this particular naming convention of our sample "
"sets in the code to help us filter out the ones we want. For example, if "
"we're working at 120 BPM, we can filter down to all the samples that contain "
"the string `\"120\"` with the following:"
msgstr ""
"Het komt wel goed uit dat we deze bijzondere naamgeving van onze sample sets "
"ook in de code kunnen gebruiken om onze samples uit te filteren naar degene "
"die we willen. Bijvoorbeeld, als we op 120 BPM werken, kunnen we als volgt, "
"alle samples uitfilteren die de tekenreeks `\"120\"` bevatten:"

#: 03.7-Sample-Packs.md:107
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\""
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, \"120\""

#: 03.7-Sample-Packs.md:112
msgid ""
"This will play us the first match. If we want the second match we just need "
"to use the index:"
msgstr ""
"Deze zal ons een eerste filtering opleveren. Als we verder willen gaan "
"zoeken naar een sample die goed past, kunnen we de index gebruiken:"

#: 03.7-Sample-Packs.md:115
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", 1"
msgstr ""
"samps = “/pad/naar/mijn/samples/\"\n"
"sample samps, \"120\", 1"

#: 03.7-Sample-Packs.md:120
msgid ""
"We can even use multiple filters at the same time. For example, if we want a "
"sample whose filename contains both the substrings \"120\" and \"A#\" we can "
"find it easily with the following code:"
msgstr ""
"We kunnen zelfs meerdere filters tegelijk gebruiken. Bijvoorbeeld, als we "
"willen dat een sample waarvan de bestandsnaam zowel de subtekenreeksen \""
"120\" en \"A#\" bevat, kunnen we die met de volgende code gemakkelijk "
"terugvinden:"

#: 03.7-Sample-Packs.md:124
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"A#\""
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, \"120\", \"A#\""

#: 03.7-Sample-Packs.md:129
msgid ""
"Finally, we're still free to add our usual opts to the call to `sample`:"
msgstr ""
"Voorts zijn we nog altijd vrij om onze gebruikelijke opties voor de weergave "
"van onze `sample` toe te voegen:"

#: 03.7-Sample-Packs.md:131
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"

#: 03.7-Sample-Packs.md:136
msgid "Sources"
msgstr "Bronnen"

#: 03.7-Sample-Packs.md:138
msgid ""
"The sample filter pre-arg system understands two types of information: "
"sources and filters. Sources are information used to create the list of "
"potential candidates. A source can take two forms:"
msgstr ""
"Het prearg(-umenten) van het sample filtersysteem herkent twee informatie "
"types: bronnen en filters. Bronnen worden gebruikt om een lijst van "
"potentiële te maken. Een bron kan twee vormen aannemen: Een bron kan twee "
"vormen aannemen:"

#: 03.7-Sample-Packs.md:142
msgid ""
"\"/path/to/samples\" - a string representing a valid path to a directory"
msgstr ""
"\"/pad/naar/samples\" - een tekenreeks dat een geldig pad naar een map "
"weergeeft"

#: 03.7-Sample-Packs.md:143
msgid ""
"\"/path/to/samples/foo.wav\" - a string representing a valid path to a sample"
msgstr ""
"\"/pad/naar/samples/foo.wav\" - en tekenreeks die een geldig pad naar een "
"sample weergeeft"

#: 03.7-Sample-Packs.md:145
msgid ""
"The `sample` fn will first gather all sources and use them to create a large "
"list of candidates. This list is constructed by first adding all valid paths "
"and then by adding all the valid `.flac`, `.aif`, `.aiff`, `.wav`, `.wave` "
"files contained within the directories."
msgstr ""
"De `sample` functie zal eerst alle bronnen verzamelen en deze gebruiken om "
"een lange lijst van kandidaten te maken.Deze lijst wordt gevormd door eerst "
"alle geldige paden toe te voegen en daarna alle geldige  `.flac`, `.aif`, "
"`.aiff`, `.wav`, `.wave` bestanden die deze mappen bevatten."

#: 03.7-Sample-Packs.md:150
msgid "For example, take a look at the following code:"
msgstr "Kijk bijvoorbeeld even naar deze code:"

#: 03.7-Sample-Packs.md:152
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"samps2 = \"/path/to/my/samples2/\"\n"
"path = \"/path/to/my/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"samps2 = \"/pad/naar/mijn/samples2/\"\n"
"path = \"/pad/naar/mijn/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"

#: 03.7-Sample-Packs.md:160
msgid ""
"Here, we're combining the contents of the samples within two directories and "
"adding a specific sample. If `\"/path/to/my/samples/\"` contained 3 samples "
"and `\"/path/to/my/samples2/\"` contained 12, we'd have 16 potential samples "
"to index and filter (3 + 12 + 1)."
msgstr ""
"Hier combineren we de inhoud van de samples binnen twee mappen en het "
"toevoegen van een specifieke sample. Als `\"/pad/naar/mijn/samples/\"` 3 "
"samples bevat en  `\"/pad/naar/mijn/samples/\"` bevat er 12, zouden we 16 "
"potentiële samples om te indexeren en te filteren hebben (3 + 12 + 1)."

#: 03.7-Sample-Packs.md:165
msgid ""
"By default, only the sample files within a directory are gathered into the "
"candidate list. Sometimes you might have a number of nested folders of "
"samples you wish to search and filter within. You can therefore do a "
"recursive search for all samples within all subfolders of a particular "
"folder by adding `**` to the end of the path:"
msgstr ""
"Standaard worden alleen de voorbeeldbestanden binnen een map in de lijst met "
"kandidaten verzameld. Soms heb je misschien een aantal geneste mappen van "
"samples die je lokaal wil gaan zoeken en filteren. Je kan daarom een "
"recursieve zoekopdracht voor alle samples in alle sub-mappen van een "
"bepaalde map doen door toevoeging van `**` aan het einde van het pad:"

#: 03.7-Sample-Packs.md:171
#, no-wrap
msgid ""
"samps = \"/path/to/nested/samples/**\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/pad/naar/geneste/samples/**\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:176
msgid ""
"Take care though as searching through a very large set of folders may take a "
"long time. However, the contents of all folder sources are cached, so the "
"delay will only happen the first time."
msgstr ""
"Hou er wel rekening mee dat als je door een groot aantal folders gaat "
"zoeken,dit veel tijd in beslag kan nemen. Maar de inhoud van alle "
"folderbronnen worden ge-cached, dus de vertraging zal maar één keer optreden."

#: 03.7-Sample-Packs.md:180
msgid ""
"Finally, note that the sources *must go first*. If no source is given, then "
"the set of built-in samples will be selected as the default list of "
"candidates to work with."
msgstr ""
"Ten slotte, merk op dat de bronnen *eerst moeten gaan*. Als er geen bron is "
"opgegeven, zal de set van ingebouwde samples geselecteerd worden als de "
"standaardlijst van kandidaten om mee te werken."

#: 03.7-Sample-Packs.md:184
msgid "Filters"
msgstr "Filters"

#: 03.7-Sample-Packs.md:186
msgid ""
"Once you have a list of candidates you may use the following filtering types "
"to further reduce the selection:"
msgstr ""
"Als u eenmaal een lijst van kandidaten hebt mag u het volgende filter typen "
"om de selectie verder te reduceren:"

#: 03.7-Sample-Packs.md:189
msgid ""
"`\"foo\"` Strings will filter on substring occurrence within file name "
"(minus directory path and extension)."
msgstr ""
"`\"foo\"` Tekenreeksen zullen filteren op sub-tekenreeksen gebeurtenissen "
"binnen de bestandsnaam (min het pad van de map en de extensie)."

#: 03.7-Sample-Packs.md:190
msgid ""
"`/fo[oO]/` Regular Expressions will filter on pattern matching of file name "
"(minus directory path and extension)."
msgstr ""
"`/fo[oO]/` Reguliere expressies zullen filteren op patroonherkenning van "
"bestandsnamen (min het pad van de map en de extensie)."

#: 03.7-Sample-Packs.md:191
msgid ""
"`:foo` - Keywords will filter candidates on whether the keyword is a direct "
"match of the filename (minus directory path and extension)."
msgstr ""
"`:foo` -trefwoorden zullen naar kandidaten filteren op basis van hun "
"gelijkenis met de bestandsnaam (min het pad van de map en extentie)."

#: 03.7-Sample-Packs.md:192
msgid ""
"`lambda{|a| ... }` - Procs with one argument will be treated as a candidate "
"filter or generator function. It will be passed the list of current "
"candidates and must return a new list of candidates (a list of valid paths "
"to sample files)."
msgstr ""
"`lambda{|a| ... }` - Procedures met één argument zullen als een kandidaat-"
"filter gezien worden of als een genereer-functie. \n"
"Het zal worden doorgegeven aan de lijst van de huidige kandidaten en moet "
"een nieuwe lijst van kandidaten oproepen ( een lijst met geldige paden naar "
"sample bestanden)."

#: 03.7-Sample-Packs.md:193
msgid ""
"`1` - Numbers will select the candidate with that index (wrapping round like "
"a ring if necessary)."
msgstr ""
"`1` - Nummers zullen de kandidaat met dit index selecteren (en als een kring "
"rond gaan als dit nodig is)."

#: 03.7-Sample-Packs.md:195
msgid ""
"For example, we can filter over all the samples in a directory containing "
"the string `\"foo\"` and play the first matching sample at half speed:"
msgstr ""
"We kunnen bijvoorbeeld alle samples filteren in een map die bevat de "
"tekenreeks `\"foo\"` bevat en de eerste overeenkomende sample spelen op "
"halve snelheid:"

#: 03.7-Sample-Packs.md:199
#, no-wrap
msgid "sample \"/path/to/samples\", \"foo\", rate: 0.5"
msgstr "sample \"/pad/naar/samples\", \"foo\", rate: 0.5"

#: 03.7-Sample-Packs.md:203
msgid ""
"See the help for `sample` for many detailed usage examples. Note that the "
"ordering of the filters is honoured."
msgstr ""
"Zie hulp voor `sample` voor vele gedetailleerde gebruiksvoorbeelden. Merk op "
"dat de volgorde van de filters geëerd wordt."

#: 03.7-Sample-Packs.md:206
msgid "Composites"
msgstr "Mengsels"

#: 03.7-Sample-Packs.md:208
msgid ""
"Finally, you may use lists wherever you may place a source or filter. The "
"list will be automatically flattened and the contents will be treated as "
"regular sources and filters. Therefore the following calls to `sample` are "
"semantically equivalent:"
msgstr ""
"En tot slot, je mag lijsten gebruiken waar ook je een bron of filter kan "
"plaatsen. De lijst zal automatisch afgevlakt worden en hun inhoud zal als "
"reguliere bronnen en filters behandeld worden. Daarom zijn de volgende "
"aanroepen naar `sample`, semantisch equivalent:"

#: 03.7-Sample-Packs.md:213
#, no-wrap
msgid ""
"sample \"/path/to/dir\", \"100\", \"C#\"\n"
"sample [\"/path/to/dir\", \"100\", \"C#\"]\n"
"sample \"/path/to/dir\", [\"100\", \"C#\"]\n"
"sample [\"/path/to/dir\", [\"100\", [\"C#\"]]]"
msgstr ""
"sample \"/pad/naar/map\", \"100\", \"C#\"\n"
"sample [\"/pad/naar/map\", \"100\", \"C#\"]\n"
"sample \"/pad/naar/map\", [\"100\", \"C#\"]\n"
"sample [\"/pad/naar/map\", [\"100\", [\"C#\"]]]"

#: 03.7-Sample-Packs.md:220
msgid "Wrapping Up"
msgstr "Rond Wikkelen"

#: 03.7-Sample-Packs.md:222
msgid ""
"This was an advanced section for people that need real power to manipulate "
"and use sample packs. If most of this section didn't make too much sense, "
"don't worry. It's likely you don't need any of this functionality just yet. "
"However, you'll know when you do need it and you can come back and re-read "
"this when you start working with large directories of samples."
msgstr ""
"Dit was een geavanceerd gedeelte voor mensen die veel kracht om sample packs "
"te manipuleren en gebruiken nodig hebben. Moest het meeste van dit deel "
"vraagtekens oproepen, geen nood. Waarschijnlijk hebt u dan deze "
"functionaliteit nu nog niet echt nodig. Je zal wel merken wanneer je er aan "
"toe bent om dan terug te keren naar dit gedeelte om met grote sample "
"bestanden te gaan werken."

#: 04-Randomisation.md:1
msgid "4 Randomisation"
msgstr "4 Randomiseren"

#: 04-Randomisation.md:3
msgid "Randomisation"
msgstr "Randomiseren"

#: 04-Randomisation.md:5
msgid ""
"A great way to add some interest into your music is using some random "
"numbers. Sonic Pi has some great functionality for adding randomness to your "
"music, but before we start we need to learn a shocking truth: in Sonic Pi "
"*random is not truly random*. What on earth does this mean? Well, let's see."
msgstr ""
"Een geweldige manier om jouw muziek interessant te maken is het gebruik van "
"willekeurige getallen. Sonic Pi heeft een goede functionaliteit om "
"willekeurigheid in jouw muziek toe te voegen, maar eerst moeten we naakte "
"waarheid onder ogen zien: in Sonic Pi is *random geen echte random*. Wat "
"heeft dit nu weer te betekenen? Laat ons eens kijken."

#: 04-Randomisation.md:11
msgid "Repeatability"
msgstr "Herhaalbaarheid"

#: 04-Randomisation.md:13
msgid ""
"A really useful random function is `rrand` which will give you a random "
"value between two numbers - a *min* and a *max*. (`rrand` is short for "
"ranged random). Let's try playing a random note:"
msgstr ""
"Een heel nuttige willekeurige functie is 'rrand', welke je een willekeurige "
"waarde tussen twee nummers geeft - een *min* en *max*. ('rrand' is kort voor "
"ranged random (willekeurigen binnen een bepaald bereik)). Laten we proberen "
"een willekeurige opmerking te spelen:"

#: 04-Randomisation.md:17
#, no-wrap
msgid "play rrand(50, 95)"
msgstr "play rrand(50, 95)"

#: 04-Randomisation.md:21
msgid ""
"Ooh, it played a random note. It played note `83.7527`. A nice random note "
"between 50 and 95. Woah, wait, did I just predict the exact random note you "
"got too? Something fishy is going on here. Try running the code again. What? "
"It chose `83.7527` again? That can't be random!"
msgstr ""
"Ooh het speelt een willekeurige noot. Het speelde de noot `83.7527`. Een "
"mooie willekeurige noot tussen 50 en 95. Hu, heb ik nu net de willekeurige "
"noot die jij ook had exact voorspeld? Hier is iets verdacht gaande. Probeer "
"de code nu nog eens opnieuw uit te voeren. Wat?? Het koos `83.7527` opnieuw? "
"Niet echt random dus!"

#: 04-Randomisation.md:26
msgid ""
"The answer is that it is not truly random, it's pseudo-random. Sonic Pi will "
"give you random-like numbers in a repeatable manner. This is very useful for "
"ensuring that the music you create on your machine sounds identical on "
"everybody else's machine - even if you use some randomness in your "
"composition."
msgstr ""
"Het antwoord is, dat deze niet echt random is, maar pseudo-random. Sonic Pi "
"zal jou random-achtige cijfers geven op een repetitieve manier. Dit is heel "
"nuttig om ervoor te zorgen dat jouw muziek,gemaakt op jou toestel, hetzelfde "
"klinkt op iemand anders toestel, ook al heb je de functie van randomiseren "
"gebruikt in je compositie."

#: 04-Randomisation.md:32
msgid ""
"Of course, in a given piece of music, if it 'randomly' chose `83.7527` every "
"time, then it wouldn't be very interesting. However, it doesn't. Try the "
"following:"
msgstr ""
"Natuurlijk, bij een zeker stukje muziek, moest het elke keer 'random' "
"`83.7527` kiezen, dan zou het niet interessant meer zijn. Maar dat doet het "
"niet. Probeer het volgende:"

#: 04-Randomisation.md:36
#, no-wrap
msgid ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "
msgstr ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "

#: 04-Randomisation.md:43
msgid ""
"Yes! It finally sounds random. Within a given *run* subsequent calls to "
"random functions will return random values. However, the next run will "
"produce exactly the same sequence of random values and sound exactly the "
"same. It's as if all Sonic Pi code went back in time to exactly the same "
"point every time the Run button was pressed. It's the Groundhog Day of music "
"synthesis!"
msgstr ""
"Ja, Eindelijk klinkt het random. Binnen een gegeven doorloop gaan de "
"volgende opvragingen naar random functies randum waarden weergeven. Bij de "
"daar opvolgende doorloop gaan zij echter exact dezelfde sequentie van deze "
"random waarden spelen en dus net hetzelfde klinken. Alsof Sonic Pi terug in "
"de tijd ging naar exact hetselfde punt elke keer de afspeelknop werd "
"ingedrukt. De \"Groundhog Day\" in de wereld van muziek synthese!"

#: 04-Randomisation.md:50
msgid "Haunted Bells"
msgstr "\"Haunted Bells\""

#: 04-Randomisation.md:52
msgid ""
"A lovely illustration of randomisation in action is the haunted bells "
"example which loops the `:perc_bell` sample with a random rate and sleep "
"time between bell sounds:"
msgstr ""
"Een mooie illustratie van randomiseren in actie is het voorbeeld \"haunted "
"bell's\" die de `:perc_bell`' sample laat \"loop-en\" met een willekeurige "
"rate en sleep tijd tussen de klokkengeluiden:"

#: 04-Randomisation.md:56
#, no-wrap
msgid ""
"loop do\n"
"  sample :perc_bell, rate: (rrand 0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"
msgstr ""
"loop do\n"
"  sample :perc_bell, rate: (rrand 0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"

#: 04-Randomisation.md:63
msgid "Random cutoff"
msgstr "Random cutoff"

#: 04-Randomisation.md:65
msgid ""
"Another fun example of randomisation is to modify the cutoff of a synth "
"randomly. A great synth to try this out on is the `:tb303` emulator:"
msgstr ""
"Een ander leuk voorbeeld van randomiseren is het willekeurig wijzigen van de "
"cutoff van een synth. Een geweldige synth om dit op uit te proberen is de ': "
"tb303' emulator:"

#: 04-Randomisation.md:69
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"

#: 04-Randomisation.md:78
msgid "Random seeds"
msgstr "Random \"seeds\""

#: 04-Randomisation.md:80
msgid ""
"So, what if you don't like this particular sequence of random numbers Sonic "
"Pi provides? Well it's totally possible to choose a different starting point "
"via `use_random_seed`. The default seed happens to be 0, so choose a "
"different seed for a different random experience!"
msgstr ""
"Dus, wat als deze bijzondere reeks willekeurige getallen die  Sonic Pi "
"biedt  je niet bevalt ? Nou is het volledig mogelijk om een ander "
"uitgangspunt  te kiezen via 'use_random_seed'. De standaard seed instelling "
"is 0, kies dus een andere seed voor een andere  ervaring in randomisering!"

#: 04-Randomisation.md:85
msgid "Consider the following:"
msgstr "Houd rekening met het volgende:"

#: 04-Randomisation.md:87
#, no-wrap
msgid ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"

#: 04-Randomisation.md:94
msgid ""
"Every time you run this code, you'll hear the same sequence of 5 notes. To "
"get a different sequence simply change the seed:"
msgstr ""
"Telkens wanneer u deze code uitvoert, zult u dezelfde sequentie van 5 noten "
"horen. Voor een andere volgorde verander gewoon de seed:"

#: 04-Randomisation.md:97
#, no-wrap
msgid ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"

#: 04-Randomisation.md:105
msgid ""
"This will produce a different sequence of 5 notes. By changing the seed and "
"listening to the results you can find something that you like - and when you "
"share it with others, they will hear exactly what you heard too."
msgstr ""
"Dit zal een andere sequentie van 5 noten produceren. Door het veranderen van "
"de seed en door het beluisteren van de resultaten vindt u  wel iets dat u "
"goed vind - en wanneer u deze met anderen deelt, horen zij precies wat u ook "
"hebt gehoord."

#: 04-Randomisation.md:110
msgid "Let's have a look at some other useful random functions."
msgstr "Laten we eens kijken naar enkele andere nuttige randomisering functies."

#: 04-Randomisation.md:113
msgid "choose"
msgstr "choose"

#: 04-Randomisation.md:115
msgid ""
"A very common thing to do is to choose an item randomly from a list of known "
"items. For example, I may want to play one note from the following: 60, 65 "
"or 72. I can achieve this with `choose` which lets me choose an item from a "
"list. First, I need to put my numbers in a list which is done by wrapping "
"them in square brackets and separating them with commas: `[60, 65, 72]`. "
"Next I just need to pass them to `choose`:"
msgstr ""
"Een zeer gebruikelijk actie zou zijn, random te kiezen uit een lijst van "
"gekende items. Bijvoorbeeld, ik zou één van de volgende noten willen spelen: "
"60, 65 of 72. Ik kan dit bewerkstelligen met `choose` die mij een item uit "
"een lijst laat kiezen. Eerst moet ik mijn getallen in een lijst zetten, "
"hetgeen ik kan doen door deze in rechthoekige haakjes te plaatsen en door "
"middel van komma's te scheiden: : `[60, 65, 72]. Vervolgens moet ik deze "
"doorgeven aan  `choose`:"

#: 04-Randomisation.md:122
#, no-wrap
msgid "choose([60, 65, 72])"
msgstr "choose([60, 65, 72])"

#: 04-Randomisation.md:126
msgid "Let's hear what that sounds like:"
msgstr "Laten we eens horen hoe dat klinkt:"

#: 04-Randomisation.md:128
#, no-wrap
msgid ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"
msgstr ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"

#: 04-Randomisation.md:135
msgid "rrand"
msgstr "rrand"

#: 04-Randomisation.md:137
msgid ""
"We've already seen `rrand`, but let's run over it again. It returns a random "
"number between two values exclusively. That means it will never return "
"either the top or bottom number - always something in between the two. The "
"number will always be a float - meaning it's not a whole number but a "
"fraction of a number. Examples of floats returned by `rrand(20, 110)`:"
msgstr ""
"We hebben `rrand` al gezien, maar laat ons deze nog even overlopen. Deze "
"reproduceert een willekeurig getal tussen twee getallen die hierbij "
"exclusief zijn. Dit wil zeggen dat deze getallen,noch het onderste, noch het "
"bovenrste zal weergeven worden, maar altijd een getal tussen die twee. Het "
"getal zal altijd een niet-geheel getal zijn- wat betekend dat dit nooit een "
"geheel getal zal zijn, maar een breuk van een getal. Voorbeelden van niet-"
"gehele getallen die worden gereproduceerd door `rrand(20, 110)`:"

#: 04-Randomisation.md:148
msgid "rrand_i"
msgstr "rrand_i"

#: 04-Randomisation.md:150
msgid ""
"Occasionally you'll want a whole random number, not a float. This is where "
"`rrand_i` comes to the rescue. It works similarly to `rrand` except it may "
"return the min and max values as potential random values (which means it's "
"inclusive rather than exclusive of the range). Examples of numbers returned "
"by `rrand_i(20, 110)` are:"
msgstr ""
"Soms zal je een geheel getal, willen doen uitkomen in plaats van een niet-"
"geheel getal in de ranomisering. Hier komt  `rrand_i` redding brengen. Dit "
"werk het zelfde als `rrand` behalve dat deze hier de min en max waarden als "
"potentiële random waarden laat uitkomen (inclusief ipv. exclusief bereik). "
"Voorbeelden van getallen die gereproduceerd kunnen worden door `rrand` zijn:"

#: 04-Randomisation.md:160
msgid "rand"
msgstr "rand"

#: 04-Randomisation.md:162
msgid ""
"This will return a random float between 0 (inclusive) and the max value you "
"specify (exclusive). By default it will return a value between 0 and one. "
"It's therefore useful for choosing random `amp:` values:"
msgstr ""
"Dit geeft een willekeurig niet-geheel getal tussen 0 (inbegrepen) en de max "
"waarde die u opgeeft (exclusieve). Standaard wordt een waarde tussen 0 en 1 "
"geretourneerd. Daarom is deze nuttig voor het kiezen van willekeurige ' amp:"
"' waarden:"

#: 04-Randomisation.md:167
#, no-wrap
msgid ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"
msgstr ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"

#: 04-Randomisation.md:174
msgid "rand_i"
msgstr "rand_i"

#: 04-Randomisation.md:176
msgid ""
"Similar to the relationship between `rrand_i` and `rrand`, `rand_i` will "
"return a random whole number between 0 and the max value you specify."
msgstr ""
"Vergelijkbaar met de relatie tussen 'rrand_i' en 'rrand', 'rand_i' geeft een "
"willekeurig geheel getal tussen 0 en de max waarde die u opgeeft."

#: 04-Randomisation.md:179
msgid "dice"
msgstr "dice (teerling)"

#: 04-Randomisation.md:181
msgid ""
"Sometimes you want to emulate a dice throw - this is a special case of "
"`rrand_i` where the lower value is always 1. A call to `dice` requires you "
"to specify the number of sides on the dice. A standard dice has 6 sides, so "
"`dice(6)` will act very similarly - returning values of either 1, 2, 3, 4, "
"5, or 6. However, just like fantasy role-play games, you might find value in "
"a 4 sided dice, or a 12 sided dice, or a 20 sided dice - perhaps even a 120 "
"sided dice!"
msgstr ""
"Soms wil je een gooi van een dobbelstenen nabootsen - dit is een speciaal "
"geval van 'rrand_i' waar de laagste waarde altijd 1 is . Een oproep naar de "
"'dobbelstenen' moet je het aantal zijden op de dobbelsteen opgeven. Een "
"standaard dobbelsteen heeft 6 zijden, en zal 'dice(6)' zich ook zo gaan "
"gedragen - en waarden van ofwel 1, 2, 3, 4, 5 of 6 reproduceren.Maar "
"misschien wil je wel, net zoals in een fantasy rollenspel , een 4-zijdige "
"dobbelstenen, of een 12 zijdige dobbelstenen, of een 20 zijdige dobbelsteen -"
" misschien zelfs een 120 zijdige dobbelsteen!"

#: 04-Randomisation.md:189
msgid "one_in"
msgstr "one_in"

#: 04-Randomisation.md:191
msgid ""
"Finally you may wish to emulate throwing the top score of a dice such as a 6 "
"in a standard dice. `one_in` therefore returns true with a probability of "
"one in the number of sides on the dice. Therefore `one_in(6)` will return "
"true with a probability of 1 in 6 or false otherwise. True and false values "
"are very useful for `if` statements which we will cover in a subsequent "
"section of this tutorial."
msgstr ""
"Tot slot wil je ook de gooi naar het hoogste getal nabootsen, zoals onze 6 "
"op een normale dobbelsteen. `one_in` zal daarom de waarde true met een kans "
"van één op het aantal zijden op de dobbelsteen reproduceren. Daarom geeft "
"`one_in(6)` true met een waarschijnlijkheid van 1 in 6 terug, en  anders "
"false . True en False waarden zijn zeer nuttig voor `if` verklaringen die "
"wij in een latere sectie van dit leerprogramma zullen behandelen."

#: 04-Randomisation.md:198
msgid "Now, go and jumble up your code with some randomness!"
msgstr "Maak maar even een wirwar aan Random-heid!"

#: 05-Programming-Structures.md:1
msgid "5 Programming Structures"
msgstr "5 Programmeerstructuren"

#: 05-Programming-Structures.md:3
msgid "Programming Structures"
msgstr "Programmeerstructuren"

#: 05-Programming-Structures.md:5
msgid ""
"Now that you've learned the basics of creating sounds with `play` and "
"`sample` and creating simple melodies and rhythms by `sleep`ing between "
"sounds, you might be wondering what else the world of code can offer you..."
msgstr ""
"Nu dat je de basis hebt geleerd om geluiden met 'play' en 'sample' te "
"creëren , en eenvoudige melodieën en ritmes, door tussen de klanken  `sleep`"
"  te gebruiken, kan je je nu gaan afvragen wat de wereld van code je nog "
"heeft te bieden..."

#: 05-Programming-Structures.md:10
msgid ""
"Well, you're in for an exciting treat! It turns out that basic programming "
"structures such as looping, conditionals, functions and threads give you "
"amazingly powerful tools to express your musical ideas."
msgstr ""
"Nou, sta je voor een spannende traktatie! Het blijkt dat fundamentele "
"programmeerstructuren zoals loops, conditionals, functies en threads jou  "
"ongelooflijk krachtige tools geven om jou muzikale ideeën uit te drukken."

#: 05-Programming-Structures.md:14
msgid "Let's get stuck in with the basics..."
msgstr "We bijten ons vast in de basisbeginselen hiervan..."

#: 05.1-Blocks.md:1
msgid "5.1 Blocks"
msgstr "5.1 Blocks"

#: 05.1-Blocks.md:3
msgid "Blocks"
msgstr "Blocks"

#: 05.1-Blocks.md:5
msgid ""
"A structure you'll see a lot in Sonic Pi is the block. Blocks allow us to do "
"useful things with large chunks of code. For example, with synth and sample "
"parameters we were able to change something that happened on a single line. "
"However, sometimes we want to do something meaningful to a number of lines "
"of code. For example, we may wish to loop it, to add reverb to it, to only "
"run it 1 time out of 5, etc. Consider the following code:"
msgstr ""
"Een structuur die je vaak zal terugvinden in Sonic Pi is de blok-structuur. "
"Deze \"Blocks\" kunnen ervoor zorgen dat we heel handig met grote happen "
"code gaan kunnen omspringen. Met de Synth en sample parameters konden we "
"deze al op een enkele lijn gaan veranderen. Soms willen we echter op een "
"slimme manier verschillende lijnen kunnen aanspreken om hun parameters te "
"gaan veranderen. Bijvoorbeeld, als we die willen loop-en, een reverb toe "
"willen voegen, deze 1 van de vijf keer willen laten afspelen etc... Kijk dan "
"even naar deze code:"

#: 05.1-Blocks.md:13
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"

#: 05.1-Blocks.md:21
msgid ""
"To do something with a chunk of code, we need to tell Sonic Pi where the "
"code block *starts* and where it *ends*. We use `do` for start and `end` for "
"end. For example:"
msgstr ""
"Om iets met een stuk code-reeksen te laten gebeuren, moeten we Sonic Pi "
"vertellen waar die blok van code moet *starten* en waar deze *eindigt*. "
"Hiervoor gebruiken we `do` om te starten en `end` om te eindigen. "
"Bijvoorbeeld:"

#: 05.1-Blocks.md:25
#, no-wrap
msgid ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 05.1-Blocks.md:35
msgid ""
"However, this isn't yet complete and won't work (try it and you'll get an "
"error) as we haven't told Sonic Pi what we want to do with this *do/end "
"block*. We tell Sonic Pi this by writing some special code before the `do`. "
"We'll see a number of these special pieces of code later on in this "
"tutorial. For now, it's important to know that wrapping your code within "
"`do` and `end` tells Sonic Pi you wish to do something special with that "
"chunk of code."
msgstr ""
"Maar... we zijn er nog niet helemaal (als je dit zou uitproberen krijg je "
"een foutmelding) want we hebben Sonic Pi nog niet verteld wat we willen doen "
"met deze *do/end block*. Door een speciale code vóór de `do` te zetten "
"kunnen we dit duidelijk maken aan Sonic Pi. We zullen deze speciale stukjes "
"code later in deze handleiding bekijken. Het belangrijkste om weten nu, is "
"dat als je je code inpakt met deze `do` en `end` je hiermee iets speciaal "
"kan aanvangen."

#: 05.2-Iteration-and-Loops.md:1
msgid "5.2 Iteration and Loops"
msgstr "5.2 Herhaling en Loops"

#: 05.2-Iteration-and-Loops.md:3
msgid "Iteration and Loops"
msgstr "Herhaling en Loops"

#: 05.2-Iteration-and-Loops.md:5
msgid ""
"So far we've spent a lot of time looking at the different sounds you can "
"make with `play` and `sample` blocks. We've also learned how to trigger "
"these sounds through time using `sleep`."
msgstr ""
"Tot nu toe hebben we al een heleboel tijd besteed aan de verschillende "
"klanken die we kunnen maken met de `play` en `sample` lijnen. We hebben ook "
"geleerd deze met een zekere regelmaat te triggeren met behulp van `sleep`."

#: 05.2-Iteration-and-Loops.md:9
msgid ""
"As you've probably found out, there's a *lot* of fun you can have with these "
"basic building blocks. However, a whole new dimension of fun opens up when "
"you start using the power of code to structure your music and compositions. "
"In the next few sections we'll explore some of these powerful new tools. "
"First up is iteration and loops."
msgstr ""
"Zoals je waarschijnlijk hebt ontdekt, je kan *veel* plezier beleven met deze "
"basis bouwstenen. Er zal echter een nieuwe wereld voor je opengaan wanneer "
"je de kracht van code gaat gebruiken om structuur te geven aan jouw muziek "
"en composities. In de volgende secties gaan we enkele van deze krachtige "
"hulpmiddelen verkennen. Vooraleerst zijn herhaling en loop aan de beurt."

#: 05.2-Iteration-and-Loops.md:15
msgid "Repetition"
msgstr "Repetitieve herhaling"

#: 05.2-Iteration-and-Loops.md:17
msgid ""
"Have you written some code you'd like to repeat a few times? For example, "
"you might have something like this:"
msgstr ""
"Heb je wat code geschreven dat je graag een paar keer wil herhalen? "
"Bijvoorbeeld, zoiets als deze::"

#: 05.2-Iteration-and-Loops.md:20
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:29
msgid ""
"What if we wished to repeat this 3 times? Well, we could do something simple "
"and just copy and paste it three times:"
msgstr ""
"Wat als wij deze 3 keer willen herhalen? Nou simpel, we kunnen deze drie "
"keer kopiëren en plakken:"

#: 05.2-Iteration-and-Loops.md:32
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:55
msgid ""
"Now that's a lot of code! What happens if you want to change the sample to `:"
"elec_plip`? You're going to have to find all the places with the original `:"
"elec_blup` and switch them over. More importantly, what if you wanted to "
"repeat the original piece of code 50 times or 1000? Now that would be a lot "
"of code, and a lot of lines of code to alter if you wanted to make a change."
msgstr ""
"Dat is wel een heleboel code! Wat als je nu de sample `:elec_plip` wil "
"veranderen? Dan moet je de code helemaal afgaan en overal waar deze voorkomt "
"vervangen door de nieuwe sample. En, nog belangrijker, wat als ik de code 50 "
"of 1000 keer wil herhalen? Dat zou een heleboel code zijn, en heel wat "
"regels wijzigen om een verandering te maken."

#: 05.2-Iteration-and-Loops.md:62
msgid "Iteration"
msgstr "Iteratie"

#: 05.2-Iteration-and-Loops.md:64
msgid ""
"In fact, repeating the code should be as easy as saying *do this three "
"times*. Well, it pretty much is. Remember our old friend the code block? We "
"can use it to mark the start and end of the code we'd like to repeat three "
"times. We then use the special code `3.times`. So, instead of writing *do "
"this three times*, we write `3.times do` - that's not too hard. Just "
"remember to write `end` at the end of the code you'd like to repeat:"
msgstr ""
"In feite zou het herhalen van code zo eenvoudig moeten zijn als zeggen *doe "
"dit drie keer*. Zo is het ook wel een beetje. Herinner je je onze oude "
"vriend de code block nog? We kunnen hem gebruiken om het start- en eindpunt, "
"van de code die we willen herhalen, aan te duiden. We gebruiken dan onze "
"speciale code `3.times`. In plaats van *doe dit drie keer*, schrijven we `"
"3.times do`, eenvoudig niet? Vergeet ook niet `end`op het einde van het te "
"herhalen block te schrijven:"

#: 05.2-Iteration-and-Loops.md:72
#, no-wrap
msgid ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"
msgstr ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"

#: 05.2-Iteration-and-Loops.md:83
msgid ""
"Now isn't that much neater than cutting and pasting! We can use this to "
"create lots of nice repeating structures:"
msgstr ""
"Nu is dat niet veel netter dan knippen en plakken! We kunnen dit gebruiken "
"om allerlei leuke herhalende structuren te maken:"

#: 05.2-Iteration-and-Loops.md:86
#, no-wrap
msgid ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"
msgstr ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"

#: 05.2-Iteration-and-Loops.md:103
msgid "Nesting Iterations"
msgstr "Geneste Iteraties"

#: 05.2-Iteration-and-Loops.md:105
msgid ""
"We can put iterations inside other iterations to create interesting "
"patterns. For example:"
msgstr ""
"We kunnen iteraties binnen andere iteraties plaatsen om interessante "
"patronen te creëren. Bijvoorbeeld:"

#: 05.2-Iteration-and-Loops.md:108
#, no-wrap
msgid ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 05.2-Iteration-and-Loops.md:123
msgid "Looping"
msgstr "Loop-en"

#: 05.2-Iteration-and-Loops.md:125
msgid ""
"If you want something to repeat a lot of times, you might find yourself "
"using really large numbers such as `1000.times do`. In this case, you're "
"probably better off asking Sonic Pi to repeat forever (at least until you "
"press the stop button!). Let's loop the amen break forever:"
msgstr ""
"Als je iets lang wil laten herhalen, ga je je misschien op betrappen van "
"grote getallen te gebruiken zoals bv. `1000.times do`. In dat geval kan je "
"Sonic Pi misschien beter opdragen van deze oneindig veel keer te herhalen ( "
"als je tenminste niet op de stop-knop drukt,natuurlijk!) Laat ons de Amen "
"Break eindeloos herhalen:"

#: 05.2-Iteration-and-Loops.md:130
#, no-wrap
msgid ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"
msgstr ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"

#: 05.2-Iteration-and-Loops.md:137
msgid ""
"The important thing to know about loops is that they act like black holes "
"for code. Once the code enters a loop it can never leave until you press "
"stop - it will just go round and round the loop forever. This means if you "
"have code after the loop you will *never* hear it. For example, the cymbal "
"after this loop will never play:"
msgstr ""
"Belangrijk om weten is dat loops zich kunnen gedragen als zwarte gaten in je "
"code. Eens de code in loop gaat, geraakt hij er niet meer uit tenzij je op "
"stop drukt - de code blijft in deze loop doordraaien. Dit betekent dan, als "
"je code hebt geschreven na de loop, je deze code *nooit* zal horen. In dit "
"voorbeeld, zal de cymbaal na de loop nooit spelen:"

#: 05.2-Iteration-and-Loops.md:143
#, no-wrap
msgid ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"
msgstr ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"

#: 05.2-Iteration-and-Loops.md:152
msgid "Now, get structuring your code with iteration and loops!"
msgstr "Nu gaan we de code structureren met iteratie en loops!"

#: 05.3-Conditionals.md:1
msgid "5.3 Conditionals"
msgstr "5.3 Conditionelen"

#: 05.3-Conditionals.md:3
msgid "Conditionals"
msgstr "Conditionelen"

#: 05.3-Conditionals.md:5
msgid ""
"A common thing you'll likely find yourself wanting to do is to not only play "
"a random note (see the previous section on randomness) but also make a "
"random decision and based on the outcome run some code or some other code. "
"For example, you might want to randomly play a drum or a cymbal. We can "
"achieve this with an `if` statement."
msgstr ""
"Eén van de dingen die je op een zeker moment zeker wil gaan doen is,dat je "
"niet alleen willekeurige noten wil spelen (zie de voorgaande sectie hierover)"
"  maar ook een willekeurige (random) beslissing kunnen maken en gebaseerd op "
"de uitkomst van andere uitgevoerde code of andere code. Zo wil je "
"bijvoorbeeld een drum of cimbaal willekeurig bespelen.  Dit kunnen we "
"bereiken met de instructie 'als'."

#: 05.3-Conditionals.md:11
msgid "Flipping a Coin"
msgstr "Een muntje opgooien"

#: 05.3-Conditionals.md:13
msgid ""
"So, let's flip a coin: if it's heads, play a drum, if it's tails, play a "
"cymbal. Easy. We can emulate a coin flip with our `one_in` function "
"(introduced in the section on randomness) specifying a probability of 1 in "
"2: `one_in(2)`. We can then use the result of this to decide between two "
"pieces of code, the code to play the drum and the code to play the cymbal:"
msgstr ""
"Laten we een muntje opgooien: Als het kop is, speel je een trommel, als het "
"munt is, speel je een cimbaal. Makkelijk. We kunnen kop of munt nabootsen "
"met onze  `one_in` functie (voorgesteld in onze sectie over willekeurigheid) "
"door een waarschijnlijkheid in te bouwen van 1 op 2: 'one_in(2)'.  We kunnen "
"het resultaat,vervolgens gebruiken om te kunnen kiezen tussen twee stukken "
"van de code, de code om de trommel te spelen en de code om de cimbaal  te "
"spelen :"

#: 05.3-Conditionals.md:20
#, no-wrap
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"
msgstr ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"

#: 05.3-Conditionals.md:34
msgid "Notice that `if` statements have three parts:"
msgstr "Merk op dat 'if' verklaringen drie delen hebben:"

#: 05.3-Conditionals.md:36
msgid "The question to ask"
msgstr "De vraagstelling"

#: 05.3-Conditionals.md:37
msgid "The first choice of code to run (if the answer to the question is yes)"
msgstr ""
"De eerste keuze van de uit te voeren code (als het antwoord op de vraag ja "
"is)"

#: 05.3-Conditionals.md:38
msgid "The second choice of code to run (if the answer to the question is no)"
msgstr ""
"De tweede keuze van de uit te voeren code (als het antwoord op de vraag neen "
"is)"

#: 05.3-Conditionals.md:40
msgid ""
"Typically in programming languages, the notion of yes is represented by the "
"term `true` and the notion of no is represented by the term `false`. So we "
"need to find a question that will give us a `true` or `false` answer which "
"is exactly what `one_in` does."
msgstr ""
"Typisch in programmeertalen, wordt ja aangeduid door de term 'true' en neen "
"door de term 'false'. Dus moeten we een vraag vinden die ons een `true` of "
"`false` antwoord geeft, dat is precies wat `one_in´ doet."

#: 05.3-Conditionals.md:45
msgid ""
"Notice how the first choice is wrapped between the `if` and the `else` and "
"the second choice is wrapped between the `else` and the `end`. Just like do/"
"end blocks you can put multiple lines of code in either place. For example:"
msgstr ""
"Merk op hoe de eerste keuze verpakt  is tussen `if` en `else` en de tweede "
"keus verpakt tussen `else` en `end`. Net zoals bij een do/end blok kun je "
"meerdere coderegels in beide plaatsen zetten. Bijvoorbeeld:"

#: 05.3-Conditionals.md:50
#, no-wrap
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"  \n"
"end"
msgstr ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"  \n"
"end"

#: 05.3-Conditionals.md:64
msgid ""
"This time we're sleeping for a different amount of time depending on which "
"choice we make."
msgstr ""
"Dit keer hebben we verschillende rustijden afhankelijk van de keuze die "
"wordt gemaakt."

#: 05.3-Conditionals.md:68
msgid "Simple if"
msgstr "Gewoon if"

#: 05.3-Conditionals.md:70
msgid ""
"Sometimes you want to optionally execute just one line of code. This is "
"possible by placing `if` and then the question at the end. For example:"
msgstr ""
"Soms wilt je optioneel slechts één regel code uitvoeren. Dit is mogelijk "
"door het plaatsen van `if` en vervolgens de vraag aan het einde. "
"Bijvoorbeeld:"

#: 05.3-Conditionals.md:73
#, no-wrap
msgid ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"
msgstr ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"

#: 05.3-Conditionals.md:85
msgid ""
"This will play chords of different numbers with the chance of each note "
"playing having a different probability."
msgstr ""
"Dit zal akoorden met andere getallen, bij iedere gespeelde noot, de kans op "
"een verschillende mogelijkheid spelen."

#: 05.4-Threads.md:1
msgid "5.4 Threads"
msgstr "5.4 Threads"

#: 05.4-Threads.md:3
msgid "Threads"
msgstr "Threads"

#: 05.4-Threads.md:5
msgid ""
"So you've made your killer bassline and a phat beat. How do you play them at "
"the same time? One solution is to weave them together manually - play some "
"bass, then a bit of drums, then more bass... However, the timing soon gets "
"hard to think about, especially when you start weaving in more elements."
msgstr ""
"Dus je hebt je fatale baslijn en een vette beat. Hoe speel je ze op "
"hetzelfde moment? Een oplossing is deze handmatig verweven- een beetje bas , "
"dan wat drums, wat meer bas... Lang gaat het niet duren eer je je de timing "
"moeilijk kan voorstellen, zeker als je nog meer elementen hierin wil "
"verweven."

#: 05.4-Threads.md:11
msgid ""
"What if Sonic Pi could weave things for you automatically? Well, it can, and "
"you do it with a special thing called a *thread*."
msgstr ""
"Wat als Sonic Pi deze automatisch kan verweven voor jou? Nou, het kan, en je "
"het doet dat met wat heet een *thread*."

#: 05.4-Threads.md:14
msgid "Infinite Loops"
msgstr "Oneindige Loops"

#: 05.4-Threads.md:16
msgid ""
"To keep this example simple, you'll have to imagine that this is a phat beat "
"and a killer bassline:"
msgstr ""
"Om het voorbeeld eenvoudig te houden, moet je je voorstellen dat dit een "
"waanzinnige baslijn is en een vette beat:"

#: 05.4-Threads.md:19
#, no-wrap
msgid ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"

#: 05.4-Threads.md:32
msgid ""
"As we've discussed previously, loops are like *black holes* for the program. "
"Once you enter a loop you can never exit from it until you hit stop. How do "
"we play both loops at the same time? We have to tell Sonic Pi that we want "
"to start something at the same time as the rest of the code. This is where "
"threads come to the rescue."
msgstr ""
"Zoals we reeds eerder bespraken, zijn loops zoals *zwarte gaten* voor het "
"programma. Zodra je in loop bent geraakt, kan je deze niet verlaten totdat u "
"op stop hebt gedrukt. Hoe spelen we dan deze beide loops op hetzelfde "
"moment? We moeten Sonic Pi vertellen dat we iets op hetzelfde moment als de "
"rest van de code willen beginnen. Dit is waar de threads ons redding brengen."

#: 05.4-Threads.md:38
msgid "Threads to the Rescue"
msgstr "Threads bieden redding"

#: 05.4-Threads.md:40
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"

#: 05.4-Threads.md:55
msgid ""
"By wrapping the first loop in an `in_thread` do/end block we tell Sonic Pi "
"to run the contents of the do/end block at *exactly* the same time as the "
"next statement after the do/end block (which happens to be the second loop). "
"Try it and you'll hear both the drums and the bassline weaved together!"
msgstr ""
"Door de eerste loop in een `in_thread` do/end block te plaatsen, vertellen "
"we Sonic Pi de inhoud van de do/end block uit te voeren op *exact* hetzelfde "
"moment als de volgende instructie na de do/end block (toevallig ook onze "
"tweede lus). Probeer het en je zal de baslijn en de drums samen horen spelen!"

#: 05.4-Threads.md:61
msgid "Now, what if we wanted to add a synth on top. Something like:"
msgstr "Wat als we hieraan nog een synth willen toevoegen? Zoiets als:"

#: 05.4-Threads.md:63
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"

#: 05.4-Threads.md:84
msgid ""
"Now we have the same problem as before. The first loop is played at the same "
"time as the second loop due to the `in_thread`. However, *the third loop is "
"never reached*. We therefore need another thread:"
msgstr ""
"Nu hebben we hetzelfde probleem als hiervoor. De eerste loop wordt gespeeld "
"op hetzelfde moment als de tweede loop, door onze 'in_thread'. *De derde "
"loop wordt weer nooit bereikt*. Daarom hebben we een andere thread nodig:"

#: 05.4-Threads.md:88
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"

#: 05.4-Threads.md:111
msgid "Runs as threads"
msgstr "Voert uit als threads"

#: 05.4-Threads.md:113
msgid ""
"What may surprise you is that when you press the Run button, you're actually "
"creating a new thread for the code to run. This is why pressing it multiple "
"times will layer sounds over each other. As the runs themselves are threads, "
"they will automatically weave the sounds together for you."
msgstr ""
"Wat je mischien zal verbazen is dat iedere keer je op de afspeel-knop drukt "
"je eigenlijk een nieuwe thread aanmaakt voor de uitvoerende code. Vandaar "
"dat, wanneer je meerdere keren op afspelen drukt, de klanken op elkaar hoort "
"opstapelen. Vermits deze een thread op zich is, verweeft hij deze code voor "
"jou automatisch."

#: 05.4-Threads.md:119
msgid "Scope"
msgstr "Toepassingsgebied"

#: 05.4-Threads.md:121
msgid ""
"As you learn how to master Sonic Pi, you'll learn that threads are the most "
"important building blocks for your music. One of the important jobs they "
"have is to isolate the notion of *current settings* from other threads. What "
"does this mean? Well, when you switch synths using `use_synth` you're "
"actually just switching the synth in the *current thread* - no other thread "
"will have their synth switched. Let's see this in action:"
msgstr ""
"Als je Sonic Pi leert beheersen, ga je zien dat threads de belangrijkste "
"bouwstenen voor jouw muziek zullen zijn. Eén van de belangrijkste taak die "
"zij hebben is het isoleren van *de huidige staat* van andere threads. Wat "
"betekend dit? Wel, wanneer je van synth overschakeld door het gebruik van "
"`use_synth` schakel je van synth in *de huidige thread* - geen enkele andere "
"thread zal van synth veranderen. Laten we dit in actie zien:"

#: 05.4-Threads.md:129
#, no-wrap
msgid ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"
msgstr ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"

#: 05.4-Threads.md:142
msgid ""
"Notice how the middle sound was different to the others? The `use_synth` "
"statement only affected the thread it was in and not the outer main run "
"thread."
msgstr ""
"Merk je op dat de middelste klank anders is dan de andere? De `use_synth` "
"declaratie zal enkel invloed hebben op de thread waarin deze zich bevind en "
"niet op de threads daarbuiten."

#: 05.4-Threads.md:146
msgid "Inheritance"
msgstr "Erfenis"

#: 05.4-Threads.md:148
msgid ""
"When you create a new thread with `in_thread`, the new thread will "
"automatically inherit all of the current settings from the current thread. "
"Let's see that:"
msgstr ""
"Wanneer je een nieuwe thread met `in_thread` creëert, zal de nieuwe thread "
"de instellingen van de huidige thread overnemen. Laten we dit even bekijken :"

#: 05.4-Threads.md:152
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"
msgstr ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"

#: 05.4-Threads.md:162
msgid ""
"Notice how the second note is played with the `:tb303` synth even though it "
"was played from a separate thread? Any of the settings modified with the "
"various `use_*` functions will behave in the same way."
msgstr ""
"Merk je op hoe de tweede noot met de ': tb303' synth wordt gespeeld, hoewel "
"het door een aparte thread werd aangestuurd? Elk van de met verschillende "
"`use_*`  functies gewijzigde instellingen, zullen zich op dezelfde manier "
"gaan gedragen."

#: 05.4-Threads.md:166
msgid ""
"When threads are created, they inherit all the settings from their parent "
"but they don't share any changes back."
msgstr ""
"Wannneer threads worden gecreëerd, erven zij alle instellingen over van "
"bovenliggende (parent) maar zij delen geen veranderingen aan hen terug."

#: 05.4-Threads.md:169
msgid "Naming Threads"
msgstr "Naamgeving aan Threads"

#: 05.4-Threads.md:171
msgid "Finally, we can give our threads names:"
msgstr "Ook nog kunnen wij namen geven aan threads:"

#: 05.4-Threads.md:173
#, no-wrap
msgid ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"

#: 05.4-Threads.md:190
msgid ""
"Look at the log pane when you run this code. See how the log reports the "
"name of the thread with the message?"
msgstr ""
"Kijk naar het log venster wanneer u deze code uitvoert. Zie je hoe het "
"logboek de naam rapporteert van de thread met een bericht?"

#: 05.4-Threads.md:193
#, no-wrap
msgid ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"
msgstr ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"

#: 05.4-Threads.md:198
msgid "Only One Thread per Name Allowed"
msgstr "Slechts één thread per naam toegestaan"

#: 05.4-Threads.md:200
msgid ""
"One last thing to know about named threads is that only one thread of a "
"given name may be running at the same time. Let's explore this. Consider the "
"following code:"
msgstr ""
"Wat je nog moet weten over benoemde threads is dat slechts één thread met "
"een bepaalde naam tegelijkertijd kan worden uitgevoerd. Laten we dit "
"onderzoeken met de volgende code:"

#: 05.4-Threads.md:204
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"

#: 05.4-Threads.md:213
msgid ""
"Go ahead and paste that into a buffer and press the Run button. Press it "
"again a couple of times. Listen to the cacophony of multiple amen breaks "
"looping out of time with each other. Ok, you can press Stop now."
msgstr ""
"Ga je gang en plak deze in een buffer en druk op de knop afspelen. Druk er "
"opnieuw een paar keer. Luister naar de kakofonie van meerdere amen breaks in "
"loop, uit de maat afspelen . OK, je mag nu op Stop drukken."

#: 05.4-Threads.md:217
msgid ""
"This is the behaviour we've seen again and again - if you press the Run "
"button, sound layers on top of any existing sound. Therefore if you have a "
"loop and press the Run button three times, you'll have three layers of loops "
"playing simultaneously."
msgstr ""
"Dit soort gedrag hebben we al keer op keer gezien - dat als je de "
"afspeelknop aanklikt, geluidslagen op bestaande klanken gaan stapelen. Dus "
"als je een loop hebt en je klikt drie keer op afspelen zal je drie lagen "
"loops tegelijkertijd horen afspelen."

#: 05.4-Threads.md:222
msgid "However, with named threads it is different:"
msgstr "Met benoemde threads is dat echter anders:"

#: 05.4-Threads.md:224
#, no-wrap
msgid ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"

#: 05.4-Threads.md:233
msgid ""
"Try pressing the Run button multiple times with this code. You'll only ever "
"hear one amen break loop. You'll also see this in the log:"
msgstr ""
"Probeer de afspeel-knop meerdere malen met deze code. Je zal nu één enkele "
"amen break loop horen. Ook zie je dit in het logboek:"

#: 05.4-Threads.md:236
#, no-wrap
msgid "==> Skipping thread creation: thread with name :amen already exists."
msgstr "==> Skipping thread creation: thread with name :amen already exists."

#: 05.4-Threads.md:240
msgid ""
"Sonic Pi is telling you that a thread with the name `:amen` is already "
"playing, so it's not creating another."
msgstr ""
"Sonic Pi vertelt je hier dat een thread met de naam `:amen` al aan het "
"spelen is , en gaat geen andere creëren."

#: 05.4-Threads.md:243
msgid ""
"This behaviour may not seem immediately useful to you now - but it will be "
"very handy when we start to live code..."
msgstr ""
"Dit gedrag lijkt misschien niet onmiddellijk bruikbaar voor je nu - maar het "
"zal erg handig worden wanneer we beginnen met het spelen van code live..."

#: 05.5-Functions.md:1
msgid "5.5 Functions"
msgstr "5.5 functies"

#: 05.5-Functions.md:3
msgid "Functions"
msgstr "Functies"

#: 05.5-Functions.md:5
msgid ""
"Once you start writing lots of code, you may wish to find a way to organise "
"and structure things to make them tidier and easier to understand. Functions "
"are a very powerful way to do this. They give us the ability to give a name "
"to a bunch of code. Let's take a look."
msgstr ""
"Zodra u veel code begint te schrijven, kan je als je wil, een manier vinden "
"om dingen te gaan organiseren en structureren, om deze netter te maken en "
"gemakkelijker te begrijpen. Functies zijn een zeer krachtige manier om dit "
"te doen. Ze brengen ons de mogelijkheid om een naam te geven aan een bundel "
"code. Laten we een kijkje nemen."

#: 05.5-Functions.md:10
msgid "Defining functions"
msgstr "Functies definiëren"

#: 05.5-Functions.md:12
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"
msgstr ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"

#: 05.5-Functions.md:21
msgid ""
"Here, we've defined a new function called `foo`. We do this with our old "
"friend the do/end block and the magic word `define` followed by the name we "
"wish to give to our function. We didn't have to call it `foo`, we could have "
"called it anything we want such as `bar`, `baz` or ideally something "
"meaningful to you like `main_section` or `lead_riff`."
msgstr ""
"Hier hebben we een nieuwe functie genaamd `foo` gedefinieerd. We doen dit "
"met onze oude vriend het do/end blok en het magische woord `define`  gevolgd "
"door de naam die wij willen geven aan onze functie. We hoefde deze niet `foo`"
" te noemen, we konden deze om het even wat noemen zoals `fiets`, `bal`  of "
"een ideale beschrijving  zoals `refrein_stuk` of `lead_riff`."

#: 05.5-Functions.md:27
msgid ""
"Remember to prepend a colon `:` to the name of your function when you define "
"it."
msgstr ""
"Vergeet niet van een dubbele punt `:` bij de naam van je functie te voegen "
"wanneer je deze definieert."

#: 05.5-Functions.md:30
msgid "Calling functions"
msgstr "Functies aanroepen"

#: 05.5-Functions.md:32
msgid ""
"Once we have defined our function we can call it by just writing its name:"
msgstr ""
"Eens we een functie hebben gedefinieerd kunnen we deze oproepen door gewoon "
"zijn naam te schrijven:"

#: 05.5-Functions.md:35
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"
msgstr ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"

#: 05.5-Functions.md:52
msgid ""
"We can even use `foo` inside iteration blocks or anywhere we may have "
"written `play` or `sample`. This gives us a great way to express ourselves "
"and to create new meaningful words for use in our compositions."
msgstr ""
"We kunnen zelfs gebruik maken van 'foo' binnen iteratie blokken of overal "
"waar we `spelen` of `samplen` hebben geschreven. Dit schenkt ons een "
"geweldige manier om onszelf te uiten en nieuwe zinvolle woorden te gebruiken "
"in onze composities."

#: 05.5-Functions.md:56
msgid "Functions are remembered across runs"
msgstr "Functies worden onthouden langsheen het uitvoer commando"

#: 05.5-Functions.md:58
msgid ""
"So far, every time you've pressed the Run button, Sonic Pi has started from "
"a completely blank slate. It knows nothing except for what is in the buffer. "
"You can't reference code in another buffer or another thread. However, "
"functions change that. When you define a function, Sonic Pi *remembers* it. "
"Let's try it. Delete all the code in your buffer and replace it with:"
msgstr ""
"Tot nu toe was het zo, dat telkens als u de Afspeel-knop ingedrukte, Sonic "
"Pi met een schone lei startte. Het weet weet van niets tenzij van wat er in "
"de buffer zit. Je kan niet verwijzen naar code die in een andere buffer of "
"een andere thread zit. Met functies veranderd dat. Wanneer je een functie "
"definieert zal Sonic Pi zich deze *herinneren*. Laten we dit eens proberen. "
"Verwijder alle code uit uw buffer en vervang het met:"

#: 05.5-Functions.md:65
#, no-wrap
msgid "foo"
msgstr "foo"

#: 05.5-Functions.md:69
msgid ""
"Press the Run button - and hear your function play. Where did the code go? "
"How did Sonic Pi know what to play? Sonic Pi just remembered your function - "
"so even after you deleted it from the buffer, it remembered what you had "
"typed. This behaviour only works with functions created using `define` (and "
"`defonce`)."
msgstr ""
"Druk op de Afspeel-knop - en hoor je functie nu spelen. Zo zonder code? Hoe "
"wist Sonic Pi wat het moest spelen? Sonic Pi herinnerde zich jouw functie - "
"dus zelfs nadat je deze hebt gewist uit de buffer, het herinnerde zich wat "
"jij had getypt. Dit gedrag werkt alleen met functies die zijn gemaakt met "
"`define` (en `defonce`)."

#: 05.5-Functions.md:75
msgid "Parameterised functions"
msgstr "geparametreerde functies"

#: 05.5-Functions.md:77
msgid ""
"You might be interested in knowing that just like you can pass min and max "
"values to `rrand`, you can teach your functions to accept arguments. Let's "
"take a look:"
msgstr ""
"Interessant om weten ook is dat je net zoals je min als max waarden kan "
"geven aan `rrand`, kan je ook jouw functies argumenten laten accepteren. "
"Laat ons dat even bekijken:"

#: 05.5-Functions.md:81
#, no-wrap
msgid ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"
msgstr ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"

#: 05.5-Functions.md:91
msgid ""
"This isn't very exciting, but it illustrates the point. We've created our "
"own version of `play` called `my_player` which is parameterised."
msgstr ""
"Dit is niet erg spannend, maar het illustreert wel de zaak. We hebben onze "
"eigen versie van `play` genaamd 'my_player' die is geparametriseerd."

#: 05.5-Functions.md:94
msgid ""
"The parameters need to go after the `do` of the `define` do/end block, "
"surrounded by vertical goalposts `|` and separated by commas `,`. You may "
"use any words you want for the parameter names."
msgstr ""
"De parameters moeten na de `do` van het `define` do/end blok komen te staan, "
"omringd door een sluisteken `|`en gescheiden door komma's `,`. Om deze "
"parameters te benoemen mag je elk woord gebruiken dat je maar wil."

#: 05.5-Functions.md:98
msgid ""
"The magic happens inside the `define` do/end block. You may use the "
"parameter names as if they were real values. In this example I'm playing "
"note `n`. You can consider the parameters as a kind of promise that when the "
"code runs, they will be replaced with actual values. You do this by passing "
"a parameter to the function when you call it. I do this with `my_player 80` "
"to play note 80. Inside the function definition, `n` is now replaced with "
"80, so `play n` turns into `play 80`. When I call it again with `my_player "
"90`, `n` is now replaced with 90, so `play n` turns into `play 90`."
msgstr ""
"Het zit 'h allemaal in de `define` do/end blok. Je kan de parameternamen "
"gebruiken zoals echte waarden. In dit voorbeeld speel ik de noot `n. Je kan "
"deze beschouwen als een soort toezegging, dat wanneer de code loopt, deze "
"door de werkelijke waarden vervangen wordt wanneer je deze benoemd. Ik doe "
"dit met `my_player 80`. om noot 80 te spelen. Binnen de definitie van deze "
"functie, is `n`nu vervangen door 80, dus `play n` verandert in `play 80`. "
"Wanneer ik deze vernoem met `my_player 90´, is `n` nu vervangen met 90, play "
"`n`is veranderd in play `90`."

#: 05.5-Functions.md:108
msgid "Let's see a more interesting example:"
msgstr "Laten we eens kijken naar een interessanter voorbeeld:"

#: 05.5-Functions.md:110
#, no-wrap
msgid ""
"define :chord_player do |root, repeats| \n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"
msgstr ""
"define :chord_player do |root, repeats| \n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"

#: 05.5-Functions.md:126
msgid ""
"Here I used `repeats` as if it was a number in the line `repeats.times do`. "
"I also used `root` as if it was a note name in my call to `play`."
msgstr ""
"Hier gebruikte ik `repeats` als een cijfer in de regel `repeats.times do`.Ik "
"gebruikte `root` ook als naam van een noot in mijn `play` oproep."

#: 05.5-Functions.md:129
msgid ""
"See how we're able to write something very expressive and easy to read by "
"moving a lot of our logic into a function!"
msgstr ""
"Hierbij zien we dat we in staat zijn om iets zeer expressief, maar makkelijk "
"leesbaar te schrijven door onze logica in een functie te steken!"

#: 05.6-Variables.md:1
msgid "5.6 Variables"
msgstr "5.6 Variabelen"

#: 05.6-Variables.md:3
msgid "Variables"
msgstr "Variabelen"

#: 05.6-Variables.md:5
msgid ""
"A useful thing to do in your code is to create names for things. Sonic Pi "
"makes this very easy, you write the name you wish to use, an equal sign "
"(`=`), then the thing you want to remember:"
msgstr ""
"Het is handig om in jouw code is namen voor dingen te creëren. Sonic Pi "
"maakt jou dit zeer eenvoudig, je schrijft de naam die je wenst te gebruiken, "
"een gelijkteken ('='), en dan wat je wilt onthouden:"

#: 05.6-Variables.md:9
#, no-wrap
msgid "sample_name = :loop_amen"
msgstr "sample_name = :loop_amen"

#: 05.6-Variables.md:13
msgid ""
"Here, we've 'remembered' the symbol `:loop_amen` in the variable "
"`sample_name`. We can now use `sample_name` everywhere we might have used `:"
"loop_amen`. For example:"
msgstr ""
"Hier, we hebben  het symbool `:loop_amen` 'onthouden' in de variabele "
"`sample_name` . Nu kunnen we `sample_name` gebruiken, overal waar we "
"`:loop_amen` hebben gebruikt. Bijvoorbeeld:"

#: 05.6-Variables.md:17
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name"

#: 05.6-Variables.md:22
msgid ""
"There are three main reasons for using variables in Sonic Pi: communicating "
"meaning, managing repetition and capturing the results of things."
msgstr ""
"Er zijn drie belangrijke redenen voor het gebruik van variabelen in Sonic Pi:"
" in het communiceren, het beheer van herhaling en het vastleggen van de "
"resultaten van zaken."

#: 05.6-Variables.md:26
msgid "Communicating Meaning"
msgstr "In de zin van Communicatie"

#: 05.6-Variables.md:28
msgid ""
"When you write code it's easy to just think you're telling the computer how "
"to do stuff - as long as the computer understands it's OK. However, it's "
"important to remember that it's not just the computer that reads the code. "
"Other people may read it too and try to understand what's going on. Also, "
"you're likely to read your own code in the future and try to understand "
"what's going on. Although it might seem obvious to you now - it might not be "
"so obvious to others or even your future self!"
msgstr ""
"Als je code schrijft, denk ,je snel dat je je computer verteld wat hij moet "
"doen, en zolang de computer deze kan verstaan, alles OK is. \n"
"Maar het is ook belangrijk om er op te letten dat niet alleen de computer "
"jouw code leest. Andere mensen kunnen deze ook lezen en proberen te "
"begrijpen wat er gaande is. Ook, wil je waarschijnlijk jouw eigen code in de "
"toekomst lezen en proberen te begrijpen hoe die werkt. Hoewel deze code voor "
"jou nu vanzelfsprekend lijkt - is het misschien niet zo duidelijk voor "
"anderen of zelfs je toekomstige zelf!"

#: 05.6-Variables.md:36
msgid ""
"One way to help others understand what your code is doing is to write "
"comments (as we saw in a previous section). Another is to use meaningful "
"variable names. Look at this code:"
msgstr ""
"Een manier om andere jouw code te laten begrijpen is deze van een commentaar-"
"lijn voorzien (zoals we in een voorgaande sectie hebben gezien). Een ander "
"is zinvolle variabele namen gebruiken. Kijk naar deze code:"

#: 05.6-Variables.md:40
#, no-wrap
msgid "sleep 1.7533"
msgstr "sleep 1.7533"

#: 05.6-Variables.md:44
msgid ""
"Why does it use the number `1.7533`? Where did this number come from? What "
"does it mean? However, look at this code:"
msgstr ""
"Waarom maakt men hier gebruik van het cijfer `1.7533`? Waar komt dit getal "
"vandaan? Wat betekent het? En kijk nu eens naar deze code:"

#: 05.6-Variables.md:47
#, no-wrap
msgid ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"
msgstr ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"

#: 05.6-Variables.md:52
msgid ""
"Now, it's much clearer what `1.7533` means: it's the duration of the sample "
"`:loop_amen`! Of course, you might say why not simply write:"
msgstr ""
"Het is nu veel duidelijker wat '1.7533' betekent: het is de duur van de "
"sample `:loop_amen`! Natuurlijk, zou je kunnen zeggen, waarom schrijf je "
"gewoon niet:"

#: 05.6-Variables.md:55
#, no-wrap
msgid "sleep sample_duration(:loop_amen)"
msgstr "sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:59
msgid ""
"Which, of course, is a very nice way of communicating the intent of the code."
msgstr ""
"Wat natuurlijk een zeer mooie manier is om de intentie van de code te "
"communiceren ."

#: 05.6-Variables.md:62
msgid "Managing Repetition"
msgstr "Herhaling Beheren"

#: 05.6-Variables.md:64
msgid ""
"Often you see a lot of repetition in your code and when you want to change "
"things, you have to change it in a lot of places. Take a look at this code:"
msgstr ""
"Vaak zie je een heleboel herhaling in je code en als je dingen wil "
"veranderen, moet je deze op een heleboel plaatsen veranderen. Kijk even naar "
"deze code:"

#: 05.6-Variables.md:68
#, no-wrap
msgid ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"
msgstr ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:77
msgid ""
"We're doing a lot of things with `:loop_amen`! What if we wanted to hear "
"what it sounded like with another loop sample such as `:loop_garzul`? We'd "
"have to find and replace all `:loop_amen`s with `:loop_garzul`. That might "
"be fine if you have lots of time - but what if you're performing on stage? "
"Sometimes you don't have the luxury of time - especially if you want to keep "
"people dancing."
msgstr ""
"We doen hier heel wat met ': loop_amen'! Maar als we nu willen horen hoe dit "
"klinkt met een andere sample loop, zoals `:loop_garzul`? Dan zouden we deze "
"moeten gaan zoeken en alle `:loop_amen`s met `:loop_garzul` vervangen'. Dat "
"zou fijn zijn als je veel tijd hebt- maar wat als je dit uitvoert op het "
"podium? Soms heb je de luxe van de tijd niet - vooral niet als je de mensen "
"aan het dansen wil houden."

#: 05.6-Variables.md:84
msgid "What if you'd written your code like this:"
msgstr "Wat als je je code als het volgt zou schrijven:"

#: 05.6-Variables.md:86
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"

#: 05.6-Variables.md:96
msgid ""
"Now, that does exactly the same as above (try it). It also gives us the "
"ability to just change one line `sample_name = :loop_amen` to `sample_name "
"= :loop_garzul` and we change it in many places through the magic of "
"variables."
msgstr ""
"Nu dat doet net het zelfde als deze hierboven (probeer maar). Het geeft ons "
"ook de mogelijkheid om één enkele lijn te moeten gaan veranderen: `"
"sample_naam = :loop_amen` naar `sample_naam = :loop_garzul, en we veranderen "
"deze op vele plaatsen binnen onze code door de magie van variabelen."

#: 05.6-Variables.md:101
msgid "Capturing Results"
msgstr "Vastleggen van de resultaten"

#: 05.6-Variables.md:103
msgid ""
"Finally, a good motivation for using variables is to capture the results of "
"things. For example, you may wish to do things with the duration of a sample:"
msgstr ""
"Tot slot, een goede motivatie om variabelen te gaan gebruiken is om "
"resultaten van zaken vast te leggen. Misschien wilt u bijvoorbeeld iets doen "
"met de duur van een sample:"

#: 05.6-Variables.md:107
#, no-wrap
msgid "sd = sample_duration(:loop_amen)"
msgstr "sd = sample_duration(:loop_amen)"

#: 05.6-Variables.md:111
msgid ""
"We can now use `sd` anywhere we need the duration of the `:loop_amen` sample."
msgstr ""
"We kunnen nu  'sd' overal gebruiken waar we de duur van de sample "
"`:loop_amen` nodig hebben."

#: 05.6-Variables.md:114
msgid ""
"Perhaps more importantly, a variable allows us to capture the result of a "
"call to `play` or `sample`:"
msgstr ""
"Wat misschien nog belangrijker is, een variabele stelt ons in staat het "
"resultaat te capteren van een oproep naar `play` of `sample`:"

#: 05.6-Variables.md:117
#, no-wrap
msgid "s = play 50, release: 8"
msgstr "s = play 50, release: 8"

#: 05.6-Variables.md:121
msgid ""
"Now we have caught and remembered `s` as a variable, which allows us to "
"control the synth as it is running:"
msgstr ""
"Nu hebben we  `s` gevangen en onthouden als een variabele, hetgeen ons "
"toelaat de synth te controleren wanneer deze speelt:"

#: 05.6-Variables.md:124
#, no-wrap
msgid ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"
msgstr ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"

#: 05.6-Variables.md:130
msgid "We'll look into controlling synths in more detail in a later section."
msgstr ""
"We zullen het manipuleren van synth's in een later sectie meer in detail "
"bekijken."

#: 05.7-Thread-Synchronisation.md:1
msgid "5.7 Thread Synchronisation"
msgstr "5.7 Het Synchroniseren van Threads"

#: 05.7-Thread-Synchronisation.md:3
msgid "Thread Synchronisation"
msgstr "Het Synchroniseren van Threads"

#: 05.7-Thread-Synchronisation.md:5
msgid ""
"Once you have become sufficiently advanced live coding with a number of "
"functions and threads simultaneously, you've probably noticed that it's "
"pretty easy to make a mistake in one of the threads which kills it. That's "
"no big deal, because you can easily restart the thread by hitting Run. "
"However, when you restart the thread it is now *out of time* with the "
"original threads."
msgstr ""
"Eens je het live coderen voldoende onder de knie hebt met een aantal "
"functies en threads tezelfdertijd, dan heb je misschien opgemerkt dat het "
"niet moeilijk is om een fout te maken in één van de threads die dodelijk kan "
"zijn. Niet heel erg, want je kan makkelijk de thread terug herstarten door "
"op afspelen te klikken. Maar als je de thread herstart is deze *uit de maat* "
"met de originele threads."

#: 05.7-Thread-Synchronisation.md:12
msgid "Inherited Time"
msgstr "Overgenomen Tijd"

#: 05.7-Thread-Synchronisation.md:14
msgid ""
"As we discussed earlier, new threads created with `in_thread` inherit all of "
"the settings from the parent thread. This includes the current time. This "
"means that threads are always in time with each other when started "
"simultaneously."
msgstr ""
"Zoals we eerder hebben besproken, erven nieuwe threads gemaakt met "
"`in_thread` alle instellingen van de bovenliggende thread. Dus ook de "
"huidige tijd. Dit betekent dat de threads altijd synchroon met elkaar zijn "
"als zij tegelijkertijd zijn gestart."

#: 05.7-Thread-Synchronisation.md:19
msgid ""
"However, when you start a thread on its own it starts with its own time "
"which is unlikely to be in sync with any of the other currently running "
"threads."
msgstr ""
"Wanneer je een thread op zich start, begint het met zijn eigen klok die "
"waarschijnlijk niet in sync is met een van de andere actieve threads."

#: 05.7-Thread-Synchronisation.md:23
msgid "Cue and Sync"
msgstr "Cue en Sync"

#: 05.7-Thread-Synchronisation.md:25
msgid ""
"Sonic Pi provides a solution to this problem with the functions `cue` and "
"`sync`."
msgstr ""
"Sonic Pi biedt een oplossing voor dit probleem met de functies 'cue' en "
"'sync'."

#: 05.7-Thread-Synchronisation.md:28
msgid ""
"`cue` allows us to send out heartbeat messages to all other threads. By "
"default the other threads aren't interested and ignore these heartbeat "
"messages. However, you can easily register interest with the `sync` function."
msgstr ""
"'cue' laat ons toe, hartslag-berichten te sturen aan alle andere threads. "
"Standaard zijn de andere threads niet geïnteresseerd in deze, en negeren "
"deze hartslag-berichten. Je kan hun aandacht wel vragen met de functie "
"'sync'."

#: 05.7-Thread-Synchronisation.md:33
msgid ""
"The important thing to be aware of is that `sync` is similar to `sleep` in "
"that it stops the current thread from doing anything for a period of time. "
"However, with `sleep` you specify how long you want to wait while with "
"`sync` you don't know how long you will wait - as `sync` waits for the next "
"`cue` from another thread which may be soon or a long time away."
msgstr ""
"Het belangrijkst om weten is dat 'sync' vergelijkbaar is met `sleep` in die "
"zin dat het de huidige thread stopt  voor een periode van tijd om om actief "
"te zijn. Met `sleep` geef je echter aan hoe lang je wilt wachten terwijl je "
"met 'sync' niet weet hoe lang je zal wachten -  als 'sync' op de volgende "
"'cue' van een andere thread wacht die lang of kort kan wegblijven."

#: 05.7-Thread-Synchronisation.md:40
msgid "Let's explore this in a little more detail:"
msgstr "Laten we dit in detail bekijken:"

#: 05.7-Thread-Synchronisation.md:42
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:58
msgid ""
"Here we have two threads - one acting like a metronome, not playing any "
"sounds but sending out `:tick` heartbeat messages every beat. The second "
"thread is synchronising on `tick` messages and when it receives one it "
"inherits the time of the `cue` thread and continues running."
msgstr ""
"Hier hebben we twee threads - één gedraagt zich als metronoom, zonder geluid "
"te maken en zend elke maat enkel `:tick` hartslag-berichten uit. De tweede "
"thread synchroniseerd op `tick` berichten en wanneer deze er één ontvangt, "
"erft hij de `cue` tijd thread en blijft lopen."

#: 05.7-Thread-Synchronisation.md:63
msgid ""
"As a result, we will hear the `:drum_heavy_kick` sample exactly when the "
"other thread sends the `:tick` message, even if the two threads didn't start "
"their execution at the same time:"
msgstr ""
"Als gevolg zullen wij de ': drum_heavy_kick' sample horen, precies op het "
"moment dat de andere thread het `:tick` bericht uitzend, zelfs als de twee "
"threads niet met de uitvoering ervan op hetzelfde moment beginnen:"

#: 05.7-Thread-Synchronisation.md:67
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:85
msgid ""
"That naughty `sleep` call would typically make the second thread out of "
"phase with the first. However, as we're using `cue` and `sync`, we "
"automatically sync the threads bypassing any accidental timing offsets."
msgstr ""
"Die ondeugende `sleep` aanroep zou doorgaans de tweede thread uit fase laten "
"lopen met de éérste. Als we echter `cue` en `sync` gebruiken, synchroniseren "
"we automatisch alle lopende threads die toevallige verschuivingen in timing "
"omzeilen."

#: 05.7-Thread-Synchronisation.md:90
msgid "Cue Names"
msgstr "Cue Namen"

#: 05.7-Thread-Synchronisation.md:92
msgid ""
"You are free to use whatever name you'd like for your `cue` messages - not "
"just `:tick`. You just need to ensure that any other threads are `sync`ing "
"on the correct name - otherwise they'll be waiting for ever (or at least "
"until you press the Stop button)."
msgstr ""
"Je mag eender welke naam gebruiken voor jouw `cue` berichten, niet enkel "
"`:tick`. Je hoeft er alleen voor de zorgen dat alle threads op de correcte "
"naam `sync`-en, anders gaan ze voor eeuwig wachten (of tot je op de "
"stopknopstop klikt tenminste)."

#: 05.7-Thread-Synchronisation.md:97
msgid "Let's play with a few `cue` names:"
msgstr "Laten we met en paar `cue` namen spelen:"

#: 05.7-Thread-Synchronisation.md:99
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do \n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do \n"
"    sync :foo \n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do \n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do \n"
"    sync :foo \n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:129
msgid ""
"Here we have a main `cue` loop which is randomly sending one of the "
"heartbeat names `:foo`, `:bar` or `:baz`. We then also have three loop "
"threads syncing on each of those names independently and then playing a "
"different sample. The net effect is that we hear a sound every 0.5 beats as "
"each of the `sync` threads is randomly synced with the `cue` thread and "
"plays its sample."
msgstr ""
"Hier hebben we een hoofd  `cue` loop die random de heartbeat namen `:foo`, "
"`:bar` or `:baz`uitzend. We hebben ook drie loop threads die elk "
"onafhankelijk op één van die namen synct en daarbij een verschillende sample "
"afspeeld. Het netto effect is dat we elke 0.5 beat een klank horen als wordt "
"elk van deze 0.5 `sync` threads random ge-synct wordt met de `cue` thread en "
"zijn sample speelt."

#: 05.7-Thread-Synchronisation.md:136
msgid ""
"This of course also works if you order the threads in reverse as the `sync` "
"threads will simply sit and wait for the next `cue`."
msgstr ""
"Dit werkt natuurlijk ook als jen de threads omgekeerd ordend omdat de`sync` "
"threads gewoon op de volgende `cue` zitten wachten."

#: 06-FX.md:1
msgid "6 FX"
msgstr "6 FX"

#: 06-FX.md:3
msgid "Studio FX"
msgstr "Studio FX"

#: 06-FX.md:5
msgid ""
"One of the most rewarding and fun aspects of Sonic Pi is the ability to "
"easily add studio effects to your sounds. For example, you may wish to add "
"some reverb to parts of your piece, or some echo or perhaps even distort or "
"wobble your basslines."
msgstr ""
"Een van de meest lonende en leuke aspecten van Sonic Pi is de mogelijkheid "
"om gemakkelijk  studio-effecten aan uw geluiden toe te voegen . "
"Bijvoorbeeld, op sommige delen van je muziekstuk een reverb toevoegen, of "
"wat echo of misschien zelfs distortion op je  wobbelende basslijnen."

#: 06-FX.md:10
msgid ""
"Sonic Pi provides a very simple yet powerful way of adding FX. It even "
"allows you to chain them (so you can pass your sounds through distortion, "
"then echo and then reverb) and also control each individual FX unit with "
"opts (in a similar way to giving params to synths and samples). You can even "
"modify the opts of the FX whilst it's still running. So, for example, you "
"could increase the reverb on your bass throughout the track..."
msgstr ""
"Sonic Pi biedt een erg simpele, doch krachtige manier om effecten toe te "
"voegen. Je kan deze zelfs in een ketting aan elkaar schakelen (dus kan je je "
"klanken doogeven via distortion, dan echo-delay en dan reverb) en de effect-"
"modules apart besturen (op een vergelijkbare manier dat je dat met de "
"parameters van een synth of sampler zou doen). Je kan zelfs de opties "
"modifiëren terwijl deze nog steeds loopt. Dus, bijvoorbeeld, je zou de "
"reverb op je bas kunnen verhogen terwijl de track loopt..."

#: 06-FX.md:18
msgid "Guitar Pedals"
msgstr "Gitaar Pedalen"

#: 06-FX.md:20
msgid ""
"If all of this sounds a bit complicated, don't worry. Once you play around "
"with it a little, it will all become quite clear. Before you do though, a "
"simple analogy is that of guitar FX pedals. There are many kinds of FX "
"pedals you can buy. Some add reverb, others distort etc. A guitarist will "
"plug his or her guitar into one FX pedal - i.e. distortion -, then take "
"another cable and connect (chain) a reverb pedal. The output of the reverb "
"pedal can then be plugged into the amplifier:"
msgstr ""
"Als dit allemaal een beetje ingewikkeld klinkt, maak je geen zorgen. Eens je "
"hiermee een beetje speelt, zal het allemaal duidelijk worden. Maar voor je "
"eraan begint, moet je weten dat het een werkt zoals bij gitaar effecten "
"pedalen. Er zijn verschillende effect-pedalen te koop. Sommigen voegen een "
"reverb-klank toe, andere distortion enz. Een gitarist zal zij of haar gitaar "
"in één van de effect-pedalen pluggen, bv. distortion, en zal dan bvb een "
"reverb effect in de uitgang van de eerste pedaal pluggen om het geluid door "
"te schakelen (chain=ketting). De uitgang van de reverb-pedaal kan dan in de "
"versterker geplugt worden:"

#: 06-FX.md:29
#, no-wrap
msgid "Guitar -> Distortion -> Reverb -> Amplifier"
msgstr "Gitaar -> Distortion -> Reverb -> Amplifier (Versterker)"

#: 06-FX.md:33
msgid ""
"This is called FX chaining. Sonic Pi supports exactly this. Additionally, "
"each pedal often has dials and sliders to allow you to control how much "
"distortion, reverb, echo etc. to apply. Sonic Pi also supports this kind of "
"control. Finally, you can imagine a guitarist playing whilst someone plays "
"with the FX controls whilst they're playing. Sonic Pi also supports this - "
"but instead of needing someone else to control things for you, that's where "
"the computer steps in."
msgstr ""
"Dit heet FX chaining. Sonic Pi ondersteunt precies dit. Bovendien heeft elke "
"pedaal vaak wijzerplaten en schuifregelaars zodat je kan bepalen hoeveel "
"distortion, reverb, echo enz je kan toepassen. Sonic Pi ondersteunt ook dit "
"soort controle. Tot slot kan je je bvb gitaristen voorstellen en dat iemand "
"anders  met de FX-besturingselementen speelt, terwijl zij aan het spelen "
"zijn. Sonic Pi ondersteunt dit ook- maar in plaats van dat iemand anders  "
"dingen voor jou controleert, doet de computer dit."

#: 06-FX.md:42
msgid "Let's explore FX!"
msgstr "Laten we FX verkennen!"

#: 06.1-Adding-FX.md:1
msgid "6.1 Adding FX"
msgstr "6.1 FX  Toevoegen"

#: 06.1-Adding-FX.md:3
msgid "Adding FX"
msgstr "FX  Toevoegen"

#: 06.1-Adding-FX.md:5
msgid ""
"In this section we'll look at a couple of FX: reverb and echo. We'll see how "
"to use them, how to control their opts and how to chain them."
msgstr ""
"In deze sectie zullen we naar een paar Effecten kijken : reverb en echo. We "
"zullen zien hoe ze te gebruiken, hoe hun opts te besturen en hoe ze te "
"chainen."

#: 06.1-Adding-FX.md:9
msgid ""
"Sonic Pi's FX system uses blocks. So if you haven't read section 5.1 you "
"might want to take a quick look and then head back."
msgstr ""
"Sonic Pi's FX systeem maakt gebruik van blokken. Dus als je die niet hebt "
"gelezen in sectie 5.1 Kan je hier snel naar kijken en kom dan naar hier "
"terug."

#: 06.1-Adding-FX.md:12
msgid "Reverb"
msgstr "Reverb"

#: 06.1-Adding-FX.md:14
msgid ""
"If we want to use reverb we write `with_fx :reverb` as the special code to "
"our block like this:"
msgstr ""
"Als we reverb willen gebruiken schrijven we `with_fx :reverb` als speciale "
"code naar ons blok als volgt:"

#: 06.1-Adding-FX.md:17
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:27
msgid ""
"Now play this code and you'll hear it played with reverb. It sounds good, "
"doesn't it! Everything sounds pretty nice with reverb."
msgstr ""
"Speel deze code nu en hoor dat deze met reverb wordt gespeeld. Dat klinkt "
"goed, niet?Alles klinkt vrij aardig met een reverb."

#: 06.1-Adding-FX.md:30
msgid "Now let's look what happens if we have code outside the do/end block:"
msgstr ""
"Laten we nu kijken wat er gebeurt als we buiten het do/end blok code hebben:"

#: 06.1-Adding-FX.md:32
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:45
msgid ""
"Notice how the final `play 55` isn't played with reverb. This is because it "
"is *outside* the do/end block, so it isn't captured by the reverb FX."
msgstr ""
"Merk op hoe de laatste `play 55` niet met reverb gespeeld wordt. Dit is "
"omdat het *buiten* het do/end blok staat, en dus niet door de reverb FX "
"gecapteerd kan worden."

#: 06.1-Adding-FX.md:48
msgid ""
"Similarly, if you make sounds before the do/end block, they also won't be "
"captured:"
msgstr ""
"Op dezelfde manier zullen klanken vòòr het do/end blok ook niet gecapteerd "
"worden:"

#: 06.1-Adding-FX.md:51
#, no-wrap
msgid ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:67
msgid "Echo"
msgstr "Echo"

#: 06.1-Adding-FX.md:69
msgid "There are many FX to choose from. How about some echo?"
msgstr "Er zijn veel effecten te kiezen. Wat dacht je van wat echo?"

#: 06.1-Adding-FX.md:71
#, no-wrap
msgid ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:81
msgid ""
"One of the powerful aspects of Sonic Pi's FX blocks is that they may be "
"passed opts similar to opts we've already seen with `play` and `sample`. For "
"example a fun echo opt to play with is `phase:` which represents the "
"duration of a given echo in beats. Let's make the echo slower:"
msgstr ""
"Één van de sterke punten van Sonic Pi's FX blokken is dat je er opties aan "
"kunt meegeven, vergelijkbaar met de opts die we al met `play` en `sample` "
"hebben gezien. Een plezante echo opt om mee te spelen is `phase:` die de "
"duurtijd van een echo in tellen (Beats) weergeeft. Laat ons even de echo "
"vertragen:"

#: 06.1-Adding-FX.md:87
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:97
msgid "Let's also make the echo faster:"
msgstr "Laten we de echo sneller maken:"

#: 06.1-Adding-FX.md:99
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:109
msgid ""
"Let's make the echo take longer to fade away by setting the `decay:` time to "
"8 beats:"
msgstr ""
"Laat ons de echo over een langere tijd uitfaden door de `decay:` tijd in te "
"stellen naar 8 beats:"

#: 06.1-Adding-FX.md:112
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:122
msgid "Nesting FX"
msgstr "Effecten nesten"

#: 06.1-Adding-FX.md:124
msgid ""
"One of the most powerful aspects of the FX blocks is that you can nest them. "
"This allows you to very easily chain FX together. For example, what if you "
"wanted to play some code with echo and then with reverb? Easy, just put one "
"inside the other:"
msgstr ""
"Een van de krachtigste aspecten van de FX-blokken is dat u hen kunt nesten. "
"Hierdoor kan je heel gemakkelijk een FX keten samenstellen. Bijvoorbeeld, "
"wat als je wat code met echo  wilde spelen en vervolgens met een reverb? "
"Gemakkelijk, zet de één gewoon in de andere:"

#: 06.1-Adding-FX.md:129
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"

#: 06.1-Adding-FX.md:141
msgid ""
"Think about the audio flowing from the inside out. The sound of all the code "
"within the inner do/end block such as `play 50` is first sent to the echo FX "
"and the sound of the echo FX is in turn sent out to the reverb FX."
msgstr ""
"Denk aan de audio als zou deze van binnenuit stromen. Het geluid van alle "
"code binnen het binnenste do/end blok zoals 'play 50' wordt eerst verzonden "
"naar de echo FX en het geluid van de echo FX wordt op zijn beurt verstuurd "
"naar de reverb FX."

#: 06.1-Adding-FX.md:146
msgid ""
"We may use very deep nestings for crazy results. However, be warned, the FX "
"can use a lot of resources and when you nest them you're effectively running "
"multiple FX simultaneously. So be sparing with your use of FX especially on "
"low powered platforms such as the Raspberry Pi."
msgstr ""
"We kunnen heel diep nesten en deze gebruiken voor maffe resultaten. Maar "
"wees hierbij gewaarschuwd, want de FX kunnen veel cpu gebruiken wanneer u "
"effectief meerdere effecten nest die gelijktijdig worden uitgevoerd. Wees "
"dus spaarzaam op uw gebruik van effecten zeker op laag aangedreven platforms "
"zoals  Raspberry Pi."

#: 06.1-Adding-FX.md:151
msgid "Discovering FX"
msgstr "Effecten ontdekken"

#: 06.1-Adding-FX.md:153
msgid ""
"Sonic Pi ships with a large number of FX for you to play with. To find out "
"which ones are available, click on FX in the far left of this help system "
"and you'll see a list of available options. Here's a list of some of my "
"favourites:"
msgstr ""
"Sonic Pi wordt  met een groot aantal effecten geleverd om mee te spelen. Als "
"j wil weten welke er beschikbaar zijn, klik op FX in het linkeruiteinde van "
"het help-systeem en je zal een lijst van beschikbare opties zien. Hier is "
"een lijst van enkele van mijn favorieten:"

#: 06.1-Adding-FX.md:158
msgid "wobble,"
msgstr "wobble,"

#: 06.1-Adding-FX.md:159
msgid "reverb,"
msgstr "reverb,"

#: 06.1-Adding-FX.md:160
msgid "echo,"
msgstr "echo,"

#: 06.1-Adding-FX.md:161
msgid "distortion,"
msgstr "distortion,"

#: 06.1-Adding-FX.md:162
msgid "slicer"
msgstr "slicer"

#: 06.1-Adding-FX.md:164
msgid "Now go crazy and add FX everywhere for some amazing new sounds!"
msgstr ""
"Doe nu maar eens goed gek en zet overal effecten op voor wat "
"verbazingwekkende nieuwe geluiden!"

#: 06.2-FX-in-Practice.md:1
msgid "6.2 FX in Practice"
msgstr "6.2 FX in de praktijk"

#: 06.2-FX-in-Practice.md:3
msgid "FX in Practice"
msgstr "FX in de praktijk"

#: 06.2-FX-in-Practice.md:5
msgid ""
"Although they look deceptively simple on the outside, FX are actually quite "
"complex beasts internally. Their simplicity often entices people to overuse "
"them in their pieces. This may be fine if you have a powerful machine, but "
"if - like me - you use a Raspberry Pi to jam with, you need to be careful "
"about how much work you ask it to do if you want to ensure the beats keep "
"flowing."
msgstr ""
"Hoewel ze eenvoudig aan de buitenkant lijken, zijn effecten best complexe "
"beesten intern. Hun eenvoud verleid mensen ertoe ze te gaan overgebruiken. "
"Dit kan goed gaan op een krachtige machine, maar als je zoals ik een "
"Raspberry Pi gebruikt om mee te jammen, met je voorzichtig zijn met de "
"gevraagde werkkracht als je zeker wil zijn van een goede flow van jouw beats."

#: 06.2-FX-in-Practice.md:12
msgid "Consider this code:"
msgstr "Bekijk even deze code:"

#: 06.2-FX-in-Practice.md:14
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:23
msgid ""
"In this code we're playing note 60 with a very short release time, so it's a "
"short note. We also want reverb so we've wrapped it in a reverb block. All "
"good so far. Except..."
msgstr ""
"In deze code spelen we noot 60 met een zeer korte release tijd, dus een "
"korte noot. We willen ook reverb, dus hebben we die in een reverb blok "
"gewikkeld. Dat gaat goed. Behalve..."

#: 06.2-FX-in-Practice.md:27
msgid ""
"Let's look at what the code does. First we have a `loop` which means "
"everything inside of it is repeated forever. Next we have a `with_fx` block. "
"This means we will create a new reverb FX *every time we loop*. This is like "
"having a separate FX reverb pedal for every time you pluck a string on a "
"guitar. It's cool that you can do this, but it's not always what you want. "
"For example, this code will struggle to run nicely on a Raspberry Pi. All "
"the work of creating the reverb and then waiting until it needs to be "
"stopped and removed is all handled by `with_fx` for you, but this takes CPU "
"power which may be precious."
msgstr ""
"Laten we eens kijken wat de code doet. Vooraleerst hebben we een `loop` wat "
"betekent dat al wat hierin zit voor eeuwig wordt herhaald. Vervolgens hebben "
"we een `with_fx` blok. Dit betekent dat we een nieuwe reverb FX zullen "
"creëren *elke keer de loop opnieuw aan zijn beginpositie komt *. Dit is "
"alsof we een extra FX reverb pedaal zouden bijkrijgen, elke keer dat je aan "
"een snaar van een gitaar plukt. Het is wel cool dat je dit kunt doen, maar "
"het is niet altijd wat je wilt. Deze code zal bijvoorbeeld moeite hebben "
"mooi te draaien op een Raspberry Pi. Want al het werk om de reverb te "
"vormen, en het wachten naar het moment dat deze moet stoppen en weer "
"weggedaan moet worden wordt allemaal voor jou gedaan door de `with_fx`, maar "
"dat vraagt CPU kracht die kostbaar kan zijn."

#: 06.2-FX-in-Practice.md:37
msgid ""
"How do we make it more similar to a traditional setup where our guitarist "
"has just *one* reverb pedal which all sounds pass through? Simple:"
msgstr ""
"Hoe maken we deze meer vergelijkbaar met een traditionele opstelling waar "
"onze gitarist slechts *één* reverb-pedaal heeft waardoor alle klanken "
"passeren? Eenvoudig:"

#: 06.2-FX-in-Practice.md:41
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:50
msgid ""
"We put our loop *inside* the `with_fx` block. This way we only create a "
"single reverb for all notes played in our loop. This code is a lot more "
"efficient and would work fine on a Raspberry Pi."
msgstr ""
"We zetten onze loop *binnen* het blok 'with_fx'. Op deze manier maken wij "
"slechts een enkele reverb voor alle noten die gespeeld worden in onze loop. "
"Deze code is een stuk efficiënter en zou prima werken op een Raspberry Pi."

#: 06.2-FX-in-Practice.md:54
msgid "A compromise is to use `with_fx` over an iteration within a loop:"
msgstr ""
"Een compromis is het gebruik van 'with_fx' buiten van de herhaling binnen "
"een loop:"

#: 06.2-FX-in-Practice.md:56
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:67
msgid ""
"This way we've lifted the `with_fx` out of the inner part of the `loop` and "
"we're now creating a new reverb every 16 notes."
msgstr ""
"Op deze manier hebben we de 'with_fx'  uit het binnenste deel van de `loop` "
"gehaald en nu creëren we  een nieuwe reverb elke 16 noten."

#: 06.2-FX-in-Practice.md:70
msgid ""
"This is such a common pattern that `with_fx` supports an opt to do exactly "
"this but without having to write the `16.times` block:"
msgstr ""
"Deze situatie gaat in ons werk zo dikwijls terugkeren dat `with_fx` deze met "
"een opt ondersteunt die dat zelf doet zonder de `16.times` blok te hoeven "
"schrijven:"

#: 06.2-FX-in-Practice.md:73
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:82
msgid ""
"Both the `reps: 16` and `16.times do` examples will behave identically. The "
"`reps: 16` essentially repeats the code in the `do/end` block 16 times so "
"you can use them both interchangeably and choose the one that feels best for "
"you."
msgstr ""
"In de voorbeelden van `reps 16` en `16.times do` zullen zich beiden identiek "
"gedragen. De `reps: 16` herhalen in wezen de code in het `do/end` blok 16 "
"keer zodat u hen beide door elkaar kunt gebruiken en je kies gewoon de "
"manier die voor jou het beste voelt."

#: 06.2-FX-in-Practice.md:87
msgid ""
"Remember, there are no mistakes, just possibilities. However, some of these "
"approaches will have a different sound and also different performance "
"characteristics. So play around and use the approach that sounds best to you "
"whilst also working within the performance constraints of your platform."
msgstr ""
"Onthou, er zijn geen misstappen, enkel mogelijkheden. Echter, sommige "
"benaderingen zullen een andere klank of een ander performant karakter "
"hebben. Dus speel een beetje met deze verschillende benaderingen en gebruik "
"diegene het best bij jou past en die het best samengaan met de beperkingen "
"van de prestaties van het platform dat je gebruikt."

#: 07-Control.md:1
msgid "7 Control"
msgstr "7 Controle"

#: 07-Control.md:3
msgid "Controlling running sounds"
msgstr "De controle over lopende klank"

#: 07-Control.md:5
msgid ""
"So far we've looked at how you can trigger synths and samples, and also how "
"to change their default opts such as amplitude, pan, envelope settings and "
"more. Each sound triggered is essentially its own sound with its own list of "
"options set for the duration of the sound."
msgstr ""
"Tot nu toe hebben we gekeken hoe je synths en samples kunt activeren, en ook "
"hun standaard opties zoals amplitude, pan, envelop-instellingen en meer te "
"wijzigen. Elk geactiveerd geluid is wezenlijk haar eigen geluid, met een "
"eigen lijst van opties ingesteld voor de duur van de klank."

#: 07-Control.md:11
msgid ""
"Wouldn't it also be cool if you could change a sound's opts whilst it's "
"still playing, just like you might bend a string of a guitar whilst it's "
"still vibrating?"
msgstr ""
"Zou het ook niet gaaf zijn dat als je dit geluid zou kunnen veranderen "
"terwijl het nog steeds speelt, zoals je misschien een snaar van een gitaar "
"zou buigen terwijl deze nog trilt?"

#: 07-Control.md:15
msgid "You're in luck - this section will show you how to do exactly this."
msgstr "Je hebt geluk- deze sectie gaat precies daarover."

#: 07.1-Controlling-Running-Synths.md:1
msgid "7.1 Controlling Running Synths"
msgstr "7.1 De controle over lopende Synths"

#: 07.1-Controlling-Running-Synths.md:3
msgid "Controlling Running Synths"
msgstr "Lopende Synths Contoleren"

#: 07.1-Controlling-Running-Synths.md:5
msgid ""
"So far we've only concerned ourselves with triggering new sounds and FX. "
"However, Sonic Pi gives us the ability to manipulate and control currently "
"running sounds. We do this by using a variable to capture a reference to a "
"synth:"
msgstr ""
"Tot nu toe hebben we onszelf alleen bezig gehouden met de triggering van "
"nieuwe drumklanken en FX. Sonic Pi geeft ons echter de mogelijkheid op het "
"manipuleren en controleren van de momenteel lopende klanken. We doen dit "
"door middel van een variabele die een verwijzing naar een synthesizer "
"opvangt:"

#: 07.1-Controlling-Running-Synths.md:10
#, no-wrap
msgid "s = play 60, release: 5"
msgstr "s = play 60, release: 5"

#: 07.1-Controlling-Running-Synths.md:14
msgid ""
"Here, we have a run-local variable `s` which represents the synth playing "
"note 60. Note that this is *run-local* - you can't access it from other runs "
"like functions."
msgstr ""
"Hier hebben we de variabele van een run-local waarmee de synth noot 60 "
"speelt. Merk op dat dit een *run-local* is - je kan geen toegang   hebben "
"tot deze vanaf een andere uitvoering zoals bij functies."

#: 07.1-Controlling-Running-Synths.md:18
msgid ""
"Once we have `s`, we can start controlling it via the `control` function:"
msgstr ""
"Eens we  `s` hebben, kunnen we deze beginnen tweaken via de `control` "
"functie:"

#: 07.1-Controlling-Running-Synths.md:21 07.3-Sliding-Parameters.md:13
#, no-wrap
msgid ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.1-Controlling-Running-Synths.md:31
msgid ""
"The thing to notice is that we're not triggering 4 different synths here - "
"we're just triggering one synth and then change the pitch 3 times "
"afterwards, while it's playing."
msgstr ""
"Wat je bij deze moet opmerken is dat wij hier geen 4 verschillende synths "
"triggeren - maar slechts één synth triggeren om dan de toonhoogte 3 keer te "
"wijzigen achteraf, terwijl deze wordt afgespeeld."

#: 07.1-Controlling-Running-Synths.md:35
msgid ""
"We can pass any of the standard opts to `control`, so you can control things "
"like `amp:`, `cutoff:` or `pan:`."
msgstr ""
"We kunnen iedere standaard opt doorgeven om `controle` over te hebben, zodat "
"je `amp:`, `cutoff:` or `pan:´ kan controllen."

#: 07.1-Controlling-Running-Synths.md:38
msgid "Non-controllable Options"
msgstr "Niet-Control-bare Opties"

#: 07.1-Controlling-Running-Synths.md:40
msgid ""
"Some of the opts can't be controlled once the synth has started. This is the "
"case for all the ADSR envelope parameters. You can find out which opts are "
"controllable by looking at their documentation in the help system. If the "
"documentation says *Can not be changed once set*, you know it's not possible "
"to control the opt after the synth has started."
msgstr ""
"Sommige opts kunnen niet gecontrold worden eens de synth gestart is. Dis is "
"het geval voor alle ADSR envelop parameters. Je kan uitzoeken welke opts "
"gecontrold kunnen worden door naar hun documentie te kijken in het hulp "
"systeem. Als de de documentatie zegt *Can not be changed once set*, dan weet "
"je dat het niet mogelijk is om de opt te controllen als de synth al loopt."

#: 07.2-Controlling-FX.md:1
msgid "7.2 Controlling FX"
msgstr "7.2 FX Controllen"

#: 07.2-Controlling-FX.md:3
msgid "Controlling FX"
msgstr "FX Controllen"

#: 07.2-Controlling-FX.md:5
msgid ""
"It is also possible to control FX, although this is achieved in a slightly "
"different way:"
msgstr ""
"Het is ook mogelijk om FX te controllen, hoewel dit op een iets andere "
"manier wordt bereikt:"

#: 07.2-Controlling-FX.md:8
#, no-wrap
msgid ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"

#: 07.2-Controlling-FX.md:21
msgid ""
"Instead of using a variable, we use the goalpost parameters of the do/end "
"block. Inside the `|` bars, we need to specify a unique name for our running "
"FX which we then reference from the containing do/end block. This behaviour "
"is identical to using parameterised functions."
msgstr ""
"In plaats van een variabele, gebruiken we de sluisteken parameters van het "
"do/end blok. Binnen de  `|` staafjes , moeten we een unieke naam voor onze "
"lopende FX opgeven die we vervolgens verwijzen vanuit het  do/end blok. Dit "
"gedrag is identiek aan het gebruik van geparametriseerde functies."

#: 07.2-Controlling-FX.md:26
msgid "Now go and control some synths and FX!"
msgstr "Ga nu enkele synths en FX Controllen !"

#: 07.3-Sliding-Parameters.md:1
msgid "7.3 Sliding Options"
msgstr "7.3 Glijdende Opties"

#: 07.3-Sliding-Parameters.md:3
msgid "Sliding Opts"
msgstr "Glijdende Opties"

#: 07.3-Sliding-Parameters.md:5
msgid ""
"Whilst exploring the synth and FX opts, you might have noticed that there "
"are a number of opts ending with `_slide`. You might have even tried calling "
"them and seeing no effect. This is because they're not normal parameters, "
"they're special opts that only work when you control synths as introduced in "
"the previous section."
msgstr ""
"Tijdens het verkennen van de synth en FX opties is het je misschien "
"opgevallen dat er een aantal opts zijn die eindigen op `_slide`. Je hebt "
"deze misschien ook proberen oproepen en daarmee opgemerkt dat zij geen "
"effect hebben. Dat is omdat zij geen normale parameters zijn, het zijn "
"speciale opts die enkel werken wanneer je synths controlt zoals beschreven "
"in de voorgaande sectie."

#: 07.3-Sliding-Parameters.md:11
msgid "Consider the following example:"
msgstr "Beschouw het volgende voorbeeld:"

#: 07.3-Sliding-Parameters.md:23
msgid ""
"Here, you can hear the synth pitch changing immediately on each `control` "
"call. However, we might want the pitch to slide between changes. As we're "
"controlling the `note:` parameter, to add slide, we need to set the "
"`note_slide` parameter of the synth:"
msgstr ""
"Hier hoor je de toonhoogte van de synth onmiddellijk wijzigen op elke "
"`control` appèl  . Wij willen echter dat de toonhoogte slide (glijdt) tussen "
"de veranderingen. Vermits we de `note:` parameter controllen, om slide toe "
"te voegen, moeten we de parameter 'note_slide' van de synth instellen:"

#: 07.3-Sliding-Parameters.md:28
#, no-wrap
msgid ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.3-Sliding-Parameters.md:38
msgid ""
"Now we hear the notes being bent between the `control` calls. It sounds "
"nice, doesn't it? You can speed up the slide by using a shorter time such as "
"`note_slide: 0.2` or slow it down by using a longer slide time."
msgstr ""
"Nu horen we de de noten buigen tussen de `control`aanroep. Dat klinkt "
"lekker, niet? Je kan de slide versnellen door een kortere tijd te gebruiken "
"zoals `note_slide: 0.2` of vertragen door een langere slide time in te "
"stellen."

#: 07.3-Sliding-Parameters.md:43
msgid ""
"Every parameter that can be controlled has a corresponding `_slide` "
"parameter for you to play with."
msgstr ""
"Elke parameter die controlt kan worden heeft een identieke parameter "
"'_slide' voor jou om mee te spelen."

#: 07.3-Sliding-Parameters.md:46
msgid "Sliding is sticky"
msgstr "Slide-en blijft plakken"

#: 07.3-Sliding-Parameters.md:48
msgid ""
"Once you've set a `_slide` parameter on a running synth, it will be "
"remembered and used every time you slide the corresponding parameter. To "
"stop sliding you must set the `_slide` value to 0 before the next `control` "
"call."
msgstr ""
"Zodra u hebt een parameter '_slide' ingesteld op een lopende synth, zal het "
"worden onthoudenen telkens wanneer u de bijbehorende parameter slide "
"gebruikt . Als je de slide wilt stoppen moet je de waarde '_slide' op 0 "
"instellen voor de volgende oproep van `control`."

#: 07.3-Sliding-Parameters.md:53
msgid "Sliding FX Opts"
msgstr "Sliding FX Opts"

#: 07.3-Sliding-Parameters.md:55
msgid "It is also possible to slide FX opts:"
msgstr "Het is ook mogelijk FX opts te slide-en:"

#: 07.3-Sliding-Parameters.md:57
#, no-wrap
msgid ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"
msgstr ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"

#: 07.3-Sliding-Parameters.md:65
msgid ""
"Now have fun sliding things around for smooth transitions and flowing "
"control..."
msgstr ""
"Veel plezier met het rond slide-en van zaken voor een vloeiende overgang en "
"een vlotte control..."

#: 08-Data-Structures.md:1
msgid "8 Data Structures"
msgstr "8 Datastructuren"

#: 08-Data-Structures.md:3
msgid "Data Structures"
msgstr "Datastructuren"

#: 08-Data-Structures.md:5
msgid "A very useful tool in a programmer's toolkit is a data structure."
msgstr ""
"Een zeer nuttig hulpmiddel in de gereedschapskist van een programmeur is een "
"datastructuur."

#: 08-Data-Structures.md:7
msgid ""
"Sometimes you may wish to represent and use more than one thing. For "
"example, you may find it useful to have a series of notes to play one after "
"another. Programming languages have data structures to allow you do exactly "
"this."
msgstr ""
"Soms wil je meer dan één ding kunnen representeren en gebruiken. Zo kan je "
"het bijvoorbeeld op en moment nodig vinden om een serie noten achter elkaar "
"te spelen,de één na de andere. Programmeertalen hebben datastructuren die "
"jou dit toelaten."

#: 08-Data-Structures.md:12
msgid ""
"There are many exciting and exotic data structures available to programmers "
"- and people are always inventing new ones. However, for now we only really "
"need to consider a very simple data structure - the list."
msgstr ""
"Er zijn vele spannende en exotische gegevensstructuren beschikbaar voor "
"programmeurs - en veel mensen zijn nog altijd bezig met het uitvinden van "
"nieuwe. Maar momenteel gaan we enkel een zeer eenvoudige gegevensstructuur "
"beschouwen- de lijst."

#: 08-Data-Structures.md:16
msgid ""
"Let's look at it in more detail. We'll cover its basic form and then also "
"how lists can be used to represent scales and chords."
msgstr ""
"Laten we dit eens in detail bekijken. We zullen zijn basisvorm behandelen en "
"ook hoe lijsten kunnen worden gebruikt voor toonladders en akkoorden."

#: 08.1-Lists.md:1
msgid "8.1 Lists"
msgstr "8.1 Lijsten"

#: 08.1-Lists.md:3
msgid "Lists"
msgstr "Lijsten"

#: 08.1-Lists.md:5
msgid ""
"In this section we'll take a look at a data structure which is very useful - "
"the list. We met it very briefly before in the section on randomisation when "
"we randomly chose from a list of notes to play:"
msgstr ""
"In deze sectie zullen we een kijkje nemen naar een datastructuur die zeer "
"nuttig kan zijn - de lijst. We hebben dit al kort gezien in het gedeelte "
"over randomiseren, wanneer we willekeurig uit een lijst van noten kiezen om "
"te spelen:"

#: 08.1-Lists.md:9
#, no-wrap
msgid "play choose([50, 55, 62])"
msgstr "play choose([50, 55, 62])"

#: 08.1-Lists.md:13
msgid ""
"In this section we'll explore using lists to also represent chords and "
"scales. First let's recap how we might play a chord. Remember that if we "
"don't use `sleep`, sounds all happen at the same time:"
msgstr ""
"In deze sectie verkennen we om ook akkoorden en toonladders door lijsten te "
"laten vertegenwoordigen. Eerste recapituleren we even hoe we een snaar "
"kunnen bespelen. Denk eraan dat als we geen gebruik maken van `sleep` we "
"alle klanken tezelfdertijd horen :"

#: 08.1-Lists.md:17
#, no-wrap
msgid ""
"play 52\n"
"play 55\n"
"play 59"
msgstr ""
"play 52\n"
"play 55\n"
"play 59"

#: 08.1-Lists.md:23
msgid "Let's look at other ways to represent this code."
msgstr "Laten we eens kijken naar andere manieren om deze code weer te geven."

#: 08.1-Lists.md:25
msgid "Playing a List"
msgstr "Afspelen van een lijst"

#: 08.1-Lists.md:27
msgid ""
"One option is to place all the notes in a list: `[52, 55, 59]`. Our friendly "
"`play` function is smart enough to know how to play a list of notes. Try it:"
msgstr ""
"Een optie zou kunnen zijn om alle noten in een lijst te zeten `[52, 55, 59]`"
". Onze vriendschappelijke `play` functie is slim genoeg om een lijst van "
"noten te kunnen spelen. Probeer maar:"

#: 08.1-Lists.md:31
#, no-wrap
msgid "play [52, 55, 59]"
msgstr "play [52, 55, 59]"

#: 08.1-Lists.md:35
msgid ""
"Ooh, that's already nicer to read. Playing a list of notes doesn't stop you "
"from using any of the parameters as normal:"
msgstr ""
"Ooh, dat is al aangenamer om lezen. Een lijst met noten afspelen weerhoud je "
"niet om de gewoonlijke parameters te gaan gebruiken:"

#: 08.1-Lists.md:38
#, no-wrap
msgid "play [52, 55, 59], amp: 0.3"
msgstr "play [52, 55, 59], amp: 0.3"

#: 08.1-Lists.md:42
msgid ""
"Of course, you can also use the traditional note names instead of the MIDI "
"numbers:"
msgstr ""
"Natuurlijk kan je ook de traditionele benaming van de noten gebruiken ipv. "
"de MIDI nummers:"

#: 08.1-Lists.md:45
#, no-wrap
msgid "play [:E3, :G3, :B3]"
msgstr "play [:E3, :G3, :B3]"

#: 08.1-Lists.md:49
msgid ""
"Now those of you lucky enough to have studied some music theory might "
"recognise that chord as *E Minor* played in the 3rd octave."
msgstr ""
"De gelukkigen onder jullie die wat muziektheorie hebben geleerd, hebben het "
"akkoord *E Mineur* in het 3de octaaf herkend."

#: 08.1-Lists.md:52
msgid "Accessing a List"
msgstr "Toegang tot een lijst"

#: 08.1-Lists.md:54
msgid ""
"Another very useful feature of a list is the ability to get information out "
"of it. This may sound a bit strange, but it's no more complicated than "
"someone asking you to turn a book to page 23. With a list, you'd say, what's "
"the element at index 23? The only strange thing is that in programming "
"indexes usually start at 0 not 1."
msgstr ""
"Een andere zeer nuttige functie van een lijst is de mogelijkheid om er "
"informatie uit te krijgen. Dit klinkt misschien een beetje vreemd, maar het "
"is niet ingewikkelder dan iemand die jou vraagt een boek op pagina 23 open "
"te slaan. Bij een lijst, zou je kunnen zeggen: wat is het element op index "
"23? Het vreemde alleen is dat programmeer indexen meestal bij 0 beginnen en "
"niet 1."

#: 08.1-Lists.md:60
msgid "With list indexes we don't count 1, 2, 3... Instead we count 0, 1, 2..."
msgstr "Met lijst indexen tellen we niet 1,2,3... maar 0,1,2..."

#: 08.1-Lists.md:62
msgid "Let's look at this in a little more detail. Take a look at this list:"
msgstr ""
"Laten we dit een beetje meer in detail bekijken. Neem een kijkje naar deze "
"lijst:"

#: 08.1-Lists.md:64
#, no-wrap
msgid "[52, 55, 59]"
msgstr "[52, 55, 59]"

#: 08.1-Lists.md:68
msgid ""
"There's nothing especially scary about this. Now, what's the second element "
"in that list? Yes, of course, it's `55`. That was easy. Let's see if we can "
"get the computer to answer it for us too:"
msgstr ""
"Dit is niet onoverkomelijk. Wat is nu het tweede element in de lijst? Dat is "
"`55` natuurlijk ja. Dat was makkelijk. Laten we eens kijken of de computer "
"zover kunnen krijgen om dit voor ons te doen:"

#: 08.1-Lists.md:72 08.4-Rings.md:12
#, no-wrap
msgid "puts [52, 55, 59][1]"
msgstr "puts [52, 55, 59][1]"

#: 08.1-Lists.md:76
msgid ""
"OK, that looks a bit weird if you've never seen anything like it before. "
"Trust me though, it's not too hard. There are three parts to the line above: "
"the word `puts` , our list `52, 55, 59` and our index `[1]`. Firstly we're "
"saying `puts` because we want Sonic Pi to print the answer out for us in the "
"log. Next, we're giving it our list, and finally our index is asking for the "
"second element. We need to surround our index with square brackets and "
"because counting starts at `0`, the index for the second element is `1`. "
"Look:"
msgstr ""
"OK, dat ziet er misschien een beetje raar als je nog nooit zoiets gezien "
"hebt. Geloof me maar, het is niet te moeilijk. Er zijn drie onderdelen naar "
"de regel erboven: het woord `puts`, onze lijst ' 52, 55, 59' en onze index "
"'[1]'. Ten eerste: we zeggen `puts` omdat we willen dat Sonic Pi het "
"antwoord voor ons in het logboek afdrukt . Vervolgens geven we het onze "
"lijst, en tenslotte vraagt onze index naarr het tweede element. We moeten "
"onze index omringen met vierkante haken en omdat tellen bij '0' begint, is "
"de index voor het tweede element `1`. Kijk:"

#: 08.1-Lists.md:85
#, no-wrap
msgid ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"
msgstr ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"

#: 08.1-Lists.md:90
msgid ""
"Try running the code `puts [52, 55, 59][1]` and you'll see `55` pop up in "
"the log. Change the index `1` to other indexes, try longer lists and think "
"about how you might use a list in your next code jam. For example, what "
"musical structures might be represented as a series of numbers..."
msgstr ""
"Probeer de code uit te voeren ´puts [52, 55, 59] [1]` en je ziet `55´ in het "
"logboek opduiken. Zet de index ´1´ om in andere indexen, probeer langere "
"lijsten en denk na over hoe u een lijst in uw volgende code jam kunt "
"gebruiken. Welke muzikale structuren kunnen bijvoorbeeld worden weergegeven "
"als een reeks getallen..."

#: 08.2-Chords.md:1
msgid "8.2 Chords"
msgstr "8.2 Akkoorden"

#: 08.2-Chords.md:5
msgid ""
"Sonic Pi has built-in support for chord names which will return lists. Try "
"it for yourself:"
msgstr ""
"Sonic Pi heeft ingebouwde ondersteuning voor akkoordnamen die lijsten zullen "
"weergeven. Probeer dit voor jezelf:"

#: 08.2-Chords.md:8
#, no-wrap
msgid "play chord(:E3, :minor)"
msgstr "play chord(:E3, :minor)"

#: 08.2-Chords.md:12
msgid ""
"Now, we're really getting somewhere. That looks a lot more pretty than the "
"raw lists (and is easier to read for other people). So what other chords "
"does Sonic Pi support? Well, a *lot*. Try some of these:"
msgstr ""
"Nu komen we er. Dit ziet er veel beter uit dan de rauwe lijst (en is "
"makkelijker te lezen voor andere mensen). Welke andere akkoorden ondersteund "
"Sonic Pi nog? Wel, een *hoop*. Probeer wat van deze:"

#: 08.2-Chords.md:16
msgid "`chord(:E3, :m7)`"
msgstr "`chord(:E3, :m7)`"

#: 08.2-Chords.md:17
msgid "`chord(:E3, :minor)`"
msgstr "`chord(:E3, :minor)`"

#: 08.2-Chords.md:18
msgid "`chord(:E3, :dim7)`"
msgstr "`chord(:E3, :dim7)`"

#: 08.2-Chords.md:19
msgid "`chord(:E3, :dom7)`"
msgstr "`chord(:E3, :dom7)`"

#: 08.2-Chords.md:21
msgid "Arpeggios"
msgstr "Arpeggio 's"

#: 08.2-Chords.md:23
msgid ""
"We can easily turn chords into arpeggios with the function `play_pattern`:"
msgstr ""
"We kunnen gemakkelijk akkoorden in arpeggio's omzetten met de functie "
"'play_pattern':"

#: 08.2-Chords.md:26
#, no-wrap
msgid "play_pattern chord(:E3, :m7)"
msgstr "play_pattern chord(:E3, :m7)"

#: 08.2-Chords.md:30
msgid ""
"Ok, that's not so fun - it played it really slowly. `play_pattern` will play "
"each note in the list separated with a call to `sleep 1` between each call "
"to `play`. We can use another function `play_pattern_timed` to specify our "
"own timings and speed things up:"
msgstr ""
"Ok, dit is niet zo fijn- het speelde het echt te traag. `play_pattern` zal "
"elke noot van de lijst apart afspelen met een rust van `sleep 1` tussen elke "
"oproep naar `play`. We kunnen de functie  `play_pattern_timed` gebruiken om "
"een eigen timing aan te geven en het wat sneller te laten gaan:"

#: 08.2-Chords.md:35
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m7), 0.25"
msgstr "play_pattern_timed chord(:E3, :m7), 0.25"

#: 08.2-Chords.md:39
msgid ""
"We can even pass a list of times which it will treat as a circle of times:"
msgstr ""
"We kunnen zelfs een lijst met tijden doorgeven, welke als een tijdscirkel "
"zullen worden behandeld:"

#: 08.2-Chords.md:42
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"
msgstr "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"

#: 08.2-Chords.md:46
msgid "This is the equivalent to:"
msgstr "Dit is gelijk aan:"

#: 08.2-Chords.md:48
#, no-wrap
msgid ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"
msgstr ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"

#: 08.2-Chords.md:64
msgid "Which would you prefer to write?"
msgstr "Welke wil je liever schrijven?"

#: 08.3-Scales.md:1
msgid "8.3 Scales"
msgstr "8.3 Toonladders"

#: 08.3-Scales.md:3
msgid "Scales"
msgstr "Toonladders"

#: 08.3-Scales.md:5
msgid ""
"Sonic Pi has support for a wide range of scales. How about playing a C3 "
"major scale?"
msgstr ""
"Sonic Pi geeft ondersteuning aan een breed scala van toonladders. Wat dacht "
"je van de toonladder C3 majeur?"

#: 08.3-Scales.md:8
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"
msgstr "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"

#: 08.3-Scales.md:12
msgid "We can even ask for more octaves:"
msgstr "We kunnen zelfs meer octaven vragen:"

#: 08.3-Scales.md:14
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"
msgstr ""
"play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"

#: 08.3-Scales.md:18
msgid "How about all the notes in a pentatonic scale?"
msgstr "Wat dacht je van deze noten  in een pentatonische toonladder?"

#: 08.3-Scales.md:20
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, release: 0.1"
msgstr ""
"play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, "
"release: 0.1"

#: 08.3-Scales.md:24
msgid "Random notes"
msgstr "Random noten"

#: 08.3-Scales.md:26
msgid ""
"Chords and scales are great ways of constraining a random choice to "
"something meaningful. Have a play with this example which picks random notes "
"from the chord E3 minor:"
msgstr ""
"Akkoorden en toonladders zijn een goede manieren om een willekeurige keuze "
"tot iets zinvols te beperken. Speel met dit voorbeeld dat willekeurige noten "
"uitkiest van het akkoord E3 mineur:"

#: 08.3-Scales.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"

#: 08.3-Scales.md:38
msgid "Try switching in different chord names and cutoff ranges."
msgstr "Probeer verschillende akkoordnamen en cutoff in te geven."

#: 08.3-Scales.md:40
msgid "Discovering Chords and Scales"
msgstr "Akkoorden en toonladders ontdekken"

#: 08.3-Scales.md:42
msgid ""
"To find out which scales and chords are supported by Sonic Pi simply click "
"the Lang button on the far left of this tutorial and then choose either "
"chord or scale in the API list. In the information in the main panel, scroll "
"down until you see a long list of chords or scales (depending on which "
"you're looking at)."
msgstr ""
"Om erachter te komen welke toonladders en akkoorden worden ondersteund door "
"Sonic Pi klikt u de knop Lang op het linkeruiteinde van deze tutorial en "
"kies vervolgens chord of scale in de lijst van de API. Scroll In de "
"informatie van het hoofdpaneel naar beneden totdat u een lange lijst van "
"akkoorden of schalen ziet (afhankelijk van welke u zoekt)."

#: 08.3-Scales.md:48
msgid "Have fun and remember: there are no mistakes, only opportunities."
msgstr "Veel plezier en vergeet niet: er zijn geen fouten, alleen kansen."

#: 08.4-Rings.md:1
msgid "8.4 Rings"
msgstr "8.4 Ringen"

#: 08.4-Rings.md:3 A.11-beat-tracking.md:62
msgid "Rings"
msgstr "Ringen"

#: 08.4-Rings.md:5
msgid ""
"An interesting spin on standard lists are rings. If you know some "
"programming, you might have come across ring buffers or ring arrays. Here, "
"we'll just go for ring - it's short and simple."
msgstr ""
"Een interessante draai aan standaard lijsten zijn ringen. Als u wat "
"programmeren weet, ben je misschien al ring buffers of ring array's "
"tegengekomen. Hier gaan we gewoon voor ring - het is kort en simpel."

#: 08.4-Rings.md:9
msgid ""
"In the previous section on lists we saw how we could fetch elements out of "
"them by using the indexing mechanism:"
msgstr ""
"In de vorige sectie over lijsten zagen we al hoe we elementen door het "
"indexeer mechanisme uit hen konden halen:"

#: 08.4-Rings.md:16
msgid ""
"Now, what happens if you want index `100`? Well, there's clearly no element "
"at index 100 as the list has only three elements in it. So Sonic Pi will "
"return you `nil` which means nothing."
msgstr ""
"War gebeurd er nu als je `100` wil indexeren? Wel er is duidelijk geen "
"element bij index 100 daar de lijst enkel drie elementen bevat. Dus Sonic Pi "
"zal `nil` weergeven, wat niets betekent."

#: 08.4-Rings.md:20
msgid ""
"However, consider you have a counter such as the current beat which "
"continually increases. Let's create our counter and our list:"
msgstr ""
"Stel nu even dat je een teller hebt en dat deze jouw huidige beat is die in "
"snelheid toeneemt. Lat ons deze teller en lijst aanmaken:"

#: 08.4-Rings.md:23
#, no-wrap
msgid ""
"counter = 0\n"
"notes = [52, 55, 59]"
msgstr ""
"counter = 0\n"
"notes = [52, 55, 59]"

#: 08.4-Rings.md:28
msgid "We can now use our counter to access a note in our list:"
msgstr ""
"We kunnen nu onze teller gebruiken om toegang te krijgen tot een noot in "
"onze lijst:"

#: 08.4-Rings.md:30
#, no-wrap
msgid "puts notes[counter]"
msgstr "puts notes[counter]"

#: 08.4-Rings.md:34
msgid ""
"Great, we got `52`. Now, let's increment our counter and get another note:"
msgstr ""
"Geweldig, we hebben `52`. Nu, laten we onze teller verhogen en krijg een "
"andere noot:"

#: 08.4-Rings.md:37
#, no-wrap
msgid ""
"counter = (inc counter)\n"
"puts notes[counter]"
msgstr ""
"counter = (inc counter)\n"
"puts notes[counter]"

#: 08.4-Rings.md:42
msgid ""
"Super, we now get `55` and if we do it again we get `59`. However, if we do "
"it again, we'll run out of numbers in our list and get `nil`. What if we "
"wanted to just loop back round and start at the beginning of the list again? "
"This is what rings are for."
msgstr ""
"Super, we krijgen nu `55` en als wij het opnieuw doen krijgen we `59`. Als "
"wij het nogmaals doen, raken onze cijfer op in onze lijst en krijgen we `nil`"
". Wat als we bij het begin van de lijst weer willen beginnen? Dit is wat "
"waar ringen voor zijn."

#: 08.4-Rings.md:47
msgid "Creating Rings"
msgstr "Ringen maken"

#: 08.4-Rings.md:49
msgid ""
"We can create rings one of two ways. Either we use the `ring` function with "
"the elements of the ring as parameters:"
msgstr ""
"We kunnen ringen op twee manieren maken. We kunnen de `ring` functie "
"gebruiken met de elementen van de ring als parameters:"

#: 08.4-Rings.md:52
#, no-wrap
msgid "(ring 52, 55, 59)"
msgstr "(ring 52, 55, 59)"

#: 08.4-Rings.md:56
msgid ""
"Or we can take a normal list and convert it to a ring by sending it the `."
"ring` message:"
msgstr ""
"Of we kunnen een normale lijst nemen en deze naar een ring omzetten door "
"naar deze een `.ring` bericht te zenden :"

#: 08.4-Rings.md:59
#, no-wrap
msgid "[52, 55, 59].ring"
msgstr "[52, 55, 59].ring"

#: 08.4-Rings.md:63
msgid "Indexing Rings"
msgstr "Ringen Indexeren"

#: 08.4-Rings.md:65
msgid ""
"Once we have a ring, you can use it in exactly the same way you would use a "
"normal list with the exception that you can use indexes that are negative or "
"larger than the size of the ring and they'll wrap round to always point at "
"one of the ring's elements:"
msgstr ""
"Eens we een ring hebben, kan je deze op exact de zelfde manier als gewone "
"lijsten gebruiken met uitzondering dat je indexen kunt gebruiken die "
"negatief zijn of groter dan de grootte van de ring, en altijd naar één van "
"de elementen van de ring zullen omslaan:"

#: 08.4-Rings.md:70
#, no-wrap
msgid ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"
msgstr ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"

#: 08.4-Rings.md:78
msgid "Using Rings"
msgstr "Ringen Gebruiken"

#: 08.4-Rings.md:80
msgid ""
"Let's say we're using a variable to represent the current beat number. We "
"can use this as an index into our ring to fetch notes to play, or release "
"times or anything useful we've stored in our ring regardless of the beat "
"number we're currently on."
msgstr ""
"Laten we zeggen dat we een variabele gebruiken om het nummer van de huidige "
"beat te vertegenwoordigen. We kunnen dit als een index in onze ring  "
"gebruiken om noten te halen om te spelen of release tijden of alles wat "
"nuttig zou kunnen zijn en we hebben opgeslagen in onze ring ongeacht het "
"beat nummer dat we momenteel hebben."

#: 08.4-Rings.md:85
msgid "Scales and Chords are Rings"
msgstr "Toonladders en Akkoorden zijn ringen"

#: 08.4-Rings.md:87
msgid ""
"A useful thing to know is that the lists returned by `scale` and `chord` are "
"also rings and allow you to access them with arbitrary indexes."
msgstr ""
"Handig om weten is dat de lijsten door `scale` en de `chord` opgeroepen, ook "
"ringen zijn en jou toelaten willekeurige indexen te openen."

#: 08.4-Rings.md:90
msgid "Ring Constructors"
msgstr "Ring Bouwers"

#: 08.4-Rings.md:92
msgid ""
"In addition to `ring` there are a number of other functions which will "
"construct a ring for us."
msgstr ""
"Naast de `ring` zijn er een aantal andere functies die een ring voor ons "
"zullen bouwen."

#: 08.4-Rings.md:95
msgid "`range` invites you specify a starting point, end point and step size."
msgstr ""
"`range`nodigt je uit om een start en een eindpositie op te geven en de "
"grootte van de stappen."

#: 08.4-Rings.md:96
msgid ""
"`bools` allows you to use `1`s and `0`s to succinctly represent booleans."
msgstr ""
"`bools` laten het gebruik van `1`s en `0`s om beknopte booleaans te "
"vertegenwoordigen."

#: 08.4-Rings.md:97
msgid "`knit` allows you to knit a sequence of repeated values."
msgstr "`knit` laat jou een sequentie met repeterende waarden breien."

#: 08.4-Rings.md:98
msgid "`spread` creates a ring of bools with a Euclidean distribution."
msgstr ""
"`spread` creëert een ring van een boleaanse met een Euclidische distributie."

#: 08.4-Rings.md:100
msgid "Take a look at their respective documentation for more information."
msgstr ""
"Neem een kijkje naar hun respectievelijke documentatie voor meer informatie "
"hierover."

#: 08.5-Ring-Chains.md:1
msgid "8.5 Ring Chains"
msgstr "8.5 Ring Kettingen"

#: 08.5-Ring-Chains.md:3
msgid "Ring Chains"
msgstr "Ring Kettingen"

#: 08.5-Ring-Chains.md:5
msgid ""
"In addition to the constructors such as `range` and `spread` another way of "
"creating new rings is to manipulate existing rings."
msgstr ""
"Als toevoeging tot de bouwers zoals `range`en `spread`is het manipuleren van "
"bestaande ringen, een andere manier om nieuwe ringen te maken."

#: 08.5-Ring-Chains.md:9
msgid "Chain Commands"
msgstr "Ketting Commando's"

#: 08.5-Ring-Chains.md:11
msgid "To explore this, take a simple ring:"
msgstr "Neem deze eenvoudige ring om dit te verkennen:"

#: 08.5-Ring-Chains.md:13
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50)"
msgstr "(ring 10, 20, 30, 40, 50)"

#: 08.5-Ring-Chains.md:17
msgid ""
"What if we wanted it backwards? Well we'd use the chain command `.reverse` "
"to take the ring and turn it around:"
msgstr ""
"Wat als we deze andersom willen? Dan kunnen we het chain commando `.reverse "
"nemen om de ring om te draaien:"

#: 08.5-Ring-Chains.md:20
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"
msgstr "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"

#: 08.5-Ring-Chains.md:24
msgid "Now, what if we wanted the first three values from the ring?"
msgstr "En wat als we de eerste drie waarden van de ring willen nemen?"

#: 08.5-Ring-Chains.md:26
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"
msgstr "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"

#: 08.5-Ring-Chains.md:30
msgid "Finally, what if we wanted to shuffle the ring?"
msgstr "En wat als we de ring willen verschuiven?"

#: 08.5-Ring-Chains.md:32
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"
msgstr "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"

#: 08.5-Ring-Chains.md:36
msgid "Multiple Chains"
msgstr "Meerdere Kettingen"

#: 08.5-Ring-Chains.md:38
msgid ""
"This is already a powerful way of creating new rings. However, the *real* "
"power comes when you chain a few of these commands together."
msgstr ""
"Dit is al een krachtige manier om nieuwe ringen te creëren. De *echte* "
"kracht komt wanneer je een paar van deze opdrachten samen chaint."

#: 08.5-Ring-Chains.md:41
msgid ""
"How about shuffling the ring, dropping 1 element and then taking the next 3?"
msgstr ""
"Wat denk je ervan de ring te shuffelen, 1 element te laten vallen en "
"vervolgens de volgende 3 te nemen?"

#: 08.5-Ring-Chains.md:43
msgid "Let's take this in stages:"
msgstr "Laten we dit in fasen doen:"

#: 08.5-Ring-Chains.md:45
msgid "`(ring 10, 20, 30, 40, 50)` - our initial ring"
msgstr "`(ring 10, 20, 30, 40, 50)` - our initial ring"

#: 08.5-Ring-Chains.md:46
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle` - shuffles - `(ring 40, 30, 10, 50, 20)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle` - shuffles - `(ring 40, 30, 10, 50, 20)`"

#: 08.5-Ring-Chains.md:47
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - drop 1 - `(ring 30, 10, 50, "
"20)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - drop 1 - `(ring 30, 10, 50, "
"20)`"

#: 08.5-Ring-Chains.md:48
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - take 3 - `(ring 30, "
"10, 50)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - take 3 - `(ring 30, "
"10, 50)`"

#: 08.5-Ring-Chains.md:50
msgid ""
"Can you see how we can just create a long chain of these methods by just "
"*sticking them together*. We can combine these in any order we want creating "
"an extremely rich and powerful way of generating new rings from existing "
"ones."
msgstr ""
"Kan je nu zien dat we een lange ketting van deze methoden kunnen gebruiken "
"door deze *bij elkaar te plakken*. We kunnen deze in eender welke volgorde "
"combineren en ontwikkellen hierbij een uiterst rijke en krachtige manier om "
"nieuwe ringen van bestaande ringen te creëren."

#: 08.5-Ring-Chains.md:55
msgid "Immutability"
msgstr "Onveranderbaarheid"

#: 08.5-Ring-Chains.md:57
msgid ""
"These rings have a powerful and important property. They are immutable which "
"means that they can not change. This means that the chaining methods "
"described in this section *do not change rings* rather they *create new "
"rings*. This means you're free to share rings across threads and start "
"chaining them within a thread knowing you won't be affecting any other "
"thread using the same ring."
msgstr ""
"Deze ringen hebben een krachtige en belangrijke eigenschap. Ze zijn "
"onveranderlijk wat betekent dat je ze niet kunt veranderen. Dit betekent dat "
"de chaining methode die in deze sectie beschreven word *ringen niet "
"veranderd* maar eerder *nieuwe ringen maakt*. Dit betekent dat u vrij bent "
"om te ringen te delen met threads en je hen kan beginnen chainen binnen een "
"thread met de wetenschap dat je geen andere thread zal beïnvloeden die "
"gebruik maakt van dezelfde ring."

#: 08.5-Ring-Chains.md:64
msgid "Available Chain Methods"
msgstr "Beschikbare Chain Methoden"

#: 08.5-Ring-Chains.md:66
msgid "Here's a list of the available chain methods for you to play with:"
msgstr ""
"Hier is een lijst van de beschikbare chain methoden voor jou om mee te "
"spelen:"

#: 08.5-Ring-Chains.md:68
msgid "`.reverse` - returns a reversed version of the ring"
msgstr "'.reverse' - geeft een omgekeerde versie van de ring"

#: 08.5-Ring-Chains.md:69
msgid "`.sort` - creates a sorted version of the ring"
msgstr "'.sort' - creëert een gesorteerde versie van de ring"

#: 08.5-Ring-Chains.md:70
msgid "`.shuffle` - creates a shuffled version of the ring"
msgstr "'.shuffle' - creëert een geshuffelde versie van de ring"

#: 08.5-Ring-Chains.md:71
msgid ""
"`.pick(3)` - returns a ring with the results of calling `.choose` 3 times"
msgstr ""
"'.pick(3)' - geeft een ring met de resultaten van de aanroep `.choose` 3 keer"

#: 08.5-Ring-Chains.md:72
msgid ""
"`.pick` - similar to `.pick(3)` only the size defaults to the same as the "
"original ring"
msgstr ""
"'.pick' - vergelijkbaar met '.pick(3)' maar de grootte is standaard "
"hetzelfde als de oorspronkelijke ring"

#: 08.5-Ring-Chains.md:73
msgid "`.take(5)` - returns a new ring containing only the first 5 elements"
msgstr ""
"'.take(5)' - geeft als resultaat een nieuwe ring die alleen eerste 5 "
"elementen bevat"

#: 08.5-Ring-Chains.md:74
msgid ""
"`.drop(3)` - returns a new ring with everything but the first 3 elements"
msgstr ""
"'.drop(3)' - geeft als resultaat een nieuwe ring met alles behalve de eerste "
"3 elementen"

#: 08.5-Ring-Chains.md:75
msgid "`.butlast` - returns a new ring with the last element missing"
msgstr ""
"'.butlast' - geeft als resultaat een nieuwe ring maar ontbreekt het laatste "
"element"

#: 08.5-Ring-Chains.md:76
msgid "`.drop_last(3)` - returns a new ring with the last 3 elements missing"
msgstr ""
"'.drop_last(3)' - geeft als resultaat een nieuwe ring maar de laatste 3 "
"elementen ontbreken"

#: 08.5-Ring-Chains.md:77
msgid "`.take_last(6)`- returns a new ring with only the last 6 elements"
msgstr ""
"'.take_last(6)'-geeft als resultaat een nieuwe ring met alleen de laatste 6 "
"elementen"

#: 08.5-Ring-Chains.md:78
msgid "`.stretch(2)` - repeats each element in the ring twice"
msgstr "'.stretch(2)' - herhaald tweemaal elk element in de ring"

#: 08.5-Ring-Chains.md:79
msgid "`.repeat(3)` - repeats the entire ring 3 times"
msgstr "'.repeat(3)' - herhaalt de hele ring 3 keer"

#: 08.5-Ring-Chains.md:80
msgid "`.mirror` - adds the ring to a reversed version of itself"
msgstr "'.mirror' - voegt de ring naar een omgekeerde versie van zichzelf toe"

#: 08.5-Ring-Chains.md:81
msgid "`.reflect` - same as mirror but doesn't duplicate middle value"
msgstr ""
"'.reflect' - hetzelfde als spiegel maar middelste waarde wordt niet "
"gedupliceerd"

#: 08.5-Ring-Chains.md:83
msgid ""
"Of course, those chain methods that take numbers can take other numbers too! "
"So feel free to call `.drop(5)` instead of `.drop(3)` if you want to drop "
"the first 5 elements."
msgstr ""
"Natuurlijk, kan je in deze chain methoden ook andere cijfers gebruiken! Dus "
"voel je vrij om `.drop(5)` in plaats van `.drop(3)` als je de eerste 5 "
"elementen wilt laten vallen."

#: 09-Live-Coding.md:1
msgid "9 Live Coding"
msgstr "9 Live Codering"

#: 09-Live-Coding.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write "
"and modify code live to make music, just like you might perform live with a "
"guitar. One advantage of this approach is to give you more feedback whilst "
"composing (get a simple loop running and keep tweaking it till it sounds "
"just perfect). However, the main advantage is that you can take Sonic Pi on "
"stage and gig with it."
msgstr ""
"Éen van de meest opwindende aspecten van Sonic Pi is dat je live code kan "
"schrijven en deze veranderd om muziek te spelen, net zoals je zou optreden "
"met je gitaar. Een voordeel van deze aanpak is dat je meer feedback krijgt "
"terwijl je componeert (je kaan een simpele code loop laten lopen en deze "
"tweaken tot deze perfect klinkt).  Het belangrijkste voordeel is echter dat "
"u Sonic Pi op het podium mee kunt nemen en kan optreden."

#: 09-Live-Coding.md:12
msgid ""
"In this section we'll cover the fundamentals of turning your static code "
"compositions into dynamic performances."
msgstr ""
"In deze sectie zullen we de fundamenten bespreken hoe je je statische code "
"kan omvormen tot een dynamische voorstelling."

#: 09-Live-Coding.md:15
msgid "Hold on to your seats..."
msgstr "Zit je goed? ..."

#: 09.1-Live-Coding-Fundamentals.md:1
msgid "9.1 Live Coding Fundamentals"
msgstr "9.1 De Grondslagen van Live Codering"

#: 09.1-Live-Coding-Fundamentals.md:5
msgid ""
"Now we've learned enough to really start having some fun. In this section "
"we'll draw from all the previous sections and show you how you can start "
"making your music compositions live and turning them into a performance. For "
"that we'll need 3 main ingredients:"
msgstr ""
"Nu hebben we genoeg geleerd en kan het echte plezier beginnen. In deze "
"sectie trekken we uit alle vorige secties zaken die jou laten zien hoe je je "
"composities tot live muziek kan maken en ze in een voorstelling kan "
"omtoveren. Daarvoor hebben we 3 hoofd ingrediënten nodig:"

#: 09.1-Live-Coding-Fundamentals.md:10
msgid "An ability to write code that makes sounds - CHECK!"
msgstr "Code kunnen schrijven dat geluiden kan voortbrengen - CHECK!"

#: 09.1-Live-Coding-Fundamentals.md:11
msgid "An ability to write functions - CHECK!"
msgstr "Functies kunnen schrijven - CHECK!"

#: 09.1-Live-Coding-Fundamentals.md:12
msgid "An ability to use (named) threads - CHECK!"
msgstr "(benoemde) Threads kunnen gebruiken - CHECK!"

#: 09.1-Live-Coding-Fundamentals.md:14
msgid ""
"Alrighty, let's get started. Let's live code our first sounds. We first need "
"a function containing the code we want to play. Let's start simple. We also "
"want to loop calls to that function in a thread:"
msgstr ""
"We gaan aan de slag. We coderen onze eerste geluiden. We moeten eerst een "
"functie hebben met de code die we willen spelen. Laten we eenvoudig "
"beginnen. Wij willen ook loops oproepen die in een thread functioneren:"

#: 09.1-Live-Coding-Fundamentals.md:18
#, no-wrap
msgid ""
"define :my_loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_loop\n"
"  end\n"
"end"
msgstr ""
"define :my_loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_loop\n"
"  end\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:31
msgid ""
"If that looks a little too complicated to you, go back and re-read the "
"sections on functions and threads. It's not too complicated if you've "
"already wrapped your head around these things."
msgstr ""
"Als dat een beetje te ingewikkeld voor je lijkt, ga dan even terug en "
"herlees de passages over functies en threads. Het is niet al te ingewikkeld "
"nu je je al in deze zaken verdiept hebt."

#: 09.1-Live-Coding-Fundamentals.md:35
msgid ""
"What we have here is a function definition which just plays note 50 and "
"sleeps for a beat. We then define a named thread called `:looper` which just "
"loops around calling `my_loop` repeatedly."
msgstr ""
"Wat we hier hebben is een functiedefinitie dat gewoon noot 50 speelt en een "
"beat slaapt. Vervolgens definiëren we een benoemde thread genaamd `:looper` "
"die herhaaldelijk rond `my_loop` loopt."

#: 09.1-Live-Coding-Fundamentals.md:39
msgid "If you run this code, you'll hear note 50 repeating again and again..."
msgstr ""
"Als u deze code uitvoert, zult je noot 50 altijd opnieuw en opnieuw horen "
"spelen..."

#: 09.1-Live-Coding-Fundamentals.md:41
msgid "Changing it up"
msgstr "Veranderingen aanbrengen"

#: 09.1-Live-Coding-Fundamentals.md:43
msgid ""
"Now, this is where the fun starts. Whilst the code is *still running* change "
"50 to another number, say 55, then press the Run button again. Woah! It "
"changed! Live!"
msgstr ""
"Nu, hier is waar de pret begint. Terwijl de code *nog loopt* wijzigen 50 "
"naar een ander nummer, zeg 55, druk nogmaals op de knop afspelen. Woah! Het "
"veranderd! Live!"

#: 09.1-Live-Coding-Fundamentals.md:47
msgid ""
"It didn't add a new layer because we're using named threads which only allow "
"one thread for each name. Also, the sound changed because we *redefined* the "
"function. We gave `:my_loop` a new definition. When the `:looper` thread "
"looped around it simply called the new definition."
msgstr ""
"Het heeft geen nieuwe laag toegevoegd omdat we benoemde threads gebruiken, "
"die voor elke naam één thread toestaat. De klank veranderde ook omdat we de "
"functie hebben *geherdefinieerd*. We gaven `:my_loop` een nieuwe definitie. "
"Wanneer de `:looper` thread rond Loopt riep deze de nieuwe definitie op."

#: 09.1-Live-Coding-Fundamentals.md:52
msgid ""
"Try changing it again, change the note, change the sleep time. How about "
"adding a `use_synth` statement? For example, change it to:"
msgstr ""
"Probeer het opnieuw te wijzigen, verander de noot, de rusttijd. Hoe zit het "
"met het toevoegen van het `use_synth` statement? Verander het bijvoorbeeld "
"naar:"

#: 09.1-Live-Coding-Fundamentals.md:55
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:63
msgid ""
"Now it sounds pretty interesting, but we can spice it up further. Instead of "
"playing the same note again and again, try playing a chord:"
msgstr ""
"Nu het klinkt erg interessant, maar we kunnen het verder verlevendigen. In "
"plaats van dezelfde noot opnieuw en opnieuw te spelen, speel een akkoord:"

#: 09.1-Live-Coding-Fundamentals.md:67
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:75
msgid "How about playing random notes from the chord:"
msgstr "Wat denk je van random noten van het akkoord te spelen:"

#: 09.1-Live-Coding-Fundamentals.md:77
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:85
msgid "Or using a random cutoff value:"
msgstr "Of met behulp van een willekeurige cutoff waarde:"

#: 09.1-Live-Coding-Fundamentals.md:87
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:95
msgid "Finally, add some drums:"
msgstr "Ten slotte, voeg enkele drums toe:"

#: 09.1-Live-Coding-Fundamentals.md:97
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:106
msgid "Now things are getting exciting!"
msgstr "Nu word het steeds spannender!"

#: 09.1-Live-Coding-Fundamentals.md:108
msgid ""
"However, before you jump up and start live coding with functions and "
"threads, stop what you're doing and read the next section on `live_loop` "
"which will change the way you code in Sonic Pi forever..."
msgstr ""
"Maar voor je recht springt en je begint te live coden met functies en "
"threads, stop met wat je doet en lees de volgende sectie over `live_loop` "
"wat de manier van coderen in Sonic Pi voor eeuwig zal veranderen..."

#: 09.2-Live-Loops.md:1
msgid "9.2 Live Loops"
msgstr "9.2 Live Loops"

#: 09.2-Live-Loops.md:3
msgid "Live Loops"
msgstr "Live Loops"

#: 09.2-Live-Loops.md:5
msgid ""
"Ok, so this section of the tutorial is the real gem. If you only read one "
"section, it should be this one. If you read the previous section on Live "
"Coding Fundamentals, `live_loop` is a simple way of doing exactly that but "
"without having to write so much."
msgstr ""
"OK, dus dit gedeelte van de handleiding is de echte parel. Als je maar één "
"gedeelte zou kunnen lezen, zou het deze moeten zijn. Als je de vorige sectie "
"van Live codering grondbeginselen leest, is 'live_loop' een eenvoudige "
"manier om precies dat te bereiken, maar zonder zo veel code te hoeven "
"schrijven."

#: 09.2-Live-Loops.md:10
msgid ""
"If you didn't read the previous section, `live_loop` is the best way to jam "
"with Sonic Pi."
msgstr ""
"Als je de vorige sectie niet gelezen hebt,  `live_loop` is de beste manier "
"om  met Sonic Pi te jammen."

#: 09.2-Live-Loops.md:13
msgid "Let's play. Write the following in a new buffer:"
msgstr ""
"Laten we hiermee even spelen. Schrijf het volgende in een nieuwe buffer:"

#: 09.2-Live-Loops.md:15
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"

#: 09.2-Live-Loops.md:22
msgid ""
"Now press the Run button. You hear a basic beep every beat. Nothing fun "
"there. However, don't press Stop just yet. Change the `60` to `65` and press "
"Run again."
msgstr ""
"Druk op de afspeel knop. Je hoort elke tel een zelfde basis bliep. Niks "
"opwindend aan. Maar druk nog niet op Stop. Verander de `60` naar `65` en "
"druk terug op Afspelen."

#: 09.2-Live-Loops.md:26
msgid ""
"Woah! It changed *automatically* without missing a beat. This is live coding."
msgstr ""
"Woeha! Het veranderde *automatisch* zonder een tel te missen. Dit is Live "
"Coding."

#: 09.2-Live-Loops.md:28
msgid ""
"Why not change it to be more bass like? Just update your code whilst it's "
"playing:"
msgstr ""
"Waarom deze niet veranderen aar iets meer Bass-achtig? Gewoon je code "
"updaten terwijl het speelt:"

#: 09.2-Live-Loops.md:30
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:38
msgid "Then hit Run."
msgstr "Sla Afspelen aan."

#: 09.2-Live-Loops.md:40
msgid "Let's make the cutoff move around:"
msgstr "Laten we de cutoff wat rond-bewegen:"

#: 09.2-Live-Loops.md:42
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:50
msgid "Hit Run again."
msgstr "Sla Afspelen opnieuw aan."

#: 09.2-Live-Loops.md:52
msgid "Add some drums:"
msgstr "Voeg wat drums toe:"

#: 09.2-Live-Loops.md:54
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:63
msgid "Change the note from `e1` to `c1`:"
msgstr "Verander de noot van `e1` naar `c1`:"

#: 09.2-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:74
msgid "Now stop listening to me and play around yourself! Have fun!"
msgstr "Stop nu met naar mij te luisteren en ga zelf aan de slag! Veel plezier!"

#: 09.3-Multiple-Live-Loops.md:1
msgid "9.3 Multiple Live Loops"
msgstr "9.3 Meerdere Live Loops"

#: 09.3-Multiple-Live-Loops.md:3
msgid "Multiple Live Loops"
msgstr "Meerdere Live Loops"

#: 09.3-Multiple-Live-Loops.md:5
msgid "Consider the following live loop:"
msgstr "Beschouw even de volgende code:"

#: 09.3-Multiple-Live-Loops.md:7
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:14
msgid ""
"You may have wondered why it needs the name `:foo`. This name is important "
"because it signifies that this live loop is different from all other live "
"loops."
msgstr ""
"Je kan je al afgevraagd hebben waarom het de naam `: foo` moet zijn. Deze "
"naam is belangrijk, omdat het betekent dat deze live loop van de andere live "
"loops verschilt."

#: 09.3-Multiple-Live-Loops.md:18
msgid "*There can never be two live loops running with the same name*."
msgstr "*Er kunnen nooit twee live loops met de zelfde naam afspelen*."

#: 09.3-Multiple-Live-Loops.md:20
msgid ""
"This means that if we want multiple concurrently running live loops, we just "
"need to give them different names:"
msgstr ""
"Dit betekent dat als we willen dat meerdere live loops gelijktijdig willen "
"uit voeren, moeten we ze gewoon een andere naam geven:"

#: 09.3-Multiple-Live-Loops.md:23
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: 09.3-Multiple-Live-Loops.md:36
msgid ""
"You can now update and change each live loop independently and it all just "
"works."
msgstr ""
"Je kan nu  elke live loop onafhankelijk van elkaar wijzigen en updaten en "
"het werkt gewoon allemaal."

#: 09.3-Multiple-Live-Loops.md:39
msgid "Syncing Live Loops"
msgstr "Synchroniseren van Live Loops"

#: 09.3-Multiple-Live-Loops.md:41
msgid ""
"One thing you might have already noticed is that live loops work "
"automatically with the thread cue mechanism we explored previously. Every "
"time the live loop loops, it generates a new `cue` event with the name of "
"the live loop. We can therefore `sync` on these cues to ensure our loops are "
"in sync without having to stop anything."
msgstr ""
"Wat je misschien al opgevallen is is dat live loops automatisch met het "
"thread cue mechanisme werkt dat we al verkend hebben. Elke keer een live "
"loop afspeelt genereert deze een nieuw cue gebeuren met de live loop's naam. "
"We kunnen daarom op deze cue's sync-en om ons ervan te verzekeren dat onze "
"loops in sync lopen zonder we daarvoor iets moeten gaan stoppen."

#: 09.3-Multiple-Live-Loops.md:47
msgid "Consider this badly synced code:"
msgstr "Beschouw even deze slecht gesyncte code:"

#: 09.3-Multiple-Live-Loops.md:49
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:61
msgid ""
"Let's see if we can fix the timing and sync without stopping it. First, "
"let's fix the `:foo` loop to make the sleep a factor of 1 - something like "
"`0.5` will do:"
msgstr ""
"Laten we eens kijken als we de timing en synchronisatie kunnen verhelpen "
"zonder deze te stoppen. Laten we eerst de `:foo` loop fixen en de sleep "
"factor 1 veranderen naar `0.5` :"

#: 09.3-Multiple-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:77
msgid ""
"We're not quite finished yet though - you'll notice that the beats don't "
"quite line up correctly. This is because the loops are *out of phase*. Let's "
"fix that by syncing one to the other:"
msgstr ""
"We zijn nog niet helemaal klaar -je zult merken dat de beats niet helemaal "
"correct samenlopen. Dit komt omdat de loops *uit fase* spelen. Laten we dat "
"verhelpen door de ene aan de andere te synchroniseren:"

#: 09.3-Multiple-Live-Loops.md:81
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:94
msgid "Wow, everything is now perfectly in time - all without stopping."
msgstr "Wow,  nu is alles perfect in tijd - allemaal zonder te stoppen."

#: 09.3-Multiple-Live-Loops.md:96
msgid "Now, go forth and live code with live loops!"
msgstr "Ga nu door met je live code en live loops!"

#: 09.4-Ticking.md:1
msgid "9.4 Ticking"
msgstr "9.4 Ticking"

#: 09.4-Ticking.md:3
msgid "Ticking"
msgstr "Ticking"

#: 09.4-Ticking.md:5
msgid ""
"Something you'll likely find yourself doing a lot when live coding is "
"looping through rings. You'll be putting notes into rings for melodies, "
"sleeps for rhythms, chord progressions, timbral variations, etc. etc."
msgstr ""
"Soms heb je best veel werk, zo lijkt het, wanneer er veel code door een ring "
"loopt. Je zal noten in rings steken voor melodieën, rusttijden (sleep) bij "
"ritmes, akkoordenschema's, variaties op het timbre, enz. enz."

#: 09.4-Ticking.md:9
msgid "Ticking Rings"
msgstr "Tick Ringen"

#: 09.4-Ticking.md:11
msgid ""
"Sonic Pi provides a *very* handy tool for working with rings within "
"`live_loop`s. It's called the tick system. In the section about the rings we "
"were talking about the counter that is constantly increasing, like a current "
"beat number. Tick just implements this idea. It provides you with the "
"ability to *tick through rings*. Let's look at an example:"
msgstr ""
"Sonic Pi biedt een *zeer* handig hulpmiddel voor het werken met ringen "
"binnen `live_loop`s. Het heet het tick systeem. In de sectie over de ringen "
"spraken we over de teller die constant verhoogt, zoals een weergave van de "
"huidige tel . Tick voert het zelfde idee uit. Het biedt u de mogelijkheid om "
"te *doorheen ringen te tikken*. Laten we eens kijken naar een voorbeeld:"

#: 09.4-Ticking.md:17
#, no-wrap
msgid ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:26
msgid "This is equivalent to:"
msgstr "Dit is gelijk aan:"

#: 09.4-Ticking.md:28
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:35
msgid ""
"Here, we're just grabbing the scale E3 minor pentatonic and ticking through "
"each element. This is done by adding `.tick` to the end of the scale "
"declaration. This tick is local to the live loop, so each live loop can have "
"its own independent tick:"
msgstr ""
"Hier nemen we de pentatonische toonladder E3 mineur en ticking doorheen elk "
"element. Dit wordt gedaan door `.tick` toe te voegen aan het einde van de "
"verklaring van de toonladder. De tick is lokaal voor de live loop, dus elke "
"live loop kan zijn eigen onafhankelijke tick hebben:"

#: 09.4-Ticking.md:40
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"

#: 09.4-Ticking.md:53
msgid "Tick"
msgstr "Tick"

#: 09.4-Ticking.md:55
msgid ""
"You can also call `tick` as a standard fn and use the value as an index:"
msgstr ""
"U kunt ook `tick` als een standaard fn aanroepen en de waarde gebruiken als "
"een index:"

#: 09.4-Ticking.md:57
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:65
msgid ""
"However, it is much nicer to call `.tick` at the end. The `tick` fn is for "
"when you want to do fancy things with the tick value and for when you want "
"to use ticks for other things than indexing into rings."
msgstr ""
"Het is veel leuker om `.tick` op het einde aan te roepen. de `.tick` fn is "
"als je je dingen wil verbeelden met de tick waarde en voor wanneer je ticks "
"wil gebruiken voor andere dingen dan in ringen te indexeren."

#: 09.4-Ticking.md:70
msgid "Look"
msgstr "Kijk"

#: 09.4-Ticking.md:72
msgid ""
"The magical thing about tick is that not only does it return a new index (or "
"the value of the ring at that index) it also makes sure that next time you "
"call tick, it's the next value. Take a look at the examples in the docs for "
"`tick` for many ways of working with this. However, for now, it's important "
"to point out that sometimes you'll want to just look at the current tick "
"value and *not increase* it. This is available via the `look` fn. You can "
"call `look` as a standard fn or by adding `.look` to the end of a ring."
msgstr ""
"De magische van tick is dat niet alleen het resultaat geeft van een nieuwe "
"index (of de waarde van de ring op die index) ook zorgt het ervoor dat de "
"volgende keer dat u tick aanroept, dit de volgende waarde zal zijn. Neem een "
"kijkje naar de voorbeelden in de docs `tick` voor de vele manieren om "
"hiermee te werken. Nu is het echter belangrijk erop te wijzen dat je soms "
"gewoon wil kijken naar de huidige waarde van de `tick` maar deze *niet te "
"verhogen*. Deze optie is beschikbaar via de `look` fn. U kunt `look` "
"oproepen zoals een standaard fn of door toevoeging van `look`  aan het einde "
"van een ring."

#: 09.4-Ticking.md:81
msgid "Naming Ticks"
msgstr "Ticks Benoemen"

#: 09.4-Ticking.md:83
msgid ""
"Finally, sometimes you'll need more than one tick per live loop. This is "
"achieved by giving your tick a name:"
msgstr ""
"En nog dit, soms heb je meer dan één tick per live loop nodig. Dat kan je "
"door je tick een naam te geven:"

#: 09.4-Ticking.md:86
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"

#: 09.4-Ticking.md:93
msgid ""
"Here we're using two ticks one for the note to play and another for the "
"sleep time. As they're both in the same live loop, to keep them separate we "
"need to give them unique names. This is exactly the same kind of thing as "
"naming `live_loop`s - we just pass a symbol prefixed with a `:`. In the "
"example above we called one tick `:foo` and the other `:bar`. If we want to "
"`look` at these we also need to pass the name of the tick to `look`."
msgstr ""
"Hier gebruiken we twee ticks: één voor de te spelen noten en een andere voor "
"de rusttijd (sleep). Vermits deze alle twee in dezelfde live loop zitten, "
"moeten we ze een unieke naam geven om hen te kunnen onderscheiden. Hier gaat "
"het net zoals een `live_loop` benoemen, we geven een symbool door, "
"voorafgegaan door een `:`. In het voorgaande voorbeeld noemden we één tick "
"`:foo`en een andere `:bar`. Als we naar dezen willen kijken ( `look`), "
"moeten we ook de naam van de tick doorgeven aan `look`."

#: 09.4-Ticking.md:101
msgid "Don't make it too complicated"
msgstr "Maak het niet te ingewikkeld"

#: 09.4-Ticking.md:103
msgid ""
"Most of the power in the tick system isn't useful when you get started. "
"Don't try and learn everything in this section. Just focus on ticking "
"through a single ring. That'll give you most of the joy and simplicity of "
"ticking through rings in your `live_loop`s."
msgstr ""
"De grote kracht van het tick systeem is niet behulpzaam als beginner. "
"Probeer niet alles uit deze sectie. Focus op een tick in één enkele ring. "
"Dit geeft de grootste voldoening en is het minst gekunsteld tick-en door "
"ringen in jouw `live_loop`s."

#: 09.4-Ticking.md:108
msgid ""
"Take a look at the documentation for `tick` where there are many useful "
"examples and happy ticking!"
msgstr ""
"Neem een kijkje naar de documentatie 'Tick' waar nuttige voorbeelden te "
"vinden zijn. Nog een leuke tick verder!"

#: 10-Essential-Knowledge.md:1
msgid "10 Essential Knowledge"
msgstr "10 Essentiële Kennis"

#: 10-Essential-Knowledge.md:3
msgid "Essential Knowledge"
msgstr "Essentiële Kennis"

#: 10-Essential-Knowledge.md:5
msgid ""
"This section will cover some very useful - in fact *essential* - knowledge "
"for getting the most out of your Sonic Pi experience."
msgstr ""
"Deze sectie gaat over nuttige - in feite *essentiële* - kennis om het meeste "
"uit Sonic Pi te halen."

#: 10-Essential-Knowledge.md:8
msgid ""
"We'll cover how to take advantage of the many keyboard shortcuts available "
"to you, how to share your work and some tips on performing with Sonic Pi."
msgstr ""
"We gaan het hebben over, hoe profijt te halen uit de vele beschikbare "
"sneltoetsen, hoe jouw werk te delen en wat tips hoe met Sonic Pi op te "
"treden."

#: 10.1-Using-Shortcuts.md:1
msgid "10.1 Using Shortcuts"
msgstr "10.1 Sneltoetsen gebruiken"

#: 10.1-Using-Shortcuts.md:3
msgid "Using Shortcuts"
msgstr "Sneltoetsen gebruiken"

#: 10.1-Using-Shortcuts.md:5
msgid ""
"Sonic Pi is as much an instrument as a coding environment. Shortcuts can "
"therefore make playing Sonic Pi much more *efficient and natural* - "
"especially when you're playing live in front of an audience."
msgstr ""
"Sonic Pi is evengoed een instrument als een coderingsomgeving. Sneltoetsen "
"kunen daarom het bespelen van Sonic Pi *efficienter en natuurijker* maken- "
"zeker als je live voor publijk speelt."

#: 10.1-Using-Shortcuts.md:9
msgid ""
"Much of Sonic Pi can be controlled through the keyboard. As you gain more "
"familiarity working and performing with Sonic Pi, you'll likely start using "
"the shortcuts more and more. *I personally touch-type* (I recommend you "
"consider learning too) and find myself frustrated whenever I need to reach "
"for the mouse as it slows me down. I therefore use all of these shortcuts on "
"a very regular basis!"
msgstr ""
"Veel van Sonic Pi kan worden bestuurd via het toetsenbord. Als je meer "
"vertrouwd raakt met Sonic Pi, zult je de sneltoetsen waarschijnlijk meer en "
"meer beginnen gebruiken. *Ik persoonlijk touch-type* (ik adviseer je te "
"overwegen om dit te leren) ik vind het frustrerend wanneer ik het nodig vind "
"de muis te gebruiken. Ik gebruik deze shortcuts dus zeer regelmatig!"

#: 10.1-Using-Shortcuts.md:16
msgid ""
"Therefore, if you learn the shortcuts, you'll learn to use your keyboard "
"effectively and you'll be live coding like a pro in no time."
msgstr ""
"Daarom, als je de shortcuts leert, leer je je toetsenbord efficienter te "
"gebruiken en je zal in geen tijd live coderen als een pro."

#: 10.1-Using-Shortcuts.md:19
msgid ""
"However, *don't try and learn them all at once*, just try and remember the "
"ones you use most and then keep adding more to your practice."
msgstr ""
"Maar probeer ze niet allemaal tegelijkertijd uit te proberen te leren, enkel "
"die je het meest gebruikt en ze langzaam meer en meer in de praktijk toe te "
"voegen."

#: 10.1-Using-Shortcuts.md:22
msgid "Consistency across Platforms"
msgstr "Samenhang tussen Platforms"

#: 10.1-Using-Shortcuts.md:24
msgid ""
"Imagine you're learning the clarinet. You'd expect all clarinets of all "
"makes to have similar controls and fingerings. If they didn't, you'd have a "
"tough time switching between different clarinets and you'd be stuck to using "
"just one make."
msgstr ""
"Stel dat je een klarinet leert bespelen. Je verwachten dan toch dat alle "
"klarinetten van de verschillende merken vergelijkbare controles en "
"vingergrepen  zouden hebben. Als dat niet zo was, zou je een moeilijke tijd "
"hebben om tussen de verschillende klarinetten te kunnen schakelen en je zou "
"vasthangen aan het gebruik van slechts één merk."

#: 10.1-Using-Shortcuts.md:29
msgid ""
"Unfortunately the three major operating systems (Linux, Mac OS X and "
"Windows) come with their own standard defaults for actions such as cut and "
"paste etc. Sonic Pi will try and honour these standards. However *priority "
"is placed on consistency across platforms* within Sonic Pi rather than "
"attempting to conform to a given platform's standards. This means that when "
"you learn the shortcuts whilst playing with Sonic Pi on your Raspberry Pi, "
"you can move to the Mac or PC and feel right at home."
msgstr ""
"Helaas zijn de drie belangrijkste besturingssystemen (Linux, Mac OS X en "
"Windows) zijn voorzien van hun eigen standaardwaarden voor acties zoals het "
"knippen en plakken enz. Sonic Pi zal proberen deze normen te respecteren. "
"Deze is echter *de prioriteit is geplaatst op de consistentie tussen de "
"platformen* binnen Sonic Pi, in plaats te proberen om te voldoen aan de norm "
"van een bepaald platform. Dit betekent dat als je Sonic pi's shortcuts leert "
"spelen op je Raspberry Pi, je naar Mac of PC kan overschakelen en je thuis "
"voelen."

#: 10.1-Using-Shortcuts.md:37
msgid "Control and Meta"
msgstr "Controle en Meta"

#: 10.1-Using-Shortcuts.md:39
msgid ""
"Part of the notion of consistency is the naming of shortcuts. In Sonic Pi we "
"use the names *Control* and *Meta* to refer to the two main combination "
"keys. On all platforms *Control* is the same. However, on Linux and Windows, "
"*Meta* is actually the *Alt* key while on Mac *Meta* is the *Command* key. "
"For consistency we'll use the term *Meta* - just remember to map that to the "
"appropriate key on your operating system."
msgstr ""
"Het concept van consistentie zit ook in de benaming van de shortcuts. In "
"Sonic Pi gebruiken we de namen *Control* en *Meta*  om te verwijzen naar de "
"twee belangrijkste combinatie toetsen. Bij alle platformen is *Control* "
"hetzelfde.Maar op Linux en Windows is *Meta* eigenlijk de *Alt* toets is, "
"terwijl *Meta* op Mac de *Command* toets is. Voor de samenhang zullen we de "
"term *Meta* gebruiken - vergeet dit niet naar je besturingsysteem over te "
"zetten."

#: 10.1-Using-Shortcuts.md:46
msgid "Abbreviations"
msgstr "Afkortingen"

#: 10.1-Using-Shortcuts.md:48
msgid ""
"To help keep things simple and readable, we'll use the abbreviations *C-* "
"for *Control* plus another key and *M-* for *Meta* plus another key. For "
"example, if a shortcut requires you to hold down both *Meta* and *r* we'll "
"write that as `M-r`. The *-* just means \"at the same time as.\""
msgstr ""
"Om de zaken eenvoudig en leesbaar te houden, gebruiken we de afkorting *C-* "
"voor *Control* plus andere toets en *M-* voor *Meta* plus andere toets.\n"
"Een voorbeeld: als je bij een shortcut zowel *Meta* als *r* moet indrukken "
"schrijven we dit als `M-r`. En de *-* betekent dan \"tegelijk.\""

#: 10.1-Using-Shortcuts.md:53
msgid "The following are some of the shortcuts I find most useful."
msgstr "Enkele van de sneltoetsen die ik het meest nuttig vind."

#: 10.1-Using-Shortcuts.md:55
msgid "Stopping and starting"
msgstr "Stoppen en starten"

#: 10.1-Using-Shortcuts.md:57
msgid ""
"Instead of always reaching for the mouse to run your code, you can simply "
"press `M-r`. Similarly, to stop running code you can press `M-s`."
msgstr ""
"In plaats van altijd de muis te gebruiken je code te gaan uit voeren, kan je "
"simpelweg op `M-r` drukken. Om het uitvoeren van je code te stoppen kan je "
"`M-s` gebruiken."

#: 10.1-Using-Shortcuts.md:60 10.2-Shortcut-Cheatsheet.md:51
msgid "Navigation"
msgstr "Navigatie"

#: 10.1-Using-Shortcuts.md:62
msgid ""
"I'm really lost without the navigation shortcuts. I therefore highly "
"recommend you spend the time to learn them. These shortcuts also work "
"extremely well when you've learned to touch type as they use the standard "
"letters rather than requiring you to move your hand to the mouse or the "
"arrow keys on your keyboard."
msgstr ""
"Zonder de navigatie sneltoetsen ben ik echt verloren. Daarom adviseer ik je "
"hieraan wat tijd te besteden. Deze sneltoetsen werken ook extreem goed "
"wanneer je blind hebt leren typen vermits zij ook gebruik maken van de "
"standaard letters in plaats van waarvoor u uw hand naar de muis of naar de "
"pijltoetsen op uw toetsenbord moet gaan bewegen."

#: 10.1-Using-Shortcuts.md:68
msgid ""
"You can move to the beginning of the line with `C-a`, the end of the line "
"with `C-e`, up a line with `C-p`, down a line with `C-n`, forward a "
"character with `C-f`, and back a character with `C-b`. You can even delete "
"all the characters from the cursor to the end of the line with `C-k`."
msgstr ""
"Je kan naar het begin van een lijn gaan met`C-a`, naar het einde van de lijn "
"met `C-e`, een lijn omhoog met `C-p`, een lijn naar beneden met `C-n`, een "
"karakter naar voor met `C-f, een karakter teruggaan is `C-b`. Je kan zelfs "
"alle karakters wissen vanaf de cursor tot het einde van de zin met `C-k`."

#: 10.1-Using-Shortcuts.md:74
msgid "Tidy Code"
msgstr "Nette Code"

#: 10.1-Using-Shortcuts.md:76
msgid "To auto-align your code simply press `M-m`."
msgstr "Voor het automatisch uitlijnen van jouw code druk `M-m`."

#: 10.1-Using-Shortcuts.md:78
msgid "Help System"
msgstr "Help-systeem"

#: 10.1-Using-Shortcuts.md:80
msgid ""
"To toggle the help system you can press `M-i`. However, a much more useful "
"shortcut to know is `C-i` which will look up the word underneath the cursor "
"and display the docs if it finds anything. Instant help!"
msgstr ""
"Om het help-systeem in te schakelen kan je `M-i` indrukken. Een nog veel "
"nuttiger sneltoets om te kennen is `C-i`die het woor dat zich onder de "
"cursor bevindt opzoekt en alle docs die hierover gevonden wordt zal tonen. "
"Instant hulp!"

#: 10.1-Using-Shortcuts.md:84
msgid "For a full list take a look at section 10.2 Shortcut Cheatsheet."
msgstr "Voor een volledige lijst kijk je naar punt 10.2 Shortcut Cheatsheet."

#: 10.2-Shortcut-Cheatsheet.md:1
msgid "10.2 Shortcut Cheatsheet"
msgstr "10.2 Shortcut Cheatsheet"

#: 10.2-Shortcut-Cheatsheet.md:3
msgid "Shortcut Cheatsheet"
msgstr "Shortcut Cheatsheet"

#: 10.2-Shortcut-Cheatsheet.md:5
msgid ""
"The following is a summary of the main shortcuts available within Sonic Pi. "
"Please see Section 10.1 for motivation and background."
msgstr ""
"Het volgende is een samenvatting van de belangrijkste sneltoetsen die "
"beschikbaar zijn in Sonic Pi. Zie sectie 10.1 voor motivatie en achtergrond."

#: 10.2-Shortcut-Cheatsheet.md:8
msgid "Conventions"
msgstr "Conventies"

#: 10.2-Shortcut-Cheatsheet.md:10
msgid ""
"In this list, we use the following conventions (where *Meta* is one of *Alt* "
"on Windows/Linux or *Cmd* on Mac):"
msgstr ""
"In deze lijst, gebruiken we de volgende conventies (waar *Meta* staat is "
"dit  *Alt* op Windows/Linux en *Cmd* op Mac):"

#: 10.2-Shortcut-Cheatsheet.md:13
msgid ""
"`C-a` means hold the *Control* key then press the *a* key whilst holding "
"them both at the same time, then releasing."
msgstr ""
"`C-a` betekend hou de *Control* toets en de *a* toets tegelijkertijd in, "
"laat dan los."

#: 10.2-Shortcut-Cheatsheet.md:14
msgid ""
"`M-r` means hold the *Meta* key and then press the *r* key whilst holding "
"them both at the same time, then releasing."
msgstr ""
"`M-r`betekent hou de *Meta* toets en druk dan de *r* toets tegelijkertijd "
"in, laat dan los."

#: 10.2-Shortcut-Cheatsheet.md:15
msgid ""
"`S-M-z` means hold the *Shift* key, then the *Meta* key, then finally the "
"*z* key all at the same time, then releasing."
msgstr ""
"`S-M-z` betekent hou de *Shift* toets, dan de *Meta* toets, en tenslotte de "
"*z* toets tegelijkertijd allemaal in en laat dan los."

#: 10.2-Shortcut-Cheatsheet.md:16
msgid ""
"`C-M-f` means hold the *Control* key, then press *Meta* key, finally the *f* "
"key all at the same time, then releasing."
msgstr ""
"`C-M-f` betekent hou de *Control* toets, dan de *Meta* en tenslotte de *f* "
"toets allemaal tegelijkertijd in, en dan los deze dan."

#: 10.2-Shortcut-Cheatsheet.md:18
msgid "Main Application Manipulation"
msgstr "Belangrijkste Applicatie Manipulatie"

#: 10.2-Shortcut-Cheatsheet.md:20
msgid "`M-r` - Run code"
msgstr "`M-r` - code afspelen"

#: 10.2-Shortcut-Cheatsheet.md:21
msgid "`M-s` - Stop code"
msgstr "`M-s` - Stop code"

#: 10.2-Shortcut-Cheatsheet.md:22
msgid "`M-i` - Toggle Help System"
msgstr "`M-i` - Help Systeem Schakelaar"

#: 10.2-Shortcut-Cheatsheet.md:23
msgid "`M-p` - Toggle Preferences"
msgstr "`M-p` - Voorkeursinstellingen Aan/Uit"

#: 10.2-Shortcut-Cheatsheet.md:24
msgid "`M-{` - Switch buffer to the left"
msgstr "`M-{` - Buffer naar links omwisselen"

#: 10.2-Shortcut-Cheatsheet.md:25
msgid "`M-}` - Switch buffer to the right"
msgstr "`M-}` - Buffer naar links omwisselen"

#: 10.2-Shortcut-Cheatsheet.md:26
msgid "`M-+` - Increase text size of current buffer"
msgstr "`M-+` - Vergroot de tekstgrootte van de huidige buffer"

#: 10.2-Shortcut-Cheatsheet.md:27
msgid "`M--` - Decrease text size of current buffer"
msgstr "`M--` - Verkleint de tekstgrootte van de huidige buffer"

#: 10.2-Shortcut-Cheatsheet.md:29
msgid "Selection/Copy/Paste"
msgstr "Selectie/Kopiëren/Plakken"

#: 10.2-Shortcut-Cheatsheet.md:31
msgid "`M-a` - Select all"
msgstr "`M-a` - Selecteer alles"

#: 10.2-Shortcut-Cheatsheet.md:32
msgid "`M-c` - Copy selection to paste buffer"
msgstr "`M-c` - kopieer selectie om buffer te plakken"

#: 10.2-Shortcut-Cheatsheet.md:33
msgid "`M-]` - Copy selection to paste buffer"
msgstr "`M-]` - Kopieer selectie om buffer te plakken"

#: 10.2-Shortcut-Cheatsheet.md:34
msgid "`M-x` - Cut selection to paste buffer"
msgstr "`M-x` - Knip selectie om buffer te plakken"

#: 10.2-Shortcut-Cheatsheet.md:35
msgid "`C-]` - Cut selection to paste buffer"
msgstr "`C-]` - Knip selectie om buffer te plakken"

#: 10.2-Shortcut-Cheatsheet.md:36
msgid "`C-k` - Cut to the end of the line"
msgstr "`C-k` - Knip tot het einde van de lijn"

#: 10.2-Shortcut-Cheatsheet.md:37
msgid "`M-v` - Paste from paste buffer to editor"
msgstr "`M-v` - Plak naar editor vanaf plak buffer"

#: 10.2-Shortcut-Cheatsheet.md:38
msgid "`C-y` - Paste from paste buffer to editor"
msgstr "`C-y` - Plak naar editor vanaf plak buffer"

#: 10.2-Shortcut-Cheatsheet.md:39
msgid ""
"`C-SPACE` - Set mark. Navigation will now manipulate highlighted region. Use "
"`C-g` to escape."
msgstr ""
"`C-SPACE` - Zet markering. Navigatie zal nu gemarkeerd gebied manipuleren. "
"Gebruik `C-g` om te verlaten."

#: 10.2-Shortcut-Cheatsheet.md:41
msgid "Text Manipulation"
msgstr "Bewerken van tekst"

#: 10.2-Shortcut-Cheatsheet.md:43
msgid "`M-m` - Align all text"
msgstr "`M-m` - Alle tekst uitlijnen"

#: 10.2-Shortcut-Cheatsheet.md:44
msgid "`Tab` - Align current line or selection (or select autocompletion)"
msgstr ""
"`Tab` - Huidige lijn uitlijnen of selectie (of selecteer automatisch "
"aanvullen)"

#: 10.2-Shortcut-Cheatsheet.md:45
msgid "`C-l` - Centre editor"
msgstr "`C-l` - Editor Centreren"

#: 10.2-Shortcut-Cheatsheet.md:46
msgid "`M-/` - Comment/Uncomment current line or selection"
msgstr "`M-/` - Comment/Uncomment huidige lijn of selectie"

#: 10.2-Shortcut-Cheatsheet.md:47
msgid "`C-t` - Transpose/swap characters"
msgstr "`C-t` - Karakters omzetten/ruilen"

#: 10.2-Shortcut-Cheatsheet.md:48
msgid "`M-u` - Convert next word (or selection) to upper case."
msgstr "`M-u` - Volgende woord (of selectie) omzetten in hoofdletters."

#: 10.2-Shortcut-Cheatsheet.md:49
msgid "`M-l` - Convert next word (or selection) to lower case."
msgstr "`M-l` - -Volgende woord (of selectie) omzetten in kleine letters."

#: 10.2-Shortcut-Cheatsheet.md:53
msgid "`C-a` - Move to beginning of line"
msgstr "`C-a` - Naar het begin van de lijn"

#: 10.2-Shortcut-Cheatsheet.md:54
msgid "`C-e` - Move to end of line"
msgstr "`C-e` -Verplaats naar einde van regel"

#: 10.2-Shortcut-Cheatsheet.md:55
msgid "`C-p` - Move to previous line"
msgstr "`C-p` -Verplaatsen naar vorige regel"

#: 10.2-Shortcut-Cheatsheet.md:56
msgid "`C-n` - Move to next line"
msgstr "`C-n` - Verplaatsen naar volgende regel"

#: 10.2-Shortcut-Cheatsheet.md:57
msgid "`C-f` - Move forward one character"
msgstr "`C-f` -Eén teken naar rechts verplaatsen"

#: 10.2-Shortcut-Cheatsheet.md:58
msgid "`C-b` - Move backward one character"
msgstr "`C-b` - Eén teken naar achter verplaatsen"

#: 10.2-Shortcut-Cheatsheet.md:59
msgid "`M-f` - Move forward one word"
msgstr "`M-f` - Eén woord naar voor springen"

#: 10.2-Shortcut-Cheatsheet.md:60
msgid "`M-b` - Move backward one word"
msgstr "`M-b` -  Eén woord naar achter springen"

#: 10.2-Shortcut-Cheatsheet.md:61
msgid "`C-M-n` - Move line or selection down"
msgstr "`C-M-n` -Zet lijn of selectie naar beneden"

#: 10.2-Shortcut-Cheatsheet.md:62
msgid "`C-M-p` - Move line or selection up"
msgstr "`C-M-p` - Zet lijn of selectie naar boven"

#: 10.2-Shortcut-Cheatsheet.md:63
msgid "`S-M-u` - Move up 10 lines"
msgstr "`S-M-u` - 10 lijnen naar boven gaan"

#: 10.2-Shortcut-Cheatsheet.md:64
msgid "`S-M-d` - Move down 10 lines"
msgstr "`S-M-d` - 10 lijnen naar beneden gaan"

#: 10.2-Shortcut-Cheatsheet.md:65
msgid "`M-<` - Move to beginning of buffer"
msgstr "`M-<` - Naar het begin van de buffer gaan"

#: 10.2-Shortcut-Cheatsheet.md:66
msgid "`M->` - Move to end of buffer"
msgstr "`M->` - Naar het eind van de buffer gaan"

#: 10.2-Shortcut-Cheatsheet.md:68
msgid "Deletion"
msgstr "Verwijdering"

#: 10.2-Shortcut-Cheatsheet.md:70
msgid "`C-h` - Delete previous character"
msgstr "`C-h` - Vorige teken verwijderen"

#: 10.2-Shortcut-Cheatsheet.md:71
msgid "`C-d` - Delete next character"
msgstr "`C-d` - Volgend teken verwijderen"

#: 10.2-Shortcut-Cheatsheet.md:73
msgid "Advanced Editor Features"
msgstr "Geavanceerde Editor Functies"

#: 10.2-Shortcut-Cheatsheet.md:75
msgid "`C-i` - Show docs for word under cursor"
msgstr "`C-i` - Toon docs voor het woord onder de cursor"

#: 10.2-Shortcut-Cheatsheet.md:76
msgid "`M-z` - Undo"
msgstr "`M-z` - Ongedaan maken"

#: 10.2-Shortcut-Cheatsheet.md:77
msgid "`S-M-z` - Redo"
msgstr "`S-M-z` - Opnieuw maken"

#: 10.2-Shortcut-Cheatsheet.md:78
msgid "`C-g` - Escape"
msgstr "`C-g` - Verlaten"

#: 10.2-Shortcut-Cheatsheet.md:79
msgid "`S-M-f` - Toggle fullscreen mode"
msgstr "`S-M-f` - Tussen Fullscreen modus schakelen"

#: 10.2-Shortcut-Cheatsheet.md:80
msgid "`S-M-b` - Toggle visibility of buttons"
msgstr "`S-M-b`- Zichtbaarheid van knoppen in-/uitschakelen"

#: 10.2-Shortcut-Cheatsheet.md:81
msgid "`S-M-l` - Toggle visibility of log"
msgstr "`S-M-l` - Zichtbaarheid van log in-/uitschakelen"

#: 10.2-Shortcut-Cheatsheet.md:82
msgid "`S-M-m` - Toggle between light/dark modes"
msgstr "`S-M-m` - Tussen licht/donker modus schakelen"

#: 10.3-Sharing.md:1
msgid "10.3 Sharing"
msgstr "10.3 Delen"

#: 10.3-Sharing.md:3
msgid "Sharing"
msgstr "Delen"

#: 10.3-Sharing.md:5
msgid "Sonic Pi is all about sharing and learning with each other."
msgstr "Sonic Pi gaat helemaal over het delen en leren met elkaar."

#: 10.3-Sharing.md:7
msgid ""
"Once you've learned how to code music, sharing your compositions is as "
"simple as sending an email containing your code. Please do *share* your code "
"with others so they can *learn* from your work and even use parts in a new "
"*mash-up*."
msgstr ""
"Zodra je geleerd hebt hoe je muziek codeert, is het delen van uw composities "
"zo eenvoudig als het verzenden van een e-mail met jouw code.Deel alsjeblief "
"je code met anderen zodat zij kunnen *leren* van jouw werk en misschien "
"onderdelen te gebruiken in een nieuwe *mash-up*."

#: 10.3-Sharing.md:12
msgid ""
"If you're unsure of the best way to share your work with others I recommend "
"putting your code on [GitHub](https://github.com) and your music on "
"[SoundCloud](https://soundcloud.com). That way you'll be able to easily "
"reach a large audience."
msgstr ""
"Als u niet zeker bent van de manier om je werk met anderen te delen, "
"adviseer ik om je code op [GitHub] (https://github.com) en uw muziek op "
"[SoundCloud] (https://soundcloud.com) te zetten. Op die manier kun je "
"gemakkelijk een groot publiek bereiken ."

#: 10.3-Sharing.md:17
msgid "Code -> GitHub"
msgstr "Code -> GitHub"

#: 10.3-Sharing.md:19
msgid ""
"[GitHub](https://github.com) is a site for sharing and working with code. "
"It's used by professional developers as well as artists for sharing and "
"collaborating with code. The simplest way to share a new piece of code (or "
"even an unfinished piece) is to create a [Gist](https://gist.github.com). A "
"[Gist](https://gist.github.com) is a simple way of uploading your code in a "
"simple way that others can see, copy and share."
msgstr ""
"[GitHub] (https://github.com) is een site om met codete werken en deze te "
"delen. Het wordt gebruikt door professionele ontwikkelaars, maar ook "
"artiesten delen en werken samen aan code. De eenvoudigste manier om een "
"nieuw stuk code te delen (zelfs een onvoltooide stukje) is het creëren van "
"een [Gist] (https://gist.github.com). Een [Gist] (https://gist.github.com) "
"is een eenvoudige manier om  uw code te uploaden van op een zodat anderen "
"deze kunnen zien, kopiëren en delen."

#: 10.3-Sharing.md:27
msgid "Audio -> SoundCloud"
msgstr "Audio -> SoundCloud"

#: 10.3-Sharing.md:29
msgid ""
"Another important way of sharing your work is to record the audio and upload "
"it to [SoundCloud](https://soundcloud.com). Once you've uploaded your piece, "
"other users can comment and discuss your work. I also recommend placing a "
"link to a [Gist](https://gist.github.com) of your code in the track "
"description."
msgstr ""
"Een andere belangrijke manier om je werk te delen is de audio opnemen en te "
"uploaden naar [SoundCloud] (https://soundcloud.com). Zodra je je stuk "
"geüpload hebt, kunnen andere gebruikers commentaar geven en je werk "
"bespreken . Ik adviseer ook een link te plaatsen van naar een [Gist] "
"(https://gist.github.com) met uw code en daarbij de beschrijving van deze "
"track."

#: 10.3-Sharing.md:35
msgid ""
"To record your work, hit the `Rec` button in the toolbar, and recording "
"starts immediately. Hit `Run` to start your code if it isn't already in "
"progress. When you're done recording, press the flashing `Rec` button again, "
"and you'll be prompted to enter a filename. The recording will be saved as a "
"WAV file, which can be edited and converted to MP3 by any number of free "
"programs (try Audacity for instance)."
msgstr ""
"Om je werk op te nemen, sla de`Opname` toets aan in de gereedschapsbalk, en "
"de opname start onmiddellijk. Klik `Afspelen` om de code te starten als deze "
"nog niet bezig mocht zijn. Als je klaar bent, druk opnieuw op de knipperende "
"`Opname` knop, en je zal gevraagd worden om een bestandsnaam te kiezen. De "
"opname wordt opgeslagen als een WAV-bestand, dat kan worden bewerkt en "
"geconverteerd naar MP3. Dit kan zelfs door een gratis programma (je kan "
"bijvoorbeeld Audacity proberen)."

#: 10.3-Sharing.md:43
msgid "Hope"
msgstr "Hoop"

#: 10.3-Sharing.md:45
msgid ""
"I encourage you to share your work and really hope that we'll all teach each "
"other new tricks and moves with Sonic Pi. I'm really excited by what you'll "
"have to show me."
msgstr ""
"Ik moedig je aan om je werk te delen en ik hoop echt dat we van elkaar "
"nieuwe trukjes kunnen leren en met Sonic Pi  verder kunnen evolueren. Ik ben "
"er echt enthousiast om wat jij mij gaat laten zien."

#: 10.4-Performing.md:1
msgid "10.4 Performing"
msgstr "10.4 Optreden"

#: 10.4-Performing.md:3
msgid "Performing"
msgstr "Optreden"

#: 10.4-Performing.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to use "
"code as a *musical instrument*. This means that writing code live can now be "
"seen as a new way of performing music."
msgstr ""
"Een van de meest boeiende aspecten van Sonic Pi is dat je code kunt "
"gebruiken als een *muzikaal instrument*. Dit betekent dat het schrijven van "
"live code kan worden gezien als een nieuwe manier om muziek uit te voeren."

#: 10.4-Performing.md:9
msgid "We call this *Live Coding*."
msgstr "We noemen dit *Live coderen*."

#: 10.4-Performing.md:11
msgid "Show Your Screen"
msgstr "Laat je scherm zien"

#: 10.4-Performing.md:13
msgid ""
"When you live code I recommend you *show your screen* to your audience. "
"Otherwise it's like playing a guitar but hiding your fingers and the "
"strings. When I practice at home I use a Raspberry Pi and a little mini "
"projector on my living room wall. You could use your TV or one of your "
"school/work projectors to give a show. Try it, it's a lot of fun."
msgstr ""
"Wanneer je live codeert rad ik je aan om *je scherm te tonen* aan je "
"publiek. Anders ben je je als een gitarist die zijn handen niet laat zien. "
"Wanneer ik thuis oefen gebruik ik een Raspberry Pi en een kleine mini "
"projector gericht op de muur van mijn living. Je zou je TV kunnen gebruiken "
"of een projector van het werk of jouw school om een show te geven. Probeer "
"dit, het is erg leuk."

#: 10.4-Performing.md:20
msgid "Form a Band"
msgstr "Vorm een Band"

#: 10.4-Performing.md:22
msgid ""
"Don't just play on your own - form a live coding band! It's a lot of fun "
"jamming with others. One person could do beats, another ambient background, "
"etc. See what interesting combinations of sounds you can have together."
msgstr ""
"Speel niet op je eentje - richt een live coding bandje op. Het is fijn om "
"met anderen te jammen. Eén persoon kan dan bijvoorbeeld de beats doen, een "
"andere de  ambient achtergrond, enz. Zie wat voor interessante combinaties "
"van geluiden je samen kunt hebben."

#: 10.4-Performing.md:27
msgid "TOPLAP"
msgstr "TOPLAP"

#: 10.4-Performing.md:29
msgid ""
"Live coding isn't completely new - a small number of people have been doing "
"it for a few years now, typically using bespoke systems they've built for "
"themselves. A great place to go and find out more about other live coders "
"and systems is [TOPLAP](http://toplap.org)."
msgstr ""
"Live coderen is niet nieuw - een kleine groep mensen doen dit al gedurende "
"enkele jaren meestal met behulp van op maat gemaakte systemen die ze voor "
"zichzelf hebben gebouwd. Een goeie plek om meer over deze live coders en hun "
"systemen te weten te komen is  [TOPLAP](http://toplap.org)."

#: 10.4-Performing.md:34
msgid "Algorave"
msgstr "Algorave"

#: 10.4-Performing.md:36
msgid ""
"Another great resource for exploring the live coding world is [Algorave]"
"(http://algorave.com). Here you can find all about a specific strand of live "
"coding for making music in nightclubs."
msgstr ""
"Een andere interessante bron om de wereld van live coding te leren kennen is "
"[Algorave](http://algorave.com). Hier kan je alles vinden over de "
"verschillende onderdelen om live te spelen in een nachtclub."

#: 11-Minecraft-Pi.md:1
msgid "11 Minecraft Pi"
msgstr "11 Minecraft Pi"

#: 11-Minecraft-Pi.md:3
msgid "Minecraft Pi"
msgstr "Minecraft Pi"

#: 11-Minecraft-Pi.md:5
msgid ""
"Sonic Pi now supports a simple API for interacting with Minecraft Pi - the "
"special edition of Minecraft which is installed by default on the Raspberry "
"Pi's Raspbian Linux-based operating system."
msgstr ""
"Sonic Pi ondersteunt nu een eenvoudige API voor interactie met Minecraft Pi -"
" de speciale editie van Minecraft is standaard op de Raspberry Pi's ("
"Raspbian's Linux-gebaseerd OS) geïnstalleerd."

#: 11-Minecraft-Pi.md:9
msgid "No need to import libraries"
msgstr "Libraries importeren onnodig"

#: 11-Minecraft-Pi.md:11
msgid ""
"The Minecraft Pi integration has been designed to be insanely easy to use. "
"All you need to do is to launch Minecraft Pi and create a world. You're then "
"free to use the `mc_*` fns just like you might use `play` and `synth`. "
"There's no need to import anything or install any libraries - it's all ready "
"to go and works out of the box."
msgstr ""
"De Minecraft Pi-integratie is ontwikkeld om makkelijk te gebruiken. Al wat "
"je moet te doen is te Minecraft Pi lanceren en een wereld creëren. Dan bent "
"je vrij om `mc_*` fns te gebruiken, net zoals `play` and `synth` . Er is "
"geen behoefte om te bibliotheken te gaan importeren -alles is klaar om te "
"gaan gebruiken."

#: 11-Minecraft-Pi.md:17
msgid "Automatic Connection"
msgstr "Automatische Verbinding"

#: 11-Minecraft-Pi.md:19
msgid ""
"The Minecraft Pi API takes care of managing your connection to the Minecraft "
"Pi application. This means you don't need to worry about a thing. If you try "
"and use the Minecraft Pi API when Minecraft Pi isn't open, Sonic Pi will "
"politely tell you. Similarly, if you close Minecraft Pi whilst you're still "
"running a `live_loop` that uses the API, the live loop will stop and "
"politely tell you that it can't connect. To reconnect, just launch Minecraft "
"Pi again and Sonic Pi will automatically detect and re-create the connection "
"for you."
msgstr ""
"De Minecraft Pi API zorgt voor het beheren van uw verbinding met de "
"Minecraft Pi-toepassing.Geen zorgen dus. Als u probeert  Minecraft Pi API "
"te  gebruiken wanneer Minecraft Pi niet geopend is, zal Sonic Pi je dat "
"vriendelijk vertellen.Ook als u Minecraft Pi sluit terwij ler nog steeds een "
"'live_loop' speelt, die gebruik maakt van de API, zal de live loop stoppen "
"en je vertellen dat deze geen verbinding kan maken. Als je wil verbinden, "
"lanceer gewoon opnieuw de Minecraft Pi en Sonic Pi zal dan automatisch "
"detecteren en de verbinding voor u opnieuw  maken."

#: 11-Minecraft-Pi.md:28
msgid "Designed to be Live Coded"
msgstr "Ontworpen om Live gecodeerd te worden"

#: 11-Minecraft-Pi.md:30
msgid ""
"The Minecraft Pi API has been designed to work seamlessly within "
"`live_loop`s. This means it's possible to synchronise modifications in your "
"Minecraft Pi worlds with modifications in your Sonic Pi sounds. Instant "
"Minecraft-based music videos! Note however that Minecraft Pi is alpha "
"software and is known to be slightly buggy. If you encounter any problems "
"simply restart Minecraft Pi and carry on as before. Sonic Pi's automatic "
"connection functionality will take care of things for you."
msgstr ""
"De Minecraft Pi API is ontworpen om naadloos te werken binnen ' live_loop. "
"Hierdoor is het mogelijk om wijzigingen in uw Minecraft Pi werelden te "
"synchroniseren met wijzigingen in uw Sonic Pi klanken. Instant Minecraft "
"gebaseerde muziek video's! Merk wel op dat het gaat om Minecraft Pi Alfa "
"software is endus enigszins buggy. Als u problemen hebt, start Minecraft Pi "
"gewoon terug op. Sonic Pi's automatische verbinding functionaliteit zal voor "
"de rest zorgen."

#: 11-Minecraft-Pi.md:39
msgid "Requires a Raspberry Pi 2.0"
msgstr "Een Raspberry Pi 2.0 vereist"

#: 11-Minecraft-Pi.md:41
msgid ""
"It is highly recommended that you use a Raspberry Pi 2 if you wish to run "
"both Sonic Pi and Minecraft at the same time - especially if you want to use "
"Sonic Pi's sound capabilities."
msgstr ""
"Het is sterk aanbevolen een Raspberry Pi 2 te gebruiken als u Sonic Pi en "
"Minecraft samen gebruikt - vooral als je gebruik wilt maken van Sonic Pi's "
"geluids mogelijkheden."

#: 11-Minecraft-Pi.md:45
msgid "API Support"
msgstr "API-ondersteuning"

#: 11-Minecraft-Pi.md:47
msgid ""
"At this stage, Sonic Pi supports basic block and player manipulations which "
"are detailed in Section 11.1. Support for event callbacks triggered by "
"player interactions in the world is planned for a future release."
msgstr ""
"In dit stadium ondersteunt Sonic Pi fundamentele blok en manipulaties van de "
"speler die zijn beschreven in de sectie 11.1. Ondersteuning voor event "
"callbacks getriggerd door interacties met de speler en de rest van de wereld "
"is gepland voor een toekomstige versie."

#: 11.1-Basic-API.md:1
msgid "11.1 Basic API"
msgstr "11.1 Basis API"

#: 11.1-Basic-API.md:3
msgid "Basic Minecraft Pi API"
msgstr "Basis Minecraft Pi API"

#: 11.1-Basic-API.md:5
msgid ""
"Sonic Pi currently supports the following basic interactions with Minecraft "
"Pi:"
msgstr ""
"Sonic Pi ondersteunt momenteel de volgende fundamentele interacties met "
"Minecraft Pi:"

#: 11.1-Basic-API.md:7 11.1-Basic-API.md:16
msgid "Displaying chat messages"
msgstr "Chatberichten weergeven"

#: 11.1-Basic-API.md:8 11.1-Basic-API.md:33
msgid "Setting the position of the user"
msgstr "De plaats van de gebruiker instellen"

#: 11.1-Basic-API.md:9
msgid "Getting the position of the user"
msgstr "De positie van de gebruiker verkrijgen"

#: 11.1-Basic-API.md:10
msgid "Setting the block type at a given coordinate"
msgstr "Het bloktype instellen op een bepaalde coördinaat"

#: 11.1-Basic-API.md:11
msgid "Getting the block type at a given coordinate"
msgstr "Het krijgen van het bloktype bij een bepaalde coördinaat"

#: 11.1-Basic-API.md:14
msgid "Let's look at each of these in turn."
msgstr "Laten we deze op hun beurt eens bekijken ."

#: 11.1-Basic-API.md:18
msgid ""
"Let's see just how easy it is to control Minecraft Pi from Sonic Pi. First, "
"make sure you have both Minecraft Pi and Sonic Pi open at the same time and "
"also make sure you've entered a Minecraft world and can walk around."
msgstr ""
"Laten we eens kijken hoe makkelijk het is om Minecraft Pi vanuit  Sonic Pi "
"te controllen. Controleer eerst of u zowel Minecraft Pi en Sonic Pi open "
"hebt staan en ook zorg ervoor dat u een Minecraft wereld hebt ingevoerd en "
"je hier kan in rondlopen."

#: 11.1-Basic-API.md:23
msgid "In a fresh Sonic Pi buffer simply enter the following code:"
msgstr "Voer de volgende code in een verse Sonic Pi-buffer:"

#: 11.1-Basic-API.md:25
#, no-wrap
msgid "mc_message \"Hello from Sonic Pi\""
msgstr "mc_message \"Hello from Sonic Pi\""

#: 11.1-Basic-API.md:29
msgid ""
"When you hit the *Run* button, you'll see your message flash up on the "
"Minecraft window. Congratulations, you've written your first Minecraft code! "
"That was easy wasn't it."
msgstr ""
"Wanneer je de *Afspeel* knop indrukt zal je je berichtje openspringen op het "
"Minecraft-scherm. Gefeliciteerd, hebt u uw eerste Minecraft code geschreven! "
"Dat was niet moeilijk."

#: 11.1-Basic-API.md:35
msgid ""
"Now, let's try a little magic. Let's teleport ourselves somewhere! Try the "
"following:"
msgstr ""
"Nu gaan we  wat magie gebruiken. Laten we onszelf naar ergens anders "
"teleporteren. Probeer het volgende:"

#: 11.1-Basic-API.md:38
#, no-wrap
msgid "mc_teleport 50, 50, 50"
msgstr "mc_teleport 50, 50, 50"

#: 11.1-Basic-API.md:42
msgid ""
"When you hit *Run* - boom! You're instantantly transported to a new place. "
"Most likely it was somewhere in the sky and you fell down either to dry land "
"or into water. Now, what are those numbers: `50, 50, 50`? They're the "
"coordinates of the location you're trying to teleport to. Let's take a brief "
"moment to explore what coordinates are and how they work because they're "
"really, really important for programming Minecraft."
msgstr ""
"Wanneer je de * afspeel* knop indrukt - bam! Je bent inmiddelijk op een "
"nieuwe plek. Waarschijnlijk ergens in de lucht en dat je op de grond of in "
"het water viel. Nu, wat zijn die nummers : '50, 50, 50'? Dat zijn de "
"coördinaten van de plaats waarnaartoe je probeerde te teleporteren. Neem de "
"tijd om  coördinaten te verkennen en wat deze  zijn en hoe ze werken.Dit is "
"echt belangrijk om Minecraft te kunnen programmeren."

#: 11.1-Basic-API.md:50
msgid "Coordinates"
msgstr "Coördinaten"

#: 11.1-Basic-API.md:52
msgid ""
"Imagine a pirate's map with a big `X` marking the location of some treasure. "
"The exact location of the `X` can be described with two numbers - how far "
"along the map from left to right and how far along the map from bottom to "
"top. For example `10cm` across and `8cm` up. These two numbers `10` and `8` "
"are coordinates. You could easily imagine describing the locations of other "
"stashes of treasure with other pairs of numbers. Perhaps there's a big chest "
"of gold at `2` across and `9` up..."
msgstr ""
"Stel je een piraten kaart voor met een grote `X` om de locatie van één of "
"andere schat te markeren. De exacte locatie van de  `X`  kan beschreven "
"worden met twee cijfers- hoe ver van links naar rechts op de kaart en hoe "
"ver op de kaart van beneden naar boven in de kaart. Bijvoorbeeld  `10cm` "
"over en `8cm`  naar omhoog. Deze twee nummers `10` en `8` zijn coördinaten. "
"U kan zich goed voorstellen hoe een beschrijving van andere locaties van "
"schatten met andere cijfercombinaties. Misschien is er een grote kist met "
"goud aan `2` langs en `9` omhoog..."

#: 11.1-Basic-API.md:61
msgid ""
"Now, in Minecraft two numbers isn't quite enough. We also need to know how "
"high we are. We therefore need three numbers:"
msgstr ""
"In Minecraft zijn twee getallen niet genoeg. We willen ook weten hoe hoog we "
"zijn. Daarvoor hebben we drie getallen nodig:"

#: 11.1-Basic-API.md:64
msgid "How far from right to left in the world - `x`"
msgstr "Hoe ver van rechts naar links in de wereld - 'x'"

#: 11.1-Basic-API.md:65
msgid "How far from front to back in the world - `z`"
msgstr "Hoe ver van voren naar achteren in de wereld - 'z'"

#: 11.1-Basic-API.md:66
msgid "How high up we are in the world - `y`"
msgstr "Hoe hoog, we in de wereld zijn - 'y'"

#: 11.1-Basic-API.md:68
msgid ""
"One more thing - we typically describe these coordinates in this order `x`, "
"`y`, `z`."
msgstr ""
"Één ding nog - we schrijven meestal deze coördinaten in deze volgorde`x`, `y`"
", `z`."

#: 11.1-Basic-API.md:71
msgid "Finding your current coordinates"
msgstr "Uw huidige coördinaten vinden"

#: 11.1-Basic-API.md:73
msgid ""
"Let's have a play with coordinates. Navigate to a nice place in the "
"Minecraft map and then switch over to Sonic Pi. Now enter the following:"
msgstr ""
"Laten we eens spelen met de coördinaten. Navigeer naar een mooie plek in de "
"Minecraft kaart en schakel naar de Sonic Pi. Voer nu de volgende gegevens in:"

#: 11.1-Basic-API.md:76
#, no-wrap
msgid "puts mc_location"
msgstr "puts mc_location"

#: 11.1-Basic-API.md:80
msgid ""
"When you hit the *Run* button you'll see the coordinates of your current "
"position displayed in the log window. Take a note of them, then move forward "
"in the world and try again. Notice how the coordinates changed! Now, I "
"recommend you spend some time repeating exactly this - move a bit in the "
"world, take a look at the coordinates and repeat. Do this until you start to "
"get a feel for how the coordinates change when you move. Once you've "
"understood how coordinates work, programming with the Minecraft API will be "
"a complete breeze."
msgstr ""
"Wanneer je de*Afspeel* knop drukt zie je de coördinaten van uw huidige "
"positie weergegeven in het logboekvenster. Neem hier nota van, ga vooruit in "
"de wereld en probeer het opnieuw. Merk op hoe de coördinaten veranderen! Nu, "
"adviseer ik om dit enige tijd te herhalen - beweeg een beetje in de wereld, "
"neem een kijkje naar de coördinaten en herhaal. Doe dit tot je er gevoel "
"voor begint te krijgen hoe de coördinaten veranderen wanneer u zich "
"verplaatst. Zodra u hebt begrepen hoe coördinaten werken, zal programmeren "
"met de Minecraft-API peanuts zijn."

#: 11.1-Basic-API.md:89
msgid "Let's Build!"
msgstr "Laten we bouwen!"

#: 11.1-Basic-API.md:91
msgid ""
"Now that you know how to find the current position and to teleport using "
"coordinates, you have all the tools you need to start building things in "
"Minecraft with code. Let's say you want to make the block with coordinates "
"`40`, `50`, `60` to be glass. That's super easy:"
msgstr ""
"Nu je de huidige positie weet te vinden en hoe te teleporteren met behulp "
"van coördinaten, heb je alle hulpmiddelen die die je nodig hebt om  met code "
"te beginnen bouwen  in Minecraft. Stel dat je het blok met coördinaten `40`, "
"`50`, `60` van glas wordt. Dat is dan super eenvoudig:"

#: 11.1-Basic-API.md:96
#, no-wrap
msgid "mc_set_block :glass, 40, 50, 60"
msgstr "mc_set_block :glass, 40, 50, 60"

#: 11.1-Basic-API.md:100
msgid ""
"Haha, it really was that easy. To see your handywork just teleport nearby "
"and take a look:"
msgstr ""
"Haha, het was echt zo makkelijk. Om je werkstuk te zien teleporteer je je in "
"de buurt:"

#: 11.1-Basic-API.md:103
#, no-wrap
msgid "mc_teleport 35, 50, 60"
msgstr "mc_teleport 35, 50, 60"

#: 11.1-Basic-API.md:107
msgid ""
"Now turn around and you should see your glass block! Try changing it to "
"diamond:"
msgstr ""
"Draai nu even rond en je zou je glazen blok moeten zien staan! Probeer deze "
"nu te veranderen in diamant:"

#: 11.1-Basic-API.md:110
#, no-wrap
msgid "mc_set_block :diamond, 40, 50, 60"
msgstr "mc_set_block :diamond, 40, 50, 60"

#: 11.1-Basic-API.md:114
msgid ""
"If you were looking in the right direction you might have even seen it "
"change in front of your eyes! This is the start of something exciting..."
msgstr ""
"Als je in de juiste richting gekeken hebt heb je het misschien zién "
"veranderen! Dit is het begin van iets spannends..."

#: 11.1-Basic-API.md:117
msgid "Looking at blocks"
msgstr "Blokken bekijken"

#: 11.1-Basic-API.md:119
msgid ""
"Let's look at one last thing before we move onto something a bit more "
"involved. Given a set of coordinates we can ask Minecraft what the type of a "
"specific block is. Let's try it with the diamond block you just created:"
msgstr ""
"Laat we naar een laatste ding kijken, voor we ons engageren in iets anders. "
"Met een set aan coördinaten kunnen we Minecraft vragen van welk type een "
"bepaalde blok is. Laat ons dit proberen met onze net aangemaakte blok:"

#: 11.1-Basic-API.md:124
#, no-wrap
msgid "puts mc_get_block 40, 50, 60"
msgstr "puts mc_get_block 40, 50, 60"

#: 11.1-Basic-API.md:128
msgid ""
"Yey! It's `:diamond`. Try changing it back to glass and asking again - does "
"it now say `:glass`? I'm sure it does :-)"
msgstr ""
"Jeuj! Het is `:diamond`.Probeer deze terug te veranderen naar glas en vraag "
"dan opnieuw- zegt het nu `:glass`? Ik ben zeker van wel :-)"

#: 11.1-Basic-API.md:131
msgid "Available block types"
msgstr "Beschikbare bloktypes"

#: 11.1-Basic-API.md:133
msgid ""
"Before you go on a Minecraft Pi coding rampage, you might find this list of "
"available block types useful:"
msgstr ""
"Voordat je op op ramkoers gaat met Minecraft Pi codering , misschien vindt u "
"deze lijst van beschikbare bloktypes dan nuttig:"

#: 11.1-Basic-API.md:136
#, no-wrap
msgid ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"
msgstr ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"

#: 12-Conclusions.md:1
msgid "12 Conclusions"
msgstr "12 conclusies"

#: 12-Conclusions.md:3
msgid "Conclusions"
msgstr "Conclusies"

#: 12-Conclusions.md:5
msgid ""
"This concludes the Sonic Pi introductory tutorial. Hopefully you've learned "
"something along the way. Don't worry if you feel you didn't understand "
"everything - just play and have fun and you'll pick things up in your own "
"time. Feel free to dive back in when you have a question that might be "
"covered in one of the sections."
msgstr ""
"Dit rond Sonic Pi's handleiding af. Hopelijk heb je terloops iets "
"bijgeleerd. Maak je geen zorgen als het voelt alsof je niet alles begrepen "
"hebt - speel er gewoon mee en heb plezier in wat je doet, zo zal je op je "
"eigen tempo nieuwe leerstof tot je opnemen. Duik gerust terug in een sectie "
"waarover je nog vragen hebt."

#: 12-Conclusions.md:11
msgid ""
"If you have any questions that haven't been covered in the tutorial, then "
"please jump onto the [Sonic Pi forums](http://groups.google.com/group/sonic-"
"pi/) and ask your question there. You'll find someone friendly and willing "
"to lend a hand."
msgstr ""
"Hebt je vragen die nog niet behandeld zijn in de tutorial, ga even naar ["
"Sonic Pi forums] (http://groups.google.com/group/sonic-pi/) en stel je vraag "
"daar. Dan vind je wel iemand die vriendelijk en bereid is om een handje te "
"helpen."

#: 12-Conclusions.md:16
msgid ""
"Finally, I also invite you to take a deeper look at the rest of the "
"documentation in this help system. There are a number of features that "
"haven't been covered in this tutorial that are waiting for your discovery."
msgstr ""
"Ten slotte, nodigen ik je ook uit om je wat nader tot de rest van de "
"documentatie in dit help-systeem te wenden. Er zijn een heleboel functies "
"die nog niet behandeld zijn in deze handleiding en die jij nog kan ontdekken."

#: 12-Conclusions.md:21
msgid ""
"So play, have fun, share your code, perform for your friends, show your "
"screens and remember:"
msgstr ""
"Dus speel, heb veel plezier, deel jouw code, treed op voor vrienden, toon "
"jouw scherm en vergeet niet:"

#: 12-Conclusions.md:24
msgid "*There are no mistakes, only opportunities.*"
msgstr "*Er zijn geen fouten, alleen maar kansen*"

#: 12-Conclusions.md:26
msgid "[Sam Aaron](http://twitter.com/samaaron)"
msgstr "[Sam Aaron](http://twitter.com/samaaron)"

#: A-Articles.md:1
msgid "A Appendix A - MagPi Articles"
msgstr "A Appendix A - MagPi artikelen"

#: A-Articles.md:3
msgid "MagPi Articles"
msgstr "MagPi artikelen"

#: A-Articles.md:5
msgid ""
"Appendix A collects all the Sonic Pi articles written for the MagPi magazine."
msgstr ""
"Bijlage A verzamelt alle de Sonic Pi artikelen geschreven voor het "
"tijdschrift MagPi."

#: A-Articles.md:8
msgid "Dive into Topics"
msgstr "Duik in Onderwerpen"

#: A-Articles.md:10
msgid ""
"These articles aren't meant to be read in any strict order and contain a lot "
"of cross-over material from the tutorial itself. Rather than try and teach "
"you all of Sonic Pi, they instead each focus on a specific aspect of Sonic "
"Pi and cover it in a fun and accessible way."
msgstr ""
"Deze artikelen zijn niet bedoeld om in een strikte volgorde  te worden "
"gelezen en bevatten veel cross-over materiaal uit de tutorial zelf. In "
"plaats van te proberen je alles van Sonic Pi te leren, zijn ze elk gericht "
"op een specifiek aspect van Sonic Pi en dit op een leuke en toegankelijke "
"manier."

#: A-Articles.md:15
msgid "Read the MagPi"
msgstr "Lees de MagPi"

#: A-Articles.md:17
msgid ""
"You can see them in their glorious professionally typeset form in the free "
"PDF downloads of The MagPi here: https://www.raspberrypi.org/magpi/"
msgstr ""
"Je kan ze in hun glorieuze professioneel ✓ vorm zien in de gratis PDF-"
"downloads van de MagPi : https://www.raspberrypi.org/magpi/"

#: A-Articles.md:20
msgid "Suggest a Topic"
msgstr "Een onderwerp suggereren"

#: A-Articles.md:22
msgid ""
"If you don't see a topic that interests you covered in these articles - why "
"not suggest one? The easiest way to do that is to tweet your suggestion to "
"[@Sonic_Pi](http://twitter.com/sonic_pi). You never know - your suggestion "
"might be the subject of the next article!"
msgstr ""
"Mocht het zijn dart er een onderwerp ontbreekt dat jou interesseert - waarom "
"zou je daar dan geen suggestie over kunnen maken? De makkelijkste manier om "
"dit te doen is jouw suggestie tweeten naar "
"[@Sonic_Pi](http://twitter.com/sonic_pi). Jouw suggestie kan wel eens het "
"onderwerp van het volgende artikel zijn!"

#: A.01-tips.md:1
msgid "A.1 Tips for Sonic Pi"
msgstr "A.1 Tips voor Sonic Pi"

#: A.01-tips.md:3
msgid "Five Top Tips"
msgstr "Vijf Top Tips"

#: A.01-tips.md:5
msgid "1. There are no mistakes"
msgstr "1. Er bestaan geen fouten"

#: A.01-tips.md:7
msgid ""
"The most important lesson to learn with Sonic Pi is that there really are no "
"mistakes. The best way to learn is to just try and try and try. Try lots of "
"different things out, stop worrying whether your code sounds good or not and "
"start experimenting with as many different synths, notes, FX and opts as "
"possible. You'll discover a lot of things that make you laugh because they "
"sound just awful and some real gems that sound truly amazing. Simply drop "
"the things you don't like and keep the things you do. The more 'mistakes' "
"you allow yourself to make the quicker you'll learn and discover your "
"personal coding sound."
msgstr ""
"De belangrijkste les om leren in Sonic Pi is dat er geen echte fouten "
"bestaan. De beste manier van leren is om gewoon te  proberen en te proberen "
"en te proberen. Probeer verschillende dingen uit, stop ermee je zorgen te "
"maken of je code nu goed klinkt of niet en begin te experimenteren met "
"zoveel mogelijk verschillende synths, noten, FX als mogelijk is. Je zal "
"ontdekken dat je een heleboel dingen maakt die je aan het lachen brengen "
"omdat het gewoon verschrikkelijk klinkt en soms zullen er echte juweeltjes "
"tussen zitten, die echt geweldig klinken. Laat gewoon de dingen vallen die u "
"niet graag doet en hou van wat je doet. Hoe meer `fouten` je jezelf toelaat "
"te maken hoe sneller je zaken zal leren en jouw persoonlijke geluids "
"codering zal ontdekken."

#: A.01-tips.md:18
msgid "2. Use the FX"
msgstr "2. FX gebruiken"

#: A.01-tips.md:20
msgid ""
"Say you've already mastered the Sonic Pi basics of making sounds with "
"`sample`, `play`? What's next? Did you know that Sonic Pi supports over 27 "
"studio FX to change the sound of your code? FX are like fancy image filters "
"in drawing programs except that instead of blurring or making something "
"black and white, you can add things like reverb, distortion and echo to your "
"sound. Think of it like sticking the cable from your guitar to an effects "
"pedal of your choice and then into the amplifier. Luckily, Sonic Pi makes "
"using FX really easy and requires no cables! All you need to do is to choose "
"which section of your code you'd like the FX added to and wrap it with the "
"FX code. Let's look at an example. Say you had the following code:"
msgstr ""
"Laat ons aan nemen dat je de basis om klanken te maken in Sonic Pi met "
"`sample`, `play`. Wat nu? Wist je dat Sonic Pi over de 27 studio ondersteunt "
"om de sound van je code te veranderen. Effecten zijn zoals beeldfilters in "
"tekenprogramma's maar in plaats van zaken te vervagen of zwart-wit te maken, "
"kan je zaken aan jouw geluid toevoegen zoals reverb, distortion, en echo. "
"Het concept isq zoals je een geluidskabel vanuit je gitaar in de "
"effectenpedaal van jou keuze te steken en vervolgens de versterker in. "
"Gelukkig maakt Sonic Pi je het heel makkelijk om FX te gebruiken en dit "
"zonder kabels! Het enige wat je moet doen is het fragment in jouw code "
"selecteren waar je FX wil op gebruiken en deze met de FX code omhullen. "
"Laten we naar een voorbeeld kijken. Stel dat je deze code hebt:"

#: A.01-tips.md:32
#, no-wrap
msgid ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:41
msgid ""
"If you wanted to add FX to the `:loop_garzul` sample, you'd just tuck it "
"inside a `with_fx` block like this:"
msgstr ""
"Als je een FX aan de  `:loop_garzul` sample wil toevoegen, moet je deze "
"gewoon in een `with_fx` blok steken zoals hier:"

#: A.01-tips.md:44
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:55
msgid ""
"Now, if you wanted to add FX to the bass drum, go and wrap that with "
"`with_fx` too:"
msgstr ""
"Als je nu ook een FX aan de bass drum wil voegen, omhul deze dan ook met "
"een  `with_fx`:"

#: A.01-tips.md:58
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"

#: A.01-tips.md:71
msgid ""
"Remember, you can wrap *any* code within `with_fx` and any sounds created "
"will pass through that FX."
msgstr ""
"Denk eraan , je kan *elke* code omhullen met  `with_fx` en elke klank hierin "
"gecreëerd zal door deze FX passeren."

#: A.01-tips.md:75
msgid "3. Parameterise your synths"
msgstr "3. Het parametreren van jouw synths"

#: A.01-tips.md:77
msgid ""
"In order to really discover your coding sound you'll soon want to know how "
"to modify and control synths and FX. For example, you might want to change "
"the duration of a note, add more reverb, or change the time between echoes. "
"Luckily, Sonic Pi gives you an amazing level of control to do exactly this "
"with special things called optional parameters or opts for short. Let's take "
"a quick look. Copy this code into a workspace and hit run:"
msgstr ""
"Om je eigen coding sound te ontwikkelen zal je snel willen weten hoe je "
"synths en Fx kan veranderen en controllen. Zo wil je bijvoorbeeld de lengte "
"van een noot veranderen, of wil je wat meer reverb toevoegen, of de "
"tijdsinstellingen van een echo aanpassen. Gelukkig geeft Sonic Pi de "
"mogelijkheid om dit op een hoog niveau te gaan doen met behulp van optionele "
"parameters of in het kort: opts. Laten we dit even bekijken. Kopieer deze "
"code in een werkveld en klik afspelen:"

#: A.01-tips.md:85
#, no-wrap
msgid "sample :guit_em9"
msgstr "sample :guit_em9"

#: A.01-tips.md:89
msgid ""
"Ooh, a lovely guitar sound! Now, let's start playing with it. How about "
"changing its rate?"
msgstr ""
"Ooh, een mooie gitaarklank! Nu gaan we hiermee spelen. Wat dacht je van zijn "
"koers te veranderen?"

#: A.01-tips.md:92
#, no-wrap
msgid "sample :guit_em9, rate: 0.5"
msgstr "sample :guit_em9, rate: 0.5"

#: A.01-tips.md:96
msgid ""
"Hey, what's that `rate: 0.5` bit I just added at the end? That's called an "
"opt. All of Sonic Pi's synths and FX support them and there's loads to play "
"around with. They're also available for FX too. Try this:"
msgstr ""
"Hé, wat is dat stukje `rate: 0.5`, dat daar op het einde staat? Dat is een "
"opt! Alle synths en FX van Sonic Pi ondersteunen deze en er zijn er tal van "
"beschikbaar om mee te spelen. Probeer deze eens:"

#: A.01-tips.md:100
#, no-wrap
msgid ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"
msgstr ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"

#: A.01-tips.md:106
msgid ""
"Now, try increasing that feedback to 1 to hear some crazy sounds! Read the "
"docs for full details on all the many opts available to you."
msgstr ""
"Probeer nu de feedback te verhogen naar 1 om maffe klanken te horen. Lees de "
"documentatie voor details over de beschikbare opts."

#: A.01-tips.md:110
msgid "5. Live Code"
msgstr "5. Live Code"

#: A.01-tips.md:112
msgid ""
"The best way to quickly experiment and explore Sonic Pi is to live code. "
"This allows you to start off some code and continually change and tweak it "
"whilst it's still playing. For example, if you don't know what the cutoff "
"parameter does to a sample, just play around. Let's have a try! Copy this "
"code into one of your Sonic Pi workspaces:"
msgstr ""
"De beste manier om zaken snel te ontdekken in Sonic Pi is experimenteren en "
"live te coderen. Dit laat jou toe om stukjes code op te starten en deze "
"voortduren te veranderen en te controllen terwijl je speelt. Bijvoorbeeld, "
"als je niet weet wat de cutoff parameter doet met een sample, speel er "
"gewoon mee, probeer het. Kopieer deze code in één van je werkvelden:"

#: A.01-tips.md:118
#, no-wrap
msgid ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"
msgstr ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"

#: A.01-tips.md:125
msgid ""
"Now, hit run and you'll hear a slightly muffled drum break. Now, change the "
"`cutoff:` value to `80` and hit run again. Can you hear the difference? Try "
"`90`, `100`, `110`..."
msgstr ""
"Klik nu op afspelen en hoor hierbij een licht gedempte drum break. Verander "
"de cutoff waarde nu naar `80` en klik opnieuw op afspelen. Hoor je het "
"verschil? Probeer  `90`, `100`, `110`..."

#: A.01-tips.md:129
msgid ""
"Once you get the hang of using `live_loop`s you'll not turn back. Whenever I "
"do a live coding gig I rely on `live_loop` as much as a drummer relies on "
"their sticks. For more information about live coding check out Section 9 of "
"the built-in tutorial."
msgstr ""
"Eens je het gewoon bent  `live_loop`s te gebruiken zal je nooit meer zonder "
"deze kunnen. Wanneer ik een live coding doe reken ik hier zwaar op, zoals "
"een drummer zijn drumsticks nodig heeft. Voor meer informatie over live "
"coding, kijk naar Sectie 9 van de ingebouwde handleiding."

#: A.01-tips.md:134
msgid "5. Surf the random streams"
msgstr "5. Surfen op random golven"

#: A.01-tips.md:136
msgid ""
"Finally, one thing I love doing is cheating by getting Sonic Pi to compose "
"things for me. A really great way to do this is using randomisation. It "
"might sound complicated but it really isn't. Let's take a look. Copy this "
"into a spare workspace:"
msgstr ""
"Tot slot nog deze, ik hou ervan om een beetje vals te spelen door Sonic Pi "
"in mijn plaats te laten componeren. Een goede manier om dit te "
"verwezenlijken is gebruik te maken van het randomiseren. Misschien lijkt dit "
"een beetje ingewikkeld maar dat is het helemaal niet. Laat ons hiernaar naar "
"kijken. Kopieer deze in een lege buffer:"

#: A.01-tips.md:141
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:152
msgid ""
"Now, when you play this, you'll hear a constant stream of random notes from "
"the scale `:e2 :minor_pentatonic` played with the `:dsaw` synth. \"Wait, "
"wait! That's not a melody\", I hear you shout! Well, here's the first part "
"of the magic trick. Every time we go round the `live_loop` we can tell Sonic "
"Pi to reset the random stream to a known point. This is a bit like going "
"back in time in the TARDIS with the Doctor to a particular point in time and "
"space. Let's try it - add the line `use_random_seed 1` to the `live_loop`:"
msgstr ""
"Wanneer je deze afspeelt zal je een constante stroom van random noten horen "
"spelen in de toonladder `:e2 :minor_pentatonisch` gespeeld met de synth "
"`:dsaw`.\" Maar wacht! Dat is geen melodie\" hoor ik jou roepen! Wel, dit is "
"ook het eerste deel van onze tovertruc. Elke keer we rond  gaan in de "
"`live_loop`, kunnen we Sonic Pi vertellen om de random toeloop naar een "
"gegeven punt te resetten. Dit is een beetje zoals in de tijd teruggaan met "
"de dokter in de TARDIS naar een bepaald punt in tijd en ruimte. We proberen "
"de lijn `use_random_seed 1` toe te voegen aan de  `live_loop`:"

#: A.01-tips.md:161
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:173
msgid ""
"Now, every time the `live_loop` loops around, the random stream is reset. "
"This means it chooses the same 16 notes every time. Hey presto! An instant "
"melody. Now, here's the really exciting bit. Change the seed value from `1` "
"to another number. Say `4923`. Wow! Another melody! So, just by changing one "
"number (the random seed), you can explore as many melodic combinations as "
"you can imagine! Now, that's the magic of code."
msgstr ""
"Nu, elke keer de `live_loop` rond gaat , wordt de random stream gereset. Dit "
"betekend dat iedere keer dezelfde 16 noten gekozen worden. En presto! "
"Instant melodie. Nu komt het spannende deel. Verander de seed waarde van `1` "
"naar een ander getal. Neem `4923`. Wauw! Een andere melodie! Dus door gewoon "
"één cijfer te veranderen (de random seed), je kan je zoveel melodische "
"combinaties gaan verkennen als je je kan voorstellen ! Nu, dat is de magie "
"van code."

#: A.02-live-coding.md:1
msgid "A.2 Live Coding"
msgstr "A.2 Live codering"

#: A.02-live-coding.md:5
msgid ""
"The laser beams sliced through the wafts of smoke as the subwoofer pumped "
"bass deep into the bodies of the crowd. The atmosphere was ripe with a heady "
"mix of synths and dancing. However something wasn't quite right in this "
"nightclub. Projected in bright colours above the DJ booth was futuristic "
"text, moving, dancing, flashing. This wasn't fancy visuals, it was merely a "
"projection of Sonic Pi running on a Raspberry Pi. The occupant of the DJ "
"booth wasn't spinning disks, he was writing, editing and evaluating code. "
"Live. This is Live Coding."
msgstr ""
"De laserstralen sneden door de slierten rook, terwijl de subwoofer de bassen "
"diep in de lichamen van de menigte pompten. De sfeer  was rijp met een "
"onstuimige mix van synths en dansbewegingen. Maar tegelijkertijd klopte er "
"iets niet in deze discotheek.  In felle kleuren boven de DJ booth was een "
"futuristische tekst geprojecteerd die knipperde en heen en weer bewoog. Het "
"waren geen hype visuals, maar een projectie van Sonic Pi op een Raspberry "
"Pi. De aanwezige in de DJ booth draaide geen plaatjes, hij was code aan het "
"schrijven, aanpassen en redigeren. Live. Dit is Live Coding."

#: A.02-live-coding.md:14
msgid ""
"![Sam Aaron Live Coding](../images/tutorial/articles/A.02-live-coding/sam-"
"aaron-live-coding.png)"
msgstr ""
"![Sam Aaron Live Coding](../images/tutorial/articles/A.02-live-coding/sam-"
"aaron-live-coding.png)"

#: A.02-live-coding.md:16
msgid ""
"This may sound like a far fetched story from a futuristic night club but "
"coding music like this is a growing trend and is often described as Live "
"Coding (http://toplap.org). One of the recent directions this approach to "
"music making has taken is the Algorave (http://algorave.com) - events where "
"artists like myself code music for people to dance to. However, you don't "
"need to be in a nightclub to Live Code - with Sonic Pi v2.6+ you can do it "
"anywhere you can take your Raspberry Pi and a pair of headphones or some "
"speakers. Once you reach the end of this article, you'll be programming your "
"own beats and modifying them live. Where you go afterwards will only be "
"constrained by your imagination."
msgstr ""
"Dit klinkt misschien als een vergezocht verhaal van een futuristische "
"nachtclub maar codering van muziek zoals deze is een groeiende trend en "
"wordt vaak omschreven als Live codering (http://toplap.org). Een van de "
"recente benadering van muziek spelen  is de Algorave (http://algorave.com) - "
"evenementen waar artiesten zoals ik code schrijven voor mensen om op muziek "
"te dansen . Echter, je hoeft niet naar een nachtclub te trekken voor een "
"Live Code - met Sonic Pi v2.6 + kan je het overal waar je je Raspberry Pi  "
"kunt meenemen met een paar hoofdtelefoons of luidsprekers. Voor je het einde "
"van dit artikel kan lezen, zal je je eigen beats programmeren en  hen live "
"wijzigen. Waar je enkel beperkt wordt door uw verbeelding."

#: A.02-live-coding.md:27
msgid "Live Loop"
msgstr "Live Loop"

#: A.02-live-coding.md:29
msgid ""
"The key to live coding with Sonic Pi is mastering the `live_loop`. Let's "
"look at one:"
msgstr ""
"De hoofdzaak bij het live coderen ligt bij het beheersen van de  `live_loop`"
". Hier kijken we naar zo ééntje:"

#: A.02-live-coding.md:32
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.02-live-coding.md:39
msgid ""
"There are 4 core ingredients to a `live_loop`. The first is its name. Our "
"`live_loop` above is called `:beats`. You're free to call your `live_loop` "
"anything you want. Go crazy. Be creative. I often use names that communicate "
"something about the music they're making to the audience. The second "
"ingredient is the `do` word which marks where the `live_loop` starts. The "
"third is the `end` word which marks where the `live_loop` finishes, and "
"finally there is the body of the `live_loop` which describes what the loop "
"is going to repeat - that's the bit between the `do` and `end`. In this case "
"we're repeatedly playing a bass drum sample and waiting for half a beat. "
"This produces a nice regular bass beat. Go ahead, copy it into an empty "
"Sonic Pi buffer and hit run. Boom, Boom, Boom!."
msgstr ""
"Er zitten 4 basisingrediënten in een  `live_loop`. De eerst is de naam. Onze "
"`live_loop`heet `:beats`. Je kan jouw `live_loop`benoemen zoals jij dat wil. "
"Doe dwaas. Wees creatief. Ikzelf gebruik benamingen die een uitleg geven "
"over welke klank zij naar het publiek brengen. Het volgende ingrediënt is "
"het `do` woord die markeert waar de `live_loop` start. het derde is het `end`"
"woord dat het einde van onze`live_loop markeert, en tenslotte heb je de "
"inhoud van de `live_loop` waarin beschreven wordt wat de loop gat herhalen- "
"dat is het stukje tussen `do` en `end`. In dit geval gaan we de bass drum "
"sample met een halve tel rusttijd spelen . Dit produceert een aangenaam "
"regelmatige bass beat. Ga je gang, kopieer deze in een lege buffer en klik "
"op afspelen. Boem, boem, boem!."

#: A.02-live-coding.md:52
msgid "Redefining On-the-fly"
msgstr "Ter plekke herdefiniëren"

#: A.02-live-coding.md:54
msgid ""
"Ok, so what's so special about the `live_loop`? So far it just seems like a "
"glorified `loop`! Well, the beauty of `live_loop`s is that you can redefine "
"them on-the-fly. This means that whilst they're still running, you can "
"change what they do. This is the secret to live coding with Sonic Pi. Let's "
"have a play:"
msgstr ""
"OK, dus wat is er nu zo speciaal aan de 'live_loop'? Tot nu toe lijkt het "
"gewoon een veredelde 'loop'! Nou, de schoonheid van ' de live_loop is dat u "
"hen ter plekke kan herdefiniëren. Dit betekent dat terwijl deze nog steeds "
"speelt, kan je veranderen wat ze doen. Dit is het geheim van het live "
"coderen met Sonic Pi. Laten we eens spelen:"

#: A.02-live-coding.md:60
#, no-wrap
msgid ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"

#: A.02-live-coding.md:67
msgid ""
"Now press the Run button or hit `alt-r`. You're now listening to some "
"gorgeous choir sounds. Now, whilst it's still playing, change the rate from "
"`0.4` to `0.38`. Hit run again. Woah! Did you hear the choir change note? "
"Change it back up to `0.4` to return back to how it was. Now, drop it to "
"`0.2`, down to `0.19` and then back up to `0.4`. See how changing just one "
"parameter on the fly can give you real control of the music? Now play around "
"with the rate yourself - choose your own values. Try negative numbers, "
"really small numbers and large numbers. Have fun!"
msgstr ""
"Klik nu op de afspeelknop of gebruik `alt-r`. Je luistert nu naar de "
"prachtige klank van een koor. Verander de koers, terwijl de code speelt van "
"`0.4` naar `0.38`. Klik terug op afspelen. Woeha! Hoorde je het koor van "
"toon veranderen? Verander deze terug naar  `0.4` om terug te keren hoe het "
"was. Verlaag deze nu naar `0.2`, verlaag naar `0.19` en terug naar omhoog "
"naar `0.4`. Hierbij zie je dat het improviseren op één parameter, jou de "
"controle over jouw muziek geeft? Speel zelf met de waarden die je kiest. "
"Probeer negatieve getallen, hele kleine en hele grote getallen. Veel plezier!"

#: A.02-live-coding.md:77
msgid "Sleeping is important"
msgstr "Slapen is belangrijk"

#: A.02-live-coding.md:79
msgid ""
"One of the most important lessons about `live_loop`s is that they need rest. "
"Consider the following `live_loop`:"
msgstr ""
"Een van de belangrijkste lessen over `live_loop`s is dat ze rust nodig "
"hebben. Beschouw deze volgende 'live_loop':"

#: A.02-live-coding.md:82
#, no-wrap
msgid ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"
msgstr ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"

#: A.02-live-coding.md:88
msgid ""
"If you try running this code, you'll immediately see Sonic Pi complaining "
"that the `live_loop` did not sleep. This is a safety system kicking in! Take "
"a moment to think about what this code is asking the computer to do. That's "
"right, it's asking the computer to play an infinite amount of choir samples "
"in zero time. Without the safety system the poor computer will try and do "
"this and crash and burn in the process. So remember, your `live_loop`s must "
"contain a `sleep`."
msgstr ""
"Wanneer je deze code probeert te laten lopen, zie je onmiddellijk dat Sonic "
"Pi klaagt dat de `live_loop` geen `sleep` toebedeeld heeft gekregen. Dit is "
"het veiligheidssysteem dat in werking treedt! Nemen even de tijd om erover "
"na te denken wat je aan de computer vraagt met deze code. Juist, het vraagt "
"de computer een oneindig aantal koorsamples te af te spelen op nul tijd. "
"Zonder het veiligheidssysteem zou de arme computer crashen tijdens dit "
"proces. Dus onthou dat jouw `live_loop` een `sleep` moet bevatten."

#: A.02-live-coding.md:97
msgid "Combining Sounds"
msgstr "Geluiden combineren"

#: A.02-live-coding.md:99
msgid ""
"Music is full of things happening at the same time. Drums at the same time "
"as bass at the same time as vocals at the same time as guitars... In "
"computing we call this concurrency and Sonic Pi provides us with an "
"amazingly simple way of playing things at the same time. Simply use more "
"than one `live_loop`!"
msgstr ""
"In muziek gebeuren veel dingen tezelfdertijd. Drums spelen op het zelfde "
"moment als de bass en op het zelfde moment als zang en gitaar... In "
"Computing noemen we dit samenwerking en Sonic Pi biedt ons een ongelofelijk "
"eenvoudige manier om zaken samen te laten spelen. Gewoon gebruik maken van "
"verschillende `live_loop`s!"

#: A.02-live-coding.md:105
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"

#: A.02-live-coding.md:121
msgid ""
"Here, we have two `live_loop`s, one looping quickly making beats and another "
"looping slowly making a crazy bass sound."
msgstr ""
"Hier hebben we twee `live_loops` de ene speelt snel en maakt beats, de "
"andere speelt snel en maakt maffe bas geluiden."

#: A.02-live-coding.md:124
msgid ""
"One of the interesting things about using multiple `live_loop`s is that they "
"each manage their own time. This means it's really easy to create "
"interesting polyrhythmical structures and even play with phasing Steve Reich "
"style. Check this out:"
msgstr ""
"Eén van de interessante zaken aan het gebruik van meerdere `live_loop`s is "
"dat deze hun eigen onafhankelijke tijd kunnen hebben. Dit betekend dat je "
"makkelijk interessante poly-ritmische structuren kan maken en zelfs kan "
"spelen met fase-verschuivingen in de stijl van Steve Reich. Check deze:"

#: A.02-live-coding.md:129
#, no-wrap
msgid ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5)\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"
msgstr ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, "
":Cs5)\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"

#: A.02-live-coding.md:145 A.03-coded-beats.md:155 A.04-synth-riffs.md:166
#: A.05-acid-bass.md:147 A.06-minecraft.md:156 A.07-bizet.md:138
#: A.09-randomisation.md:145 A.10-controlling-your-sound.md:149
#: A.11-beat-tracking.md:176 A.12-sample-slicing.md:137
msgid "Bringing it all together"
msgstr "Waardoor het allemaal samen valt"

#: A.02-live-coding.md:147
msgid ""
"In each of these tutorials, we'll end with a final example in the form of a "
"new piece of music which draws from all of the ideas introduced. Read this "
"code and see if you can imagine what it's doing. Then, copy it into a fresh "
"Sonic Pi buffer and hit Run and actually hear what it sounds like. Finally, "
"change one of the numbers or comment and uncomment things out. See if you "
"can use this as a starting point for a new performance, and most of all have "
"fun! See you next time..."
msgstr ""
"In elk van deze tutorials eindigen we met een muzikaal voorbeeld waarin alle "
"ideeën die werden voorgesteld samen worden gebracht. Bekijk de code en "
"probeer je voor te stellen wat deze zou gaan doen. Plak deze dan in een lege "
"buffer in Sonic Pi en druk op afspelen, en luister nu hoe dit klinkt. "
"Verander tenslotte één van de getallen en schakel commentaarlijnen in om "
"lijnen in en uit te schakelen. Bekijk of je dit ook niet kan gaan gebruiken "
"in een live optreden, en boven alles,beleef hier plezier aan! Tot volgende "
"keer..."

#: A.02-live-coding.md:156
#, no-wrap
msgid ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.03-coded-beats.md:1
msgid "A.3 Coded Beats"
msgstr "A.3 Gecodeerd Beats"

#: A.03-coded-beats.md:3
msgid "Coded Beats"
msgstr "Gecodeerd Beats"

#: A.03-coded-beats.md:5
msgid ""
"One of the most exciting and disrupting technical developments in modern "
"music was the invention of samplers. These were boxes that allowed you to "
"record any sound into them and then manipulate and play back those sounds in "
"many interesting ways. For example, you could take an old record, find a "
"drum solo (or break), record it into your sampler and then play it back on "
"repeat at half-speed to provide the foundation for your latest beats. This "
"is how early hip-hop music was born and today it's almost impossible to find "
"electronic music that doesn't incorporate samples of some kind. Using "
"samples is a really great way of easily introducing new and interesting "
"elements into your live coded performances."
msgstr ""
"Een van de meest revolutionaire en vernieuwende ontwikkeling op technisch "
"gebied was de uitvinding van de sampler.Dit waren kisten die jou toelieten "
"eender welke klank op te nemen, te manipuleren en terug af te spelen, op "
"vele interessante manieren. Bijvoorbeeld kon je van een oude plaat een "
"drumsolo (of een break) nemen, deze opnemen op jouw sampler en deze dan op "
"repeat aan halve snelheid afspelen om de basis te leggen van je nieuwe "
"beats. Dit is hoe old school hip-hop werd geboren en vandaag is het haast "
"onmogelijk om Elektronische muziek te vinden die geen gebruik maken van één "
"of andere sample. Het gebruik van samples is een geweldige manier om "
"makkelijk nieuwe en interessante elementen aan jouw live code toe te voegen."

#: A.03-coded-beats.md:17
msgid ""
"So where can you get a sampler? Well you already have one - it's your "
"Raspberry Pi! The built-in live coding app Sonic Pi has an extremely "
"powerful sampler built into its core. Let's play with it!"
msgstr ""
"Dus waar kan je zo'n sampler krijgen? Wel je hebt er al één- het is jouw "
"Raspberry Pi! The ingebouwde codeer app Sonic Pi  heeft een uiterst "
"krachtige sampler ingebouwd in zijn core. Laten we ermee gaan spelen!"

#: A.03-coded-beats.md:21
msgid "The Amen Break"
msgstr "De Amen Break"

#: A.03-coded-beats.md:23
msgid ""
"One of the most classic and recognisable drum break samples is called the "
"Amen Break. It was first performed in 1969 in the song \"Amen Brother\" by "
"the Winstons as part of a drum break. However, it was when it was discovered "
"by early hip-hop musicians in the 80s and used in samplers that it started "
"being heavily used in a wide variety of other styles such as drum and bass, "
"breakbeat, hardcore techno and breakcore."
msgstr ""
"Een van de meest klassiek en herkenbare drum break samples is de Amen Break. "
"Het werd voor het eerst uitgevoerd in 1969 in het nummer \"Amen Brother\" "
"door de Winstons als een gedeelte in een drumbreak. Het was echter wanneer "
"het werd ontdekt door de vroege hip-hop muzikanten in de jaren 80 en werd "
"gebruikt in samplers dat de start werd gegeven deze sample  in vele stijlen "
"te gaan gebruiken zoals drum& bass, breakbeat, hardcore techno en breakcore."

#: A.03-coded-beats.md:30
msgid ""
"I'm sure you're excited to hear that it's also built right into Sonic Pi. "
"Clear up a buffer and throw in the following code:"
msgstr ""
"Ik ben er zeker van dat je blij bent dat deze standaard ingebouwd zit in "
"Sonic Pi. Ruim even een buffer leeg en gooi er de volgende code in:"

#: A.03-coded-beats.md:37
msgid ""
"Hit *Run* and boom! You're listening to one of the most influential drum "
"breaks in the history of dance music. However, this sample wasn't famous for "
"being played as a one-shot, it was built for being looped."
msgstr ""
"Klik op *Afspelen* en Boem. Je luistert nu naar één van de meest "
"invloedrijke drumbreaks in de geschiedenis van dance music. Als one-shot was "
"deze niet populair natuurlijk wel als loop."

#: A.03-coded-beats.md:42
msgid "Beat Stretching"
msgstr "Beat Stretching"

#: A.03-coded-beats.md:44
msgid ""
"Let's loop the Amen Break by using our old friend the `live_loop` introduced "
"in this tutorial last month:"
msgstr ""
"Laat ons de Amen Break loopen in onze goede vriend `live_loop`, "
"geïntroduceerd in deze tutorial van vorige maand:"

#: A.03-coded-beats.md:47
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:54
msgid ""
"OK, so it is looping, but there's an annoying pause every time round. That "
"is because we asked it to sleep for `2` beats and with the default BPM of 60 "
"the `:loop_amen` sample only lasts for `1.753` beats. We therefore have a "
"silence of `2 - 1.753 = 0.247` beats. Even though it's short, it's still "
"noticeable."
msgstr ""
"OK, deze loopt nu, maar er is wel een vervelende pauze elke keer dat hij "
"zijn cyclus heeft volbracht. Dat komt omdat we het een `sleep`-tijd van`2`"
"tellen hebben gegeven en met de standaard 60 BPM duurt de `:loop_amen` "
"sample  `1.753` tellen. Hierdoor hebben we een stilte van `2 - 1.753 = 0.247`"
" tellen. Ook al is deze kort, het is wel merkbaar."

#: A.03-coded-beats.md:60
msgid ""
"To fix this issue we can use the `beat_stretch:` opt to ask Sonic Pi to "
"stretch (or shrink) the sample to match the specified number of beats."
msgstr ""
"Om dit probleem op te lossen kunnen we de `beat_stretch`opt gebruiken om "
"Sonic Pi op te dragen deze sample uit te rekken (of te doen inkrimpen) om "
"met het opgegeven aantal tellen overeen te laten komen."

#: A.03-coded-beats.md:63
msgid ""
"Sonic Pi's `sample` and `synth` fns give you a lot of control via optional "
"parameters such as `amp:`, `cutoff:` and `release:`. However, the term "
"optional parameter is a real mouthful so we just call them *opts* to keep "
"things nice and simple."
msgstr ""
"De `sample`en `synth` fns van Sonic Pi geven jou veel controle over de "
"optionele parameters zoals `amp:`, `cutoff:`en `release:` . Maar de term "
"optionele parameter is wel een mond vol, dus noemen we deze *opts* om de "
"zaken eenvoudig te houden."

#: A.03-coded-beats.md:68
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "

#: A.03-coded-beats.md:75
msgid ""
"Now we're dancing! Although, perhaps we want to speed it up or slow it down "
"to suit the mood."
msgstr ""
"Nu zijn we aan het dansen! Maar misschien willen we het wat sneller of wat "
"trager om de juiste stemming te pakken te krijgen."

#: A.03-coded-beats.md:78
msgid "Playing with Time"
msgstr "Spelen met Tijd"

#: A.03-coded-beats.md:80
msgid ""
"OK, so what if we want to change styles to old school hip hop or breakcore? "
"One simple way of doing this is to play with time - or in other words mess "
"with the tempo. This is super easy in Sonic Pi - just throw in a `use_bpm` "
"into your live loop:"
msgstr ""
"Ok, en als we de stijl willen aanpassen naar old school hip hop of "
"breakcore? Een eenvoudige manier om dit te gaan doen is te spelen met tijd -"
"of in andere woorden: aan het tempo klooien. Dit is makkelijk te doen in "
"Sonic Pi, gooi gewoon `use_bpm` in je live loop:"

#: A.03-coded-beats.md:85
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "

#: A.03-coded-beats.md:93
msgid ""
"Whilst you're rapping over those slow beats, notice that we're still "
"sleeping for 2 and our BPM is 30, yet everything is in time. The "
"`beat_stretch` opt works with the current BPM to make sure everything just "
"works."
msgstr ""
"Terwijl je over deze trage beats heen rapt merk je dat we nog steeds voor 2 "
"`sleep`hebben en dat onze BPM 30 is, maar alles is wel in maat. De "
"`beat_stretch`opt werkt met de huidige BPM om ervoor te zorgen dat alles "
"werkt."

#: A.03-coded-beats.md:97
msgid ""
"Now, here's the fun part. Whilst the loop is still live, change the `30` in "
"the `use_bpm 30` line to `50`. Woah, everything just got faster yet *kept in "
"time*! Try going faster - up to 80, to 120, now go crazy and punch in 200!"
msgstr ""
"Nu komt het leuke! Terwijl de loop nog altijd speelt, verander de`30`in de `"
"use_bpm 30`regel naar `50`. Woeha, Alles gaat nu sneller, en *in maat* "
"gehouden! Probeer sneller te gaan - omhoog naar 80, naar 120, doe nu eens "
"goed zot en gebruik 200!"

#: A.03-coded-beats.md:103
msgid "Filtering"
msgstr "Filteren"

#: A.03-coded-beats.md:105
msgid ""
"Now we can live loop samples, let's look at some of the most fun opts "
"provided by the `sample` synth. First up is `cutoff:` which controls the "
"cutoff filter of the sampler. By default this is disabled but you can easily "
"turn it on:"
msgstr ""
"Nu we samples kunnen live lopen, laat ons eens kijken naar de leukste opts "
"die bij de `sample`synth geleverd zijn. Eerst komt `cutoff`aan beurt, welke "
"de cutoff op de filter van de sampler regelt. Standaard is deze "
"uitgeschakeld, maar je kan deze makkelijk aanzetten:"

#: A.03-coded-beats.md:110
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "

#: A.03-coded-beats.md:118
msgid ""
"Go ahead and change the `cutoff:` opt. For example, increase it to 100, hit "
"*Run* and wait for the loop to cycle round to hear the change in the sound. "
"Notice that low values like 50 sound mellow and bassy and high values like "
"100 and 120 are more full-sounding and raspy. This is because the `cutoff:` "
"opt will chop out the high frequency parts of the sound just like a lawn-"
"mower chops off the top of the grass. The `cutoff:` opt is like the length "
"setting - determining how much grass is left over."
msgstr ""
"Ga je gang en verander de `cutoff:` opt. Verhoog deze bijvoorbeeld naar 100, "
"klik op *Afspelen* en wacht een cyclus van de loop af om de verandering van "
"het geluid waar te nemen. Merk op dat lage waarden zoals 50 zacht klinken en "
"laag en hoger waarden zoals 100 en 120 voller klinken en rasperig. Dit is "
"omdat de `cutoff:`opt de hoge geluidsfrequentie afsnijdt zoals een "
"grasmaaier de grasuiteinden afknipt. De `cutoff:` opt is zoals de lengte "
"instelling, en bepaald hoeveel gras overblijft."

#: A.03-coded-beats.md:128
msgid "Slicing"
msgstr "Slicing (Snijden)"

#: A.03-coded-beats.md:130
msgid ""
"Another great tool to play with is the slicer FX. This will chop (slice) the "
"sound up. Wrap the `sample` line with the FX code like this:"
msgstr ""
"Nog een fantastisch hulpmiddel om mee aan de slag te gaan is de slicer FX. "
"Deze zal het geluid uiteen hakken (snijden). Omhul de `sample`regel met de "
"FX code als volgt:"

#: A.03-coded-beats.md:133
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:143
msgid ""
"Notice how the sound bounces up and down a little more. (You can hear the "
"original sound without the FX by changing the `mix:` opt to `0`.) Now, try "
"playing around with the `phase:` opt. This is the rate (in beats) of the "
"slicing effect. A smaller value like `0.125` will slice faster and larger "
"values like `0.5` will slice more slowly. Notice that successively halving "
"or doubling the `phase:` opts val tends to always sound good. Finally, "
"change the `wave:` opt to one of 0, 1, or 2 and hear how it changes the "
"sound. These are the various wave shapes. 0 is a saw wave, (hard in, fade "
"out) 1 is a square wave (hard in, hard out) and 2 is a triangle wave (fade "
"in, fade out)."
msgstr ""
"Merk op hoe de klank op en neer stuitert, elke keer meer. (Je kan de "
"originele klank, zonder FX, beluisteren door de `mix` opt naar `0`te "
"veranderen) Speel nu met de `phase:` opt. Dit is de snelheid (in slagen) van "
"het slicing effect. Een kleinere waarde zoals `0.125` zal sneller hakken en "
"grotere waarden zoals `0.5` zullen trager snijden. Merk hierbij op dat het "
"opeenvolgend halveren of verdubbelen van de `phase:`opt waarde altijd goed "
"schijnt te klinken. Verander tenslotte de `wave:` opt naar 0,1 of 2 en hoor "
"hoe dit de klank veranderd. Dit zijn de verschillende golfvormen. 0 is een "
"zaagtand-golf, (harde aanslag, fade-out) 1 is een blokgolf (harde aanslag, "
"geen fade-out) en 2 is een driehoeksgolf (fade-in, fade out)."

#: A.03-coded-beats.md:157
msgid ""
"Finally, let's go back in time and revisit the early Bristol drum and bass "
"scene with this month's example. Don't worry too much about what all this "
"means, just type it in, hit Run, then start live coding it by changing opt "
"numbers and see where you can take it. Please do share what you create! See "
"you next time..."
msgstr ""
"Laten we tenslotte terug in de tijd gaan en de vroege drum&bass scene van "
"Bristol bezoeken, met het voorbeeld van de maand. Maak je geen zorgen als je "
"echt niet weet over wat dit gaat, type deze even, klik op Afspelen, begin te "
"live code-en, door de getallen van de opt te veranderen en kijk wat je dit "
"oplevert. Deel alsjeblieft wat je hebt gemaakt! Tot Volgende keer..."

#: A.03-coded-beats.md:163
#, no-wrap
msgid ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"
msgstr ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"

#: A.04-synth-riffs.md:1
msgid "A.4 Synth Riffs"
msgstr "A.4 Synth Riffs"

#: A.04-synth-riffs.md:3
msgid "Synth Riffs"
msgstr "Synth Riffs"

#: A.04-synth-riffs.md:5
msgid ""
"Whether it's the haunting drift of rumbling oscillators or the detuned punch "
"of saw waves piercing through the mix, the lead synth plays an essential "
"role on any electronic track. In last month's edition of this tutorial "
"series we covered how to code our beats. In this tutorial we'll cover how to "
"code up the three core components of a synth riff - the timbre, melody and "
"rhythm."
msgstr ""
"Of het nu spokende onstuimige, grommende oscillatoren zijn of de ontstemde "
"aanslag van zaagtand-golven die door de mix klieven, de lead synth zal "
"altijd een essentiële rol spelen in een elektronisch nummer. In de editie "
"van vorige maand in deze serie zelf-studies   zagen we hoe je je beats code "
"maakt. In deze tutorial gaan we zien hoe we de code doen van drie hoofd "
"componenten van een synth riff: het timbre, de melodie en het ritme."

#: A.04-synth-riffs.md:12
msgid ""
"OK, so power up your Raspberry Pi, crack open Sonic Pi v2.6+ and let's make "
"some noise!"
msgstr ""
"Ok, zet je Raspberry Pi op, maak Sonic Pi v2.6+ open en maak wat lawaai!"

#: A.04-synth-riffs.md:16
msgid "Timbral Possibilities"
msgstr "Timbrale mogelijkheden"

#: A.04-synth-riffs.md:18
msgid ""
"An essential part of any synth riff is changing and playing with the timbre "
"of the sounds. We can control the timbre in Sonic Pi in two ways - choosing "
"different synths for a dramatic change and setting the various synth opts "
"for more subtle modifications. We can also use FX, but that's for another "
"tutorial..."
msgstr ""
"Een essentieel onderdeel van zowat elke synth riff ligt in het veranderen en "
"bespelen van het timbre. We kunnen het timbre in Sonic Pi op twee "
"verschillende manieren controllen: veranderen van synth voor een drastische "
"verandering en de verschillende synth opts gebruiken voor een meer subtiele "
"aanpak. We kunnen ook FX gebruiken, maar dat is voor een andere tutorial..."

#: A.04-synth-riffs.md:24
msgid ""
"Let's create a simple live loop where we continually change the current "
"synth:"
msgstr ""
"We creëren een eenvoudige loop waar we de huidige synth voortdurend gaan "
"veranderen:"

#: A.04-synth-riffs.md:27
#, no-wrap
msgid ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.04-synth-riffs.md:35
msgid ""
"Take a look at the code. We're simply ticking through a ring of synth names "
"(this will cycle through each of these in turn repeating the list over and "
"over). We pass this synth name to the `use_synth` fn (function) which will "
"change the `live_loop`'s current synth. We also play note `:e2` (E at the "
"second octave), with a release time of 0.5 beats (half a second at the "
"default BPM of 60) and with the `cutoff:` opt set to 100."
msgstr ""
"Kijk even naar de code. We tikken gewoon door een ring van synth namen (deze "
"zal de lijst helemaal doorlopen en aan het einde opnieuw beginnen). We geven "
"deze synth naam door aan de `use_synth` fn (functie) die de `live_loop`'s "
"huidige synth verandert. We spelen ook de noot `:e2` (E van het tweede "
"octaaf), met een release tijd van 0.5 tel (een halve seconde aan de "
"standaard BPM van 60) en met een `cutoff:`opt naar 100 gezet."

#: A.04-synth-riffs.md:42
msgid ""
"Hear how the different synths have very different sounds even though they're "
"all playing the same note. Now experiment and have a play. Change the "
"release time to bigger and smaller values. For example, change the `attack:` "
"and `release:` opts to see how different fade in/out times have a huge "
"impact on the sound. Finally change the `cutoff:` opt to see how different "
"cutoff values also massively influence the timbre (values between 60 and 130 "
"are good). See how many different sounds you can create by just changing a "
"few values. Once you've mastered that, just head to the Synths tab in the "
"Help system for a full list of all the synths and all the available opts "
"each individual synth supports to see just how much power you have under "
"your coding fingertips."
msgstr ""
"Hoor hoe de verschillende synths zeer grote verschillen vertonen hoewel ze "
"dezelfde noot spelen. Experimenteer nu en speel hiermee. Verander de release "
"tijden naar grotere en kleinere waarden. Verander bijvoorbeeld de `attack:` "
"en `release:` opts om te zien hoe verschillende cutoff waarden een invloed "
"hebben op het timbre (waarden tussen 60 en 130 zijn goed) Kijk hoeveel "
"verschillende klanken je kan creëren door simpelweg enkele waarden aan te "
"passen. Eens je dit onder de knie hebt, ga dan naar de  synths tab in het "
"hulpsysteem voor de lijst van alle synths en de voor iedere individuele "
"synth beschikbare opts, om te zien hoeveel kracht je hiermee onder je "
"codende vingers hebt."

#: A.04-synth-riffs.md:55
msgid "Timbre"
msgstr "Timbre"

#: A.04-synth-riffs.md:57
msgid ""
"Timbre is just a fancy word describing the sound of a sound. If you play the "
"same note with different instruments such as a violin, guitar, or piano, the "
"pitch (how high or low it sounds) would be the same, but the sound quality "
"would be different. That sound quality - the thing which allows you to tell "
"the difference between a piano and a guitar is the timbre."
msgstr ""
"Timbre of klankkleur is enkel een moeilijk woord om de klank van een geluid "
"te beschrijven. Als je dezelfde noot speelt met verschillende instrumenten "
"zoals viool, gitaar of piano zal de toonhoogte altijd dezelfde zijn, maar de "
"klankeigenschap zal anders zijn. Deze eigenschap die het mogelijk maakt om "
"het verschil tussen een piano en een gitaar waar te nemen is het timbre."

#: A.04-synth-riffs.md:65
msgid "Melodic Composition"
msgstr "Melodische Compositie"

#: A.04-synth-riffs.md:67
msgid ""
"Another important aspect to our lead synth is the choice of notes we want to "
"play. If you already have a good idea, then you can simply create a ring "
"with your notes in and tick through them:"
msgstr ""
"Een ander belangrijk aspect dat onze lead synth is de keuze van de noten die "
"wij willen spelen. Als je al een goed idee hebt, dan kan je gewoon een ring "
"met jouw noten :"

#: A.04-synth-riffs.md:71
#, no-wrap
msgid ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:80
#, fuzzy
msgid ""
"Here, we've defined our melody with a ring which includes both notes such as "
"`:e3` and rests represented by `:r`. We're then using `.tick` to cycle "
"through each note to give us a repeating riff."
msgstr ""
"hier hebben de melody gedefinieerd met een ring dat beide noten :e3 en :r "
"bevat. We gebruiken .tick om naar elke note over te gaan, om zo een "
"herhalende riff te krijgen."

#: A.04-synth-riffs.md:84
msgid "Auto Melody"
msgstr "Auto Melodie"

#: A.04-synth-riffs.md:86
msgid ""
"It's not always easy to come up with a nice riff from scratch. Instead it's "
"often easier to ask Sonic Pi for a selection of random riffs and to choose "
"the one you like the best. To do that we need to combine three things: "
"rings, randomisation and random seeds. Let's look at an example:"
msgstr ""

#: A.04-synth-riffs.md:91
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:101
msgid ""
"There's a few things going on - let's look at them in turn. First, we "
"specify that we're using random seed 3. What does this mean? Well, the "
"useful thing is that when we set the seed, we can predict what the next "
"random value is going to be - it's the same as it was last time we set the "
"seed to 3! Another useful thing to know is that shuffling a ring of notes "
"works in the same way. In the example above we're essentially asking for the "
"'third shuffle' in the standard list of shuffles - which is also the same "
"every time as we're always setting the random seed to the same value right "
"before the shuffle. Finally we're just ticking through our shuffled notes to "
"play the riff."
msgstr ""

#: A.04-synth-riffs.md:112
msgid ""
"Now, here's where the fun starts. If we change the random seed value to "
"another number, say 3000, we get an entirely different shuffling of the "
"notes. So now it's extremely easy to explore new melodies. Simply choose the "
"list of notes we want to shuffle (scales are a great starting point) and "
"then choose the seed we want to shuffle with. If we don't like the melody, "
"just change one of those two things and try again. Repeat until you like "
"what you hear!"
msgstr ""

#: A.04-synth-riffs.md:121
msgid "Pseudo Randomisation"
msgstr ""

#: A.04-synth-riffs.md:123
msgid ""
"Sonic Pi's randomisation is not actually random it's what's called pseudo "
"random. Imagine if you were to roll a dice 100 times and write down the "
"result of each roll onto a piece of paper. Sonic Pi has the equivalent of "
"this list of results which it uses when you ask for a random value. Instead "
"of rolling an actual dice, it just picks the next value from the list. "
"Setting the random seed is just jumping to a specific point in that list."
msgstr ""

#: A.04-synth-riffs.md:131
msgid "Finding your Rhythm"
msgstr ""

#: A.04-synth-riffs.md:133
msgid ""
"Another important aspect to our riff is the rhythm - when to play a note and "
"when not to. As we saw above we can use `:r` in our rings to insert rests. "
"Another very powerful way is to use spreads which we'll cover in a future "
"tutorial. Today we'll use randomisation to help us find our rhythm. Instead "
"of playing every note we can use a conditional to play a note with a given "
"probability. Let's take a look:"
msgstr ""

#: A.04-synth-riffs.md:140
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.04-synth-riffs.md:152
msgid ""
"A really useful fn to know is `one_in` which will give us a `true` or "
"`false` value with the specified probability. Here, we're using a value of 2 "
"so on average one time every two calls to `one_in` it will return `true`. In "
"other words, 50% of the time it will return `true`. Using higher values will "
"make it return `false` more often introducing more space into the riff."
msgstr ""

#: A.04-synth-riffs.md:159
msgid ""
"Notice that we've added some iteration in here with `16.times`. This is "
"because we only want to reset our random seed value every 16 notes so our "
"rhythm repeats every 16 times. This doesn't affect the shuffling as that is "
"still done immediately after the seed is set. We can use the iteration size "
"to alter the length of the riff. Try changing the 16 to 8 or even 4 or 3 and "
"see how it affects the rhythm of the riff."
msgstr ""

#: A.04-synth-riffs.md:168
msgid ""
"OK, so let's combine everything we've learned together into one final "
"example. See you next time!"
msgstr ""

#: A.04-synth-riffs.md:171
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)"
"\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"

#: A.05-acid-bass.md:1
msgid "A.5 Acid Bass"
msgstr "A.5 Acid Bass"

#: A.05-acid-bass.md:3
msgid "Acid Bass"
msgstr "Acid Bass"

#: A.05-acid-bass.md:5
msgid ""
"It's impossible to look through the history of electronic dance music "
"without seeing the enormous impact of the tiny Roland TB-303 synthesiser. "
"It's the secret sauce behind the original acid bass sound. Those classic "
"squealing and squelching TB-303 bass riffs can be heard from the early "
"Chicago House scene through to more recent electronic artists such as "
"Plastikman, Squarepusher and Aphex Twin."
msgstr ""

#: A.05-acid-bass.md:12
msgid ""
"Interestingly, Roland never intended for the TB-303 to be used in dance "
"music. It was originally created as a practice aid for guitarists. They "
"imagined that people would program them to play bass lines to jam along to. "
"Unfortunately there were a number of problems: they were a little fiddly to "
"program, didn't sound particularly good as a bass-guitar replacement and "
"were pretty expensive to buy. Deciding to cut their losses, Roland stopped "
"making them after 10,000 units were sold and after a number of years sitting "
"on guitarist's shelves, they soon could be found in the windows of second "
"hand shops. These lonely discarded TB-303s were waiting to be discovered by "
"a new generation of experimenters who started using them in ways that Roland "
"didn't imagine to create new crazy sounds. Acid House was born."
msgstr ""

#: A.05-acid-bass.md:25
msgid ""
"Although getting your hands on an original TB-303 is not so easy you will be "
"pleased to know that you can turn your Raspberry Pi into one using the power "
"of Sonic Pi. Behold, fire up Sonic Pi and throw this code into an empty "
"buffer and hit Run:"
msgstr ""

#: A.05-acid-bass.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play :e1"
msgstr ""
"use_synth :tb303\n"
"play :e1"

#: A.05-acid-bass.md:35
msgid "Instant acid bass! Let's play around..."
msgstr ""

#: A.05-acid-bass.md:37
msgid "Squelch that Bass"
msgstr ""

#: A.05-acid-bass.md:39
msgid ""
"First, let's build a live arpeggiator to make things fun. In the last "
"tutorial we looked at how riffs can just be a ring of notes that we tick "
"through one after another, repeating when we get to the end. Let's create a "
"live loop that does exactly that:"
msgstr ""

#: A.05-acid-bass.md:44
#, no-wrap
msgid ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.05-acid-bass.md:53
msgid "Take a look at each line."
msgstr ""

#: A.05-acid-bass.md:55
msgid ""
"On the first line we set the default synth to be `tb303` with the "
"`use_synth` fn."
msgstr ""

#: A.05-acid-bass.md:58
msgid ""
"On line two we create a live loop called `:squelch` which will just loop "
"round and round."
msgstr ""

#: A.05-acid-bass.md:61
msgid ""
"Line three is where we create our riff - a ring of notes (E in octaves 1, 2, "
"and 3) which we simply tick through with `.tick`. We define `n` to represent "
"the current note in the riff. The equals sign just means to assign the value "
"on the right to the name on the left. This will be different every time "
"round the loop. The first time round, `n` will be set to `:e1`. The second "
"time round it will be `:e2`, followed by `:e3`, and then back to `:e1`, "
"cycling round forever."
msgstr ""

#: A.05-acid-bass.md:70
msgid ""
"Line four is where we actually trigger our `:tb303` synth. We're passing a "
"few interesting opts here: `release:`, `cutoff:`, `res:` and `wave:` which "
"we'll discuss below."
msgstr ""

#: A.05-acid-bass.md:74
msgid ""
"Line five is our `sleep` - we're asking the live loop to loop round every "
"`0.125`s or 8 times a second at the default BPM of 60."
msgstr ""

#: A.05-acid-bass.md:77
msgid ""
"Line six is the `end` to the live loop. This just tells Sonic Pi where the "
"end of the live loop is."
msgstr ""

#: A.05-acid-bass.md:80
msgid ""
"Whilst you're still figuring out what's going on, type in the code above and "
"hit the Run button. You should hear the `:tb303` kick into action. Now, this "
"is where the action is: let's start live coding."
msgstr ""

#: A.05-acid-bass.md:84
msgid ""
"Whilst the loop is still live, change the `cutoff:` opt to `110`. Now hit "
"the Run button again. You should hear the sound become a little harsher and "
"more squelchy. Dial in `120` and hit run. Now `130`. Listen how higher "
"cutoff values make it sound more piercing and intense. Finally, drop it down "
"to `80` when you feel like a rest. Then repeat as many times as you want. "
"Don't worry, I'll still be here..."
msgstr ""

#: A.05-acid-bass.md:91
msgid ""
"Another opt worth playing with is `res:`. This controls the level of "
"resonance of the filter. A high resonance is characteristic of acid bass "
"sounds. We currently have our `res:` set to `0.8`. Try cranking it up to "
"`0.85`, then `0.9`, and finally `0.95`. You might find that a cutoff such as "
"`110` or higher will make the differences easier to hear. Finally go crazy "
"and dial in `0.999` for some insane sounds. At a `res` this high, you're "
"hearing the cutoff filter resonate so much it starts to make sounds of its "
"own!"
msgstr ""

#: A.05-acid-bass.md:100
msgid ""
"Finally, for a big impact on the timbre try changing the `wave:` opt to `1`. "
"This is the choice of source oscillator. The default is `0` which is a "
"sawtooth wave. `1` is a pulse wave and `2` is a triangle wave."
msgstr ""

#: A.05-acid-bass.md:104
msgid ""
"Of course, try different riffs by changing the notes in the ring or even "
"picking notes from scales or chords. Have fun with your first acid bass "
"synth."
msgstr ""

#: A.05-acid-bass.md:108
msgid "Deconstructing the TB-303"
msgstr ""

#: A.05-acid-bass.md:110
msgid ""
"The design of the original TB-303 is actually pretty simple. As you can see "
"from the following diagram there's only 4 core parts."
msgstr ""

#: A.05-acid-bass.md:113
msgid ""
"![TB-303 Design](../images/tutorial/articles/A.05-acid-bass/tb303-design.png)"
msgstr ""

#: A.05-acid-bass.md:115
msgid ""
"First is the oscillator wave - the raw ingredients of the sound. In this "
"case we have a square wave. Next there's the oscillator's amplitude envelope "
"which controls the amp of the square wave through time. These are accessed "
"in Sonic Pi by the `attack:`, `decay:`, `sustain:` and `release:` opts along "
"with their level counterparts. For more information read Section 2.4 "
"'Duration with Envelopes' in the built-in tutorial. We then pass our "
"enveloped square wave through a resonant low pass filter. This chops off the "
"higher frequencies as well as having that nice resonance effect. Now this is "
"where the fun starts. The cutoff value of this filter is also controlled by "
"its own envelope! This means we have amazing control over the timbre of the "
"sound by playing with both of these envelopes. Let's take a look:"
msgstr ""

#: A.05-acid-bass.md:128
#, no-wrap
msgid ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_release: 4\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""

#: A.05-acid-bass.md:138
msgid ""
"For each standard envelope opt, there's a `cutoff_` equivalent opt in the `:"
"tb303` synth. So, to change the cutoff attack time we can use the "
"`cutoff_attack:` opt. Copy the code above into an empty buffer and hit Run. "
"You'll hear a crazy sound warble in and out. Now start to play. Try changing "
"the `cutoff_attack:` time to `1` and then `0.5`. Now try `8`."
msgstr ""

#: A.05-acid-bass.md:144
msgid ""
"Notice that I've passed everything through a `:reverb` FX for extra "
"atmosphere - try other FX to see what works!"
msgstr ""

#: A.05-acid-bass.md:149
msgid ""
"Finally, here's a piece I composed using the ideas in this tutorial. Copy it "
"into an empty buffer, listen for a while and then start live coding your own "
"changes. See what crazy sounds you can make with it! See you next time..."
msgstr ""

#: A.05-acid-bass.md:154
#, no-wrap
msgid ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_release: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: 0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""

#: A.06-minecraft.md:1
msgid "A.6 Musical Minecraft"
msgstr ""

#: A.06-minecraft.md:3
msgid "Musical Minecraft"
msgstr ""

#: A.06-minecraft.md:7
msgid ""
"Hello and welcome back! In the previous tutorials we've focussed purely on "
"the music possibilities of Sonic Pi - (turning your Raspberry Pi into a "
"performance ready musical instrument). So far we've learned how to:"
msgstr ""

#: A.06-minecraft.md:11
msgid "Live Code - changing the sounds on-the-fly,"
msgstr ""

#: A.06-minecraft.md:12
msgid "Code some huge beats,"
msgstr ""

#: A.06-minecraft.md:13
msgid "Generate powerful synth leads,"
msgstr ""

#: A.06-minecraft.md:14
msgid "Re-create the famous TB-303 acid-bass sound."
msgstr ""

#: A.06-minecraft.md:16
msgid ""
"There's so much more to show you (which we will explore in future editions). "
"However, this month, let's look at something Sonic Pi can do that you "
"probably didn't realise: control Minecraft."
msgstr ""

#: A.06-minecraft.md:20
msgid "Hello Minecraft World"
msgstr ""

#: A.06-minecraft.md:22
msgid ""
"OK, let's get started. Boot up your Raspberry Pi, fire up Minecraft Pi and "
"create a new world. Now start up Sonic Pi and re-size and move your windows "
"so you can see both Sonic Pi and Minecraft Pi at the same time."
msgstr ""

#: A.06-minecraft.md:26
msgid "In a fresh buffer type the following:"
msgstr ""

#: A.06-minecraft.md:28
#, no-wrap
msgid "mc_message \"Hello Minecraft from Sonic Pi!\""
msgstr ""

#: A.06-minecraft.md:32
msgid ""
"Now, hit Run. Boom! Your message appeared in Minecraft! How easy was that? "
"Now, stop reading this for a moment and play about with your own messages. "
"Have fun!"
msgstr ""

#: A.06-minecraft.md:36
msgid ""
"![Screen 0](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-0-"
"small.png)"
msgstr ""

#: A.06-minecraft.md:38
msgid "Sonic Teleporter"
msgstr ""

#: A.06-minecraft.md:40
msgid ""
"Now let's do some exploring. The standard option is to reach for the mouse "
"and keyboard and start walking around. That works, but it's pretty slow and "
"boring. It would be far better if we had some sort of teleport machine. "
"Well, thanks to Sonic Pi, we have one. Try this:"
msgstr ""

#: A.06-minecraft.md:45
#, no-wrap
msgid "mc_teleport 80, 40, 100"
msgstr ""

#: A.06-minecraft.md:49
msgid ""
"Crikey! That was a long way up. If you weren't in flying-mode then you would "
"have fallen back down all the way to the ground. If you double-tap space to "
"enter flying-mode and teleport again, you'll stay hovering at the location "
"you zap to."
msgstr ""

#: A.06-minecraft.md:54
msgid ""
"Now, what do those numbers mean? We have three numbers which describe the "
"coordinates of where in the world we want to go. We give each number a name "
"- x, y and z:"
msgstr ""

#: A.06-minecraft.md:58
msgid "x - how far left and right (80 in our example)"
msgstr ""

#: A.06-minecraft.md:59
msgid "y - how high we want to be (40 in our example)"
msgstr ""

#: A.06-minecraft.md:60
msgid "z - how far forward and back (100 in our example)"
msgstr ""

#: A.06-minecraft.md:62
msgid ""
"By choosing different values for x, y and z we can teleport *anywhere* in "
"our world. Try it! Choose different numbers and see where you can end up. If "
"the screen goes black it's because you've teleported yourself under the "
"ground or into a mountain. Just choose a higher y value to get back out "
"above land. Keep on exploring until you find somewhere you like..."
msgstr ""

#: A.06-minecraft.md:69
msgid ""
"Using the ideas so far, let's build a Sonic Teleporter which makes a fun "
"teleport sound whilst it whizzes us across the Minecraft world:"
msgstr ""

#: A.06-minecraft.md:72
#, no-wrap
msgid ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""
msgstr ""

#: A.06-minecraft.md:86
msgid ""
"![Screen 1](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-1-"
"small.png)"
msgstr ""

#: A.06-minecraft.md:88
msgid "Magic Blocks"
msgstr ""

#: A.06-minecraft.md:90
msgid ""
"Now you've found a nice spot, let's start building. You could do what you're "
"used to and start clicking the mouse furiously to place blocks under the "
"cursor. Or you could use the magic of Sonic Pi. Try this:"
msgstr ""

#: A.06-minecraft.md:94
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"
msgstr ""

#: A.06-minecraft.md:99
msgid ""
"Now look up! There's a melon in the sky! Take a moment to look at the code. "
"What did we do? On line one we grabbed the current location of Steve as the "
"variables x, y and z. These correspond to our coordinates described above. "
"We use these coordinates in the fn `mc_set_block` which will place the block "
"of your choosing at the specified coordinates. In order to make something "
"higher up in the sky we just need to increase the y value which is why we "
"add 5 to it. Let's make a long trail of them:"
msgstr ""

#: A.06-minecraft.md:107
#, no-wrap
msgid ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:115
msgid ""
"Now, jump over to Minecraft, make sure you're in flying-mode (double tap "
"space if not) and fly all around the world. Look behind you to see a pretty "
"trail of melon blocks! See what kind of twisty patterns you can make in the "
"sky."
msgstr ""

#: A.06-minecraft.md:120
msgid "Live Coding Minecraft"
msgstr ""

#: A.06-minecraft.md:122
msgid ""
"Those of you that have been following this tutorial over the last few months "
"will probably have your minds blown at this point. The trail of melons is "
"pretty cool, but the most exciting part of the previous example is that you "
"can use `live_loop` with Minecraft! For those that don't know, `live_loop` "
"is Sonic Pi's special magic ability that no other programming language has. "
"It lets you run multiple loops at the same time and allows you to change "
"them whilst they run. They are incredibly powerful and amazing fun. I use "
"`live_loop`s to perform music in nightclubs with Sonic Pi - DJs use discs "
"and I use `live_loop`s :-) However, today we're going to live code both "
"music and Minecraft."
msgstr ""

#: A.06-minecraft.md:133
msgid ""
"Let's get started. Run the code above and start making your melon trail "
"again. Now, without stopping the code, just simply change `:melon` to `:"
"brick` and hit run. Hey presto, you're now making a brick trail. How simple "
"was that! Fancy some music to go with it? Easy. Try this:"
msgstr ""

#: A.06-minecraft.md:138
#, no-wrap
msgid ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:151
msgid ""
"Now, whilst that's playing start changing the code. Change the block types - "
"try `:water`, `:grass` or your favourite block type. Also, try changing the "
"cutoff value from `70` to `80` and then up to `100`. Isn't this fun?"
msgstr ""

#: A.06-minecraft.md:158
msgid ""
"![Screen 2](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-2-"
"small.png)"
msgstr ""

#: A.06-minecraft.md:160
msgid ""
"Let's combine everything we've seen so far with a little extra magic. Let's "
"combine our teleportation ability with block placing and music to make a "
"Minecraft Music Video. Don't worry if you don't understand it all, just type "
"it in and have a play by changing some of the values whilst it's running "
"live. Have fun and see you next time..."
msgstr ""

#: A.06-minecraft.md:166
#, no-wrap
msgid ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.07-bizet.md:1
msgid "A.7 Bizet Beats"
msgstr ""

#: A.07-bizet.md:3
msgid "Bizet Beats"
msgstr ""

#: A.07-bizet.md:5
msgid ""
"After our brief excursion to the fantastic world of coding Minecraft with "
"Sonic Pi last month, let's get musical again. Today we're going to bring a "
"classical operatic dance piece straight into the 21st century using the "
"awesome power of code."
msgstr ""

#: A.07-bizet.md:10
msgid "Outrageous and Disruptive"
msgstr ""

#: A.07-bizet.md:12
msgid ""
"Let's jump into a time machine back to the year 1875. A composer called "
"Bizet had just finished his latest opera Carmen. Unfortunately like many "
"exciting and disruptive new pieces of music people initially didn't like it "
"at all because it was too outrageous and different. Sadly Bizet died ten "
"years before the opera gained huge international success and became one of "
"the most famous and frequently performed operas of all time. In sympathy "
"with this tragedy let's take one of the main themes from Carmen and convert "
"it to a modern format of music that is also too outrageous and different for "
"most people in our time - live coded music!"
msgstr ""

#: A.07-bizet.md:23
msgid "Decoding the Habanera"
msgstr ""

#: A.07-bizet.md:25
msgid ""
"Trying to live code the whole opera would be a bit of a challenge for this "
"tutorial, so let's focus on one of the most famous parts - the bass line to "
"the Habanera:"
msgstr ""

#: A.07-bizet.md:29
msgid "![Habanera Riff](../images/tutorial/articles/A.07-bizet/habanera.png)"
msgstr ""

#: A.07-bizet.md:31
msgid ""
"This may look extremely unreadable to you if you haven't yet studied music "
"notation. However, as programmers we see music notation as just another form "
"of code - only it represents instructions to a musician instead of a "
"computer. We therefore need to figure out a way of decoding it."
msgstr ""

#: A.07-bizet.md:36
msgid "Notes"
msgstr ""

#: A.07-bizet.md:38
msgid ""
"The notes are arranged from left to right like the words in this magazine "
"but also have different heights. *The height on the score represents the "
"pitch of the note.* The higher the note on the score, the higher the pitch "
"of the note."
msgstr ""

#: A.07-bizet.md:43
msgid ""
"In Sonic Pi we already know how to change the pitch of a note - we either "
"use high or low numbers such as `play 75` and `play 80` or we use the note "
"names: `play :E` and `play :F`. Luckily each of the vertical positions of "
"the musical score represents a specific note name. Take a look at this handy "
"look up table:"
msgstr ""

#: A.07-bizet.md:49
msgid "![Notes](../images/tutorial/articles/A.07-bizet/notes.png)"
msgstr ""

#: A.07-bizet.md:51
msgid "Rests"
msgstr ""

#: A.07-bizet.md:53
msgid ""
"Music scores are an extremely rich and expressive kind of code capable of "
"communicating many things. It therefore shouldn't come as much of a surprise "
"that musical scores can not only tell you what notes to play but also when "
"*not* to play notes. In programming this is pretty much equivalent to the "
"idea of `nil` or `null` - the absence of a value. In other words not playing "
"a note is like the absence of a note."
msgstr ""

#: A.07-bizet.md:60
msgid ""
"If you look closely at the score you'll see that it's actually a combination "
"of black dots with lines which represent notes to play and squiggly things "
"which represent the rests. Luckily Sonic Pi has a very handy representation "
"for a rest: `:r`, so if we run: `play :r` it actually plays silence! We "
"could also write `play :rest`, `play nil` or `play false` which are all "
"equivalent ways of representing rests."
msgstr ""

#: A.07-bizet.md:67
msgid "Rhythm"
msgstr ""

#: A.07-bizet.md:69
msgid ""
"Finally, there's one last thing to learn how to decode in the notation - the "
"timings of the notes. In the original notation you'll see that the notes are "
"connected with thick lines called beams. The second note has two of these "
"beams which means it lasts for a 16th of a beat. The other notes have a "
"single beam which means they last for an 8th of a beat. The rest has two "
"squiggly beams which means it also represents a 16th of the beat."
msgstr ""

#: A.07-bizet.md:77
msgid ""
"When we attempt to decode and explore new things a very handy trick is to "
"make everything as similar as possible to try and see any relationships or "
"patterns. For example, when we re-write our notation purely in 16ths you can "
"see that our notation just turns into a nice sequence of notes and rests."
msgstr ""

#: A.07-bizet.md:83
msgid ""
"![Habanera Riff 2](../images/tutorial/articles/A.07-bizet/habanera2.png)"
msgstr ""

#: A.07-bizet.md:85
msgid "Re-coding the Habanera"
msgstr ""

#: A.07-bizet.md:87
msgid ""
"We're now in a position to start translating this bass line to Sonic Pi. "
"Let's encode these notes and rests in a ring:"
msgstr ""

#: A.07-bizet.md:90
#, no-wrap
msgid "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"
msgstr ""

#: A.07-bizet.md:94
msgid ""
"Let's see what this sounds like. Throw it in a live loop and tick through it:"
msgstr ""

#: A.07-bizet.md:97
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: A.07-bizet.md:104
msgid ""
"Fabulous, that instantly recognisable riff springs to life through your "
"speakers. It took a lot of effort to get here, but it was worth it - high "
"five!"
msgstr ""

#: A.07-bizet.md:108
msgid "Moody Synths"
msgstr ""

#: A.07-bizet.md:110
msgid ""
"Now we have the bass line, let's re-create some of the ambience of the "
"operatic scene. One synth to try out is `:blade` which is a moody 80s style "
"synth lead. Let's try it with the starting note `:d` passed through a slicer "
"and reverb:"
msgstr ""

#: A.07-bizet.md:115
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""

#: A.07-bizet.md:133
msgid ""
"Now, try the other notes in the bass line: `:a` and `:f5`. Remember, you "
"don't need to hit stop, just modify the code whilst the music is playing and "
"hit run again. Also, try different values for the slicer's `phase:` opt such "
"as `0.5`, `0.75` and `1`."
msgstr ""

#: A.07-bizet.md:140
msgid ""
"Finally, let's combine all the ideas so far into a new remix of the "
"Habanera. You might notice that I've included another part of the bass line "
"as a comment. Once you've typed it all into a fresh buffer hit Run to hear "
"the composition. Now, without hitting stop, *uncomment* the second line by "
"removing the `#` and hit run again - how marvellous is that! Now, start "
"mashing it around yourself and have fun."
msgstr ""

#: A.07-bizet.md:147
#, no-wrap
msgid ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.08-minecraft-vj.md:1
msgid "A.8 Become a Minecraft VJ"
msgstr ""

#: A.08-minecraft-vj.md:3
msgid "Become a Minecraft VJ"
msgstr ""

#: A.08-minecraft-vj.md:5
msgid ""
"![Screen 0](../images/tutorial/articles/A.08-minecraft-vj/minecraft-vj-0-"
"small.png)"
msgstr ""

#: A.08-minecraft-vj.md:7
msgid ""
"Everyone has played Minecraft. You will all have built amazing structures, "
"designed cunning traps and even created elaborate cart lines controlled by "
"redstone switches. How many of you have performed with Minecraft? We bet you "
"didn't know that you could use Minecraft to create amazing visuals just like "
"a professional VJ."
msgstr ""

#: A.08-minecraft-vj.md:13
msgid ""
"If your only way of modifying Minecraft was with the mouse, you'd have a "
"tough time changing things fast enough. Luckily for you your Raspberry Pi "
"comes with a version of Minecraft that can be controlled with code. It also "
"comes with an app called Sonic Pi which makes coding Minecraft not only easy "
"but also incredibly fun."
msgstr ""

#: A.08-minecraft-vj.md:19
msgid ""
"In today's article we'll be showing you some of the tips and tricks that "
"we've used to create performances in night clubs and music venues around the "
"world."
msgstr ""

#: A.08-minecraft-vj.md:23
msgid "Let's get started..."
msgstr ""

#: A.08-minecraft-vj.md:25
msgid "Getting Started"
msgstr ""

#: A.08-minecraft-vj.md:27
msgid ""
"Let's start with a simple warm up exercise to refresh ourselves with the "
"basics. First up, crack open your Raspberry Pi and then fire up both "
"Minecraft and Sonic Pi. In Minecraft, create a new world, and in Sonic Pi "
"choose a fresh buffer and write in this code:"
msgstr ""

#: A.08-minecraft-vj.md:32
#, no-wrap
msgid "mc_message \"Let's get started...\""
msgstr ""

#: A.08-minecraft-vj.md:36
msgid ""
"Hit the Run button and you'll see the message over in the Minecraft window. "
"OK, we're ready to start, let's have some fun......"
msgstr ""

#: A.08-minecraft-vj.md:39
msgid "Sand Storms"
msgstr ""

#: A.08-minecraft-vj.md:41
msgid ""
"When we're using Minecraft to create visuals we try and think about what "
"will both look interesting and also be easy to generate from code. One nice "
"trick is to create a sand storm by dropping sand blocks from the sky. For "
"that all we need are a few basic fns:"
msgstr ""

#: A.08-minecraft-vj.md:46
msgid "`sleep` - for inserting a delay between actions"
msgstr ""

#: A.08-minecraft-vj.md:47
msgid "`mc_location` - to find our current location"
msgstr ""

#: A.08-minecraft-vj.md:48
msgid "`mc_set_block`- to place sand blocks at a specific location"
msgstr ""

#: A.08-minecraft-vj.md:49
msgid "`rrand` - to allow us to generate random values within a range"
msgstr ""

#: A.08-minecraft-vj.md:50
msgid "`live_loop` - to allow us to continually make it rain sand"
msgstr ""

#: A.08-minecraft-vj.md:52
msgid ""
"If you're unfamiliar with any of the built-in fns such as `rrand`, just type "
"the word into your buffer, click on it and then hit the keyboard combo "
"`Control-i` to bring up the built-in documentation. Alternatively you can "
"navigate to the *lang* tab in the Help system and then look up the fns "
"directly along with all the other exciting things you can do."
msgstr ""

#: A.08-minecraft-vj.md:58
msgid ""
"Let's make it rain a little first before unleashing the full power of the "
"storm. Grab your current location and use it to create a few sand blocks up "
"in the sky nearby:"
msgstr ""

#: A.08-minecraft-vj.md:62
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"
msgstr ""

#: A.08-minecraft-vj.md:73
msgid ""
"When you hit Run, you might have to look around a little as the blocks may "
"start falling down behind you depending on which direction you're currently "
"facing. Don't worry, if you missed them just hit Run again for another batch "
"of sand rain - just make sure you're looking the right way!"
msgstr ""

#: A.08-minecraft-vj.md:79
msgid ""
"Let's quickly review what's going on here. On the first line we grabbed "
"Steve's location as coordinates with the fn `mc_location` and placed them "
"into the vars `x`, `y`, and `z`. Then on the next lines we used the "
"`mc_set_block` fn to place some sand at the same coordinates as Steve but "
"with some modifications. We chose the same x coordinate, a y coordinate 20 "
"blocks higher and then successively larger z coordinates so the sand dropped "
"in a line away from Steve."
msgstr ""

#: A.08-minecraft-vj.md:87
msgid ""
"Why don't you take that code and start playing around with it yourself? Try "
"adding more lines, changing the sleep times, try mixing `:sand` with `:"
"gravel` and choose different coordinates. Just experiment and have fun!"
msgstr ""

#: A.08-minecraft-vj.md:91
msgid "Live Loops Unleashed"
msgstr ""

#: A.08-minecraft-vj.md:93
msgid ""
"OK, it's time to get the storm raging by unleashing the full power of the "
"`live_loop` - Sonic Pi's magical ability which unleashes the full power of "
"live coding - changing code on-the-fly whilst it's running!"
msgstr ""

#: A.08-minecraft-vj.md:97
#, no-wrap
msgid ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y+20, z+zd\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.08-minecraft-vj.md:109
msgid ""
"What fun! We're looping round pretty quickly (8 times a second) and during "
"each loop we're finding Steve's location like before but then generating 3 "
"random values:"
msgstr ""

#: A.08-minecraft-vj.md:113
msgid "`xd` - the difference for x which will be between -10 and 10"
msgstr ""

#: A.08-minecraft-vj.md:114
msgid "`zd` - the difference for z also between -10 and 10"
msgstr ""

#: A.08-minecraft-vj.md:115
msgid "`co` - a cutoff value for the low pass filter between 70 and 130"
msgstr ""

#: A.08-minecraft-vj.md:117
msgid ""
"We then use those random values in the fns `synth` and `mc_set_block` giving "
"us sand falling in random locations around Steve along with a percussive "
"rain-like sound from the `:cnoise` synth."
msgstr ""

#: A.08-minecraft-vj.md:121
msgid ""
"For those of you new to live loops - this is where the fun really starts "
"with Sonic Pi. Whilst the code is running and the sand is pouring down, try "
"changing one of the values, perhaps the sleep time to `0.25` or the `:sand` "
"block type to `:gravel`. Now hit run *again*. Hey Presto! Things changed "
"without the code stopping. This is your gateway to performing like a real "
"VJ. Keep practising and changing things around. How different can you make "
"the visuals without stopping the code?"
msgstr ""

#: A.08-minecraft-vj.md:129
msgid "Epic Block Patterns"
msgstr ""

#: A.08-minecraft-vj.md:131
msgid ""
"![Screen 1](../images/tutorial/articles/A.08-minecraft-vj/minecraft-vj-1-"
"small.png)"
msgstr ""

#: A.08-minecraft-vj.md:133
msgid ""
"Finally, another great way of generating interesting visuals is to generate "
"huge patterned walls to fly towards and close by. For this effect we'll need "
"to move from placing the blocks randomly to placing them in an ordered "
"manner. We can do this by nesting two sets of iteration (hit the Help button "
"and navigate to section 5.2 of the tutorial \"Iteration and Loops\" for more "
"background on iteration). The funny `|xd|` after the do means that `xd` will "
"be set for each value of the iteration. So the first time it will be 0, then "
"1, then 2... etc. By nesting two lots of iteration together like this we can "
"generate all the coordinates for a square. We can then randomly choose block "
"types from a ring of blocks for an interesting effect:"
msgstr ""

#: A.08-minecraft-vj.md:145
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"
msgstr ""

#: A.08-minecraft-vj.md:155
msgid ""
"Pretty neat. Whilst we're having fun here, try changing `bs.choose` to `bs."
"tick` to move from a random pattern to a more regular one. Try changing the "
"block types and the more adventurous of you might want to try sticking this "
"within a `live_loop` so that the patterns keep changing automatically."
msgstr ""

#: A.08-minecraft-vj.md:161
msgid ""
"Now, for the VJ finale - change the two `10.times` to `100.times` and hit "
"Run. Kaboom! A Huge gigantic wall of randomly placed bricks. Imagine how "
"long it would take you to build that manually with your mouse! Double-tap "
"space to enter fly-mode and start swooping by for some great visual effects. "
"Don't stop here though - use your imagination to conjure up some cool ideas "
"and then use the coding power of Sonic Pi to make it real. When you've "
"practised enough dim the lights and put on a VJ show for your friends!"
msgstr ""

#: A.09-randomisation.md:1
msgid "A.9 Randomisation"
msgstr ""

#: A.09-randomisation.md:3
msgid "Surfing Random Streams"
msgstr ""

#: A.09-randomisation.md:5
msgid ""
"Back in episode 4 of this tutorial series we took a brief look at "
"randomisation whilst coding up some sizzling synth riffs. Given that "
"randomisation is such an important part of my live coding DJ sets I thought "
"it would be useful to cover the fundamentals in much greater detail. So, get "
"your lucky hat on and let's surf some random streams!"
msgstr ""

#: A.09-randomisation.md:11
msgid "There is no random"
msgstr ""

#: A.09-randomisation.md:13
msgid ""
"The first thing to learn which might really surprise you when playing with "
"Sonic Pi's randomisation functions is that they're not actually really "
"random. What does this actually mean? Well, let's try a couple of tests. "
"First, imagine a number in your head between 0 and 1. Keep it there and "
"don't tell me. Now let me guess... was it `0.321567`? No? Bah, I'm clearly "
"no good at this. Let me have another go, but let's ask Sonic Pi to choose a "
"number this time. Fire up Sonic Pi v2.7+ and ask it for a random number but "
"again don't tell me:"
msgstr ""

#: A.09-randomisation.md:22
#, no-wrap
msgid "print rand"
msgstr ""

#: A.09-randomisation.md:26
msgid ""
"Now for the reveal... was it `0.75006103515625`? Yes! Ha, I can see you're a "
"little sceptical. Perhaps it was just a lucky guess. Let's try again. Press "
"the Run button again and see what we get... What? `0.75006103515625` again? "
"This clearly can't be random! You're right, it's not."
msgstr ""

#: A.09-randomisation.md:32
msgid ""
"What's going on here? The fancy computer science word here is determinism. "
"This just means that nothing is by chance and everything is destined to be. "
"Your version of Sonic Pi is destined to always return `0.75006103515625` in "
"the program above. This might sound pretty useless, but let me assure you "
"that it's one of the most powerful parts of Sonic Pi. If you stick at it "
"you'll learn how to rely on the deterministic nature of Sonic Pi's "
"randomisation as a fundamental building block for your compositions and live "
"coded DJ sets."
msgstr ""

#: A.09-randomisation.md:41
msgid "A Random Melody"
msgstr ""

#: A.09-randomisation.md:43
msgid ""
"When Sonic Pi boots it actually loads into memory a sequence of 441,000 pre-"
"generated random values. When you call a random function such as `rand` or "
"`rrand`, this random stream is used to generate your result. Each call to a "
"random function consumes a value from this stream. Therefore the 10th call "
"to a random function will use the 10th value from the stream. Also, every "
"time you press the Run button, the stream is reset for that run. This is why "
"I could predict the result to `rand` and why the 'random' melody was the "
"same every time. Everybody's version of Sonic Pi uses the exact same random "
"stream which is very important when we start sharing our pieces with each "
"other."
msgstr ""

#: A.09-randomisation.md:54
msgid "Let's use this knowledge to generate a repeatable random melody:"
msgstr ""

#: A.09-randomisation.md:56
#, no-wrap
msgid ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"
msgstr ""

#: A.09-randomisation.md:63
msgid ""
"Type this into a spare buffer and hit Run. You'll hear a melody consisting "
"of 'random' notes between 50 and 95. When it's finished, hit Run again to "
"hear exactly the same melody again."
msgstr ""

#: A.09-randomisation.md:67
msgid "Handy Randomisation Functions"
msgstr ""

#: A.09-randomisation.md:69
msgid ""
"Sonic Pi comes with a number of useful functions for working with the random "
"stream. Here's a list of some of the most useful:"
msgstr ""

#: A.09-randomisation.md:72
msgid "`rand` - Simply returns the next value in the random stream"
msgstr ""

#: A.09-randomisation.md:73
msgid "`rrand` - Returns a random value within a range"
msgstr ""

#: A.09-randomisation.md:74
msgid "`rrand_i` - Returns a random whole number within a range"
msgstr ""

#: A.09-randomisation.md:75
msgid "`one_in` - Returns true or false with the given probability"
msgstr ""

#: A.09-randomisation.md:76
msgid "`dice` - Imitates rolling a dice and returns a value between 1 and 6"
msgstr ""

#: A.09-randomisation.md:77
msgid "`choose` - Chooses a random value from a list"
msgstr ""

#: A.09-randomisation.md:79
msgid ""
"Check out their documentation in the Help system for detailed information "
"and examples."
msgstr ""

#: A.09-randomisation.md:82
msgid "Resetting the Stream"
msgstr ""

#: A.09-randomisation.md:84
msgid ""
"Whilst the ability to repeat a sequence of chosen notes is essential to "
"allow you to replay a riff on the dance floor, it might not be exactly the "
"riff you want. Wouldn't it be great if we could try a number of different "
"riffs and choose the one we liked best? This is where the real magic starts."
msgstr ""

#: A.09-randomisation.md:90
msgid ""
"We can manually set the stream with the fn `use_random_seed`. In Computer "
"Science, a random seed is the starting point from which a new stream of "
"random values can sprout out and blossom. Let's try it:"
msgstr ""

#: A.09-randomisation.md:94
#, no-wrap
msgid ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.09-randomisation.md:102
msgid ""
"Great, we get the first three notes of our random melody above: `84`, `83` "
"and `71`. However, we can now change the seed to something else. How about "
"this:"
msgstr ""

#: A.09-randomisation.md:106
#, no-wrap
msgid ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.09-randomisation.md:114
msgid ""
"Interesting, we get `83`, `71` and `61` . You might notice that the first "
"two numbers here are the same as the last two numbers before - this isn't a "
"coincidence."
msgstr ""

#: A.09-randomisation.md:118
msgid ""
"Remember that the random stream is just a giant list of 'pre-rolled' values. "
"Using a random seed simply jumps us to a point in that list. Another way of "
"thinking about it is to imagine a huge deck of pre-shuffled cards. Using a "
"random seed is cutting the deck at a particular point. The fabulous part of "
"this is that it's precisely this ability to jump around the random stream "
"which gives us huge power when making music."
msgstr ""

#: A.09-randomisation.md:126
msgid ""
"Let's revisit our random melody of 8 notes with this new stream resetting "
"power, but let's also throw in a live loop so we can experiment live whilst "
"it's playing:"
msgstr ""

#: A.09-randomisation.md:130
#, no-wrap
msgid ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: A.09-randomisation.md:140
msgid ""
"Now, whilst it's still playing, change the seed value from `0` to something "
"else. Try `100`, what about `999`. Try your own values, experiment and play "
"around - see which seed generates the riff you like best."
msgstr ""

#: A.09-randomisation.md:147
msgid ""
"This month's tutorial has been quite a technical dive into the workings of "
"Sonic Pi's randomisation functionality. Hopefully it has given you some "
"insight into how it works and how you can start using randomisation in a "
"reliable way to create repeatable patterns within your music. It's important "
"to stress that you can use repeatable randomisation *anywhere* you want. For "
"example, you can randomise the amplitude of notes, the timing of the rhythm, "
"the amount of reverb, the current synth, the mix of an FX, etc. etc. In the "
"future we'll take a close look at some of these applications, but for now "
"let me leave you with a short example."
msgstr ""

#: A.09-randomisation.md:157
msgid ""
"Type the following into a spare buffer, hit Run, and then start changing the "
"seeds around, hit Run again (whilst it's still playing) and explore the "
"different sounds, rhythms and melodies you can make. When you find a nice "
"one, remember the seed number so you can get back to it. Finally, when "
"you've found a few seeds you like, put on a live coded performance for your "
"friends by simply switching between your favourite seeds to create a full "
"piece."
msgstr ""

#: A.09-randomisation.md:165
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: A.10-controlling-your-sound.md:1
msgid "A.10 Control"
msgstr ""

#: A.10-controlling-your-sound.md:3
msgid "Controlling Your Sound"
msgstr ""

#: A.10-controlling-your-sound.md:5
msgid ""
"So far during this series we've focussed on triggering sounds. We've "
"discovered that we can trigger the many synths built into Sonic Pi with "
"`play` or `synth` and how to trigger pre-recorded samples with `sample`. "
"We've also looked at how we can wrap these triggered sounds within studio FX "
"such as reverb and distortion using the `with_fx` command. Combine this with "
"Sonic Pi's incredibly accurate timing system and you can produce a vast "
"array of sounds, beats and riffs. However, once you've carefully selected a "
"particular sound's options and triggered it, there's no ability to mess with "
"it whilst it's playing right? Wrong! Today you're going to learn something "
"very powerful - how to control running synths."
msgstr ""

#: A.10-controlling-your-sound.md:17
msgid "A Basic Sound"
msgstr ""

#: A.10-controlling-your-sound.md:19
msgid ""
"Let's create a nice simple sound. Fire up Sonic Pi and in a fresh buffer "
"type the following:"
msgstr ""

#: A.10-controlling-your-sound.md:22
#, no-wrap
msgid "synth :prophet, note: :e1, release: 8, cutoff: 100"
msgstr ""

#: A.10-controlling-your-sound.md:26
msgid ""
"Now press the Run button at the top left to hear a lovely rumbling synth "
"sound. Go ahead, press it again a few times to get a feel for it. OK, done? "
"Let's start controlling it!"
msgstr ""

#: A.10-controlling-your-sound.md:30
msgid "Synth Nodes"
msgstr ""

#: A.10-controlling-your-sound.md:32
msgid ""
"A little known feature in Sonic Pi is that the fns `play`, `synth` and "
"`sample`, return something called a `SynthNode` which represents a running "
"sound. You can capture one of these `SynthNode`s using a standard variable "
"and then **control** it at a later point in time. For example, let's change "
"the value of the `cutoff:` opt after 1 beat:"
msgstr ""

#: A.10-controlling-your-sound.md:38
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""

#: A.10-controlling-your-sound.md:44
msgid "Let's look at each line in turn:"
msgstr ""

#: A.10-controlling-your-sound.md:46
msgid ""
"Firstly we trigger the `:prophet` synth using the `synth` fn as normal. "
"However we also capture the result in a variable called `sn`. We could have "
"called this variable something completely different such as `synth_node` or "
"`jane` - the name doesn't matter. However, it's important to choose a name "
"that's meaningful to you for your performances and for people reading your "
"code. I chose `sn` as it's a nice short mnemonic for synth node."
msgstr ""

#: A.10-controlling-your-sound.md:54
msgid ""
"On line 2 we have a standard `sleep` command. This does nothing special - it "
"just asks the computer to wait for 1 beat before moving onto the next line."
msgstr ""

#: A.10-controlling-your-sound.md:58
msgid ""
"Line 3 is where the control fun starts. Here, we use the `control` fn to "
"tell our running `SynthNode` to change the cutoff value to `130`. If you hit "
"the **Run** button, you'll hear the `:prophet` synth start playing as "
"before, but after 1 beat it will shift to sound a lot brighter."
msgstr ""

#: A.10-controlling-your-sound.md:63
msgid "Modulatable Options"
msgstr ""

#: A.10-controlling-your-sound.md:65
msgid ""
"Most of Sonic Pi's synths and FX opts may be changed after being triggered. "
"However, this isn't the case for all of them. For example, the envelope opts "
"`attack:`, `decay:`, `sustain:` and `release:` can only be set when "
"triggering the synth. Figuring out which opts can and can't be changed is "
"simple - just head to the documentation for a given synth or FX and then "
"scroll down to the individual option documentation and look for the phrases "
"\"May be changed whilst playing\" or \"Can not be changed once set\". For "
"example, the documentation for the `:beep` synth's `attack:` opt makes it "
"clear that it's not possible to change it:"
msgstr ""

#: A.10-controlling-your-sound.md:76
msgid "Default: 0"
msgstr ""

#: A.10-controlling-your-sound.md:77
msgid "Must be zero or greater"
msgstr ""

#: A.10-controlling-your-sound.md:78
msgid "Can not be changed once set"
msgstr ""

#: A.10-controlling-your-sound.md:79
msgid "Scaled with current BPM value"
msgstr ""

#: A.10-controlling-your-sound.md:81
msgid "Multiple Changes"
msgstr ""

#: A.10-controlling-your-sound.md:83
msgid ""
"Whilst a synth is running you're not limited to changing it only once - "
"you're free to change it as many times as you like. For example, we can turn "
"our `:prophet` into a mini arpeggiator with the following:"
msgstr ""

#: A.10-controlling-your-sound.md:87
#, no-wrap
msgid ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.10-controlling-your-sound.md:97
msgid ""
"In this snippet of code we just added a couple of extra things. First we "
"defined a new variable called `notes` which contains the notes we'd like to "
"cycle through (an arpeggiator is just a fancy name for something that cycles "
"through a list of notes in order). Secondly we replaced our single call to "
"`control` with an iteration calling it 16 times. In each call to `control` "
"we `.tick` through our ring of `notes` which will automatically repeat once "
"we get to the end (thanks to the fabulous power of Sonic Pi's rings). For a "
"bit of variety try replacing `.tick` with `.choose` and see if you can hear "
"the difference."
msgstr ""

#: A.10-controlling-your-sound.md:107
msgid ""
"Note that we can change multiple opts simultaneously. Try changing the "
"control line to the following and listen for the difference:"
msgstr ""

#: A.10-controlling-your-sound.md:110
#, no-wrap
msgid "control sn, note: notes.tick, cutoff: rrand(70, 130)"
msgstr ""

#: A.10-controlling-your-sound.md:114
msgid "Sliding"
msgstr ""

#: A.10-controlling-your-sound.md:116
msgid ""
"When we control a `SynthNode`, it responds exactly on time and instantly "
"changes the value of the opt to the new one as if you'd pressed a button or "
"flicked a switch requesting the change. This can sound rhythmical and "
"percussive - especially if the opt controls an aspect of the timbre such as "
"`cutoff:`. However, sometimes you don't want the change to happen "
"instantaneously. Instead, you might want to smoothly move from the current "
"value to the new one as if you'd moved a slider or dial. Of course, Sonic Pi "
"can also do this too using the `_slide:` opts."
msgstr ""

#: A.10-controlling-your-sound.md:125
msgid ""
"Each opt that can be modified also has a special corresponding `_slide:` opt "
"that allows you to specify a slide time. For example, `amp:` has `amp_slide:"
"` and `cutoff:` has `cutoff_slide:`. These slide opts work slightly "
"differently than all the other opts in that they tell the synth note how to "
"behave **next time they are controlled**. Let's take a look:"
msgstr ""

#: A.10-controlling-your-sound.md:131
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""

#: A.10-controlling-your-sound.md:137
msgid ""
"Notice how this example is exactly the same as before except with the "
"addition of `cutoff_slide:`. This is saying that next time this synth has "
"its `cutoff:` opt controlled, it will take 2 beats to slide from the current "
"value to the new one. Therefore, when we use `control` you can hear the "
"cutoff slide from 70 to 130. It creates an interesting dynamic feel to the "
"sound. Now, try changing the `cutoff_slide:` time to a shorter value such as "
"0.5 or a longer value such as 4 to see how it changes the sound. Remember, "
"you can slide any of the modifiable opts in exactly this way and each "
"`_slide:` value can be totally different so you can have the cutoff sliding "
"slowly, the amp sliding fast and the pan sliding somewhere in between if "
"that's what you're looking to create..."
msgstr ""

#: A.10-controlling-your-sound.md:151
msgid ""
"Let's look at a short example which demonstrates the power of controlling "
"synths after they've been triggered. Notice that you can also slide FX just "
"like synths although with a slightly different syntax. Check out section 7.2 "
"of the built-in tutorial for more information on controlling FX."
msgstr ""

#: A.10-controlling-your-sound.md:157
msgid ""
"Copy the code into a spare buffer and take a listen. Don't stop there though "
"- play around with the code. Change the slide times, change the notes, the "
"synth, the FX and the sleep times and see if you can turn it into something "
"completely different!"
msgstr ""

#: A.10-controlling-your-sound.md:162
#, no-wrap
msgid ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""

#: A.11-beat-tracking.md:1
msgid "A.11 Tick Tock"
msgstr ""

#: A.11-beat-tracking.md:3
msgid "Tracking the Beat"
msgstr ""

#: A.11-beat-tracking.md:5
msgid ""
"Last month in this series we took a deep technical dive into the "
"randomisation system underpinning Sonic Pi. We explored how we can use it to "
"deterministically add new levels of dynamic control over our code. This "
"month we're going to continue our technical dive and turn our attention to "
"Sonic Pi's unique tick system. By the end of this article you'll be ticking "
"your way through rhythms and riffs on your way to being a live coding DJ."
msgstr ""

#: A.11-beat-tracking.md:13
msgid "Beat Counting"
msgstr ""

#: A.11-beat-tracking.md:15
msgid ""
"When making music we often want to do a different thing depending on which "
"beat it is. Sonic Pi has a special beat counting system called `tick` to "
"give you precise control over when a beat actually occurs and even supports "
"multiple beats with their own tempos."
msgstr ""

#: A.11-beat-tracking.md:20
msgid ""
"Let's have a play - to advance the beat we just need to call `tick`. Open up "
"a fresh buffer, type in the following and hit Run:"
msgstr ""

#: A.11-beat-tracking.md:23
#, no-wrap
msgid "puts tick #=> 0"
msgstr ""

#: A.11-beat-tracking.md:27
msgid ""
"This will return the current beat: `0`. Notice that even if you press the "
"Run button a few times it will always return `0`. This is because each run "
"starts a fresh beat counting from 0. However, whilst the run is still "
"active, we can advance the beat as many times as we want:"
msgstr ""

#: A.11-beat-tracking.md:32
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"
msgstr ""

#: A.11-beat-tracking.md:38
msgid ""
"Whenever you see the symbol `#=>` at the end of a line of code it means that "
"that line will log the text on the right-hand-side. For example, `puts foo "
"#=> 0` means the code `puts foo` prints `0` to the log at that point in the "
"program."
msgstr ""

#: A.11-beat-tracking.md:43
msgid "Checking the Beat"
msgstr ""

#: A.11-beat-tracking.md:45
msgid ""
"We've seen that `tick` does two things. It increments (adds one) and returns "
"the current beat. Sometimes we just want to look at the current beat without "
"having to increment it which we can do via `look`:"
msgstr ""

#: A.11-beat-tracking.md:49
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"
msgstr ""

#: A.11-beat-tracking.md:56
msgid ""
"In this code we tick the beat up twice and then call `look` twice. We'll see "
"the following values in the log: `0`, `1`, `1`, `1`. The first two `tick`s "
"returned `0`, then `1` as expected, then the two `look`s just returned the "
"last beat value twice which was `1`."
msgstr ""

#: A.11-beat-tracking.md:64
msgid ""
"So now we can advance the beat with `tick` and check the beat with `look`. "
"What next? We need something to tick over. Sonic Pi uses rings for "
"representing riffs, melodies and rhythms and the tick system has been "
"specifically designed to work very closely with them. In fact, rings have "
"their own dot version of `tick` which does two things. Firstly, it acts like "
"a regular tick and increments the beat. Secondly it looks up the ring value "
"using the beat as the index. Let's take a look:"
msgstr ""

#: A.11-beat-tracking.md:72
#, no-wrap
msgid "puts (ring :a, :b, :c).tick #=> :a"
msgstr ""

#: A.11-beat-tracking.md:76
msgid ""
"`.tick` is a special dot version of `tick` which will return the first value "
"of the ring `:a`. We can grab each of the values in the ring by calling `."
"tick` multiple times:"
msgstr ""

#: A.11-beat-tracking.md:80
#, no-wrap
msgid ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"
msgstr ""

#: A.11-beat-tracking.md:88
msgid ""
"Take a look at the log and you'll see `:a`, `:b`, `:c` and then `:a` again. "
"Notice that `look` returns `3`. Calls to `.tick` act just like they are "
"regular calls to `tick` - they increment the local beat."
msgstr ""

#: A.11-beat-tracking.md:93
msgid "A Live Loop Arpeggiator"
msgstr ""

#: A.11-beat-tracking.md:95
msgid ""
"The real power comes when you mix `tick` with rings and `live_loop`s. When "
"combined we have all the tools we need to both build and understand a simple "
"arpegiator. We need just four things:"
msgstr ""

#: A.11-beat-tracking.md:99
msgid "A ring containing the notes we want to loop over."
msgstr ""

#: A.11-beat-tracking.md:100
msgid "A means of incrementing and obtaining the beat."
msgstr ""

#: A.11-beat-tracking.md:101
msgid "The ability to play a note based on the current beat."
msgstr ""

#: A.11-beat-tracking.md:102
msgid "A loop structure to keep the arpegiator repeating."
msgstr ""

#: A.11-beat-tracking.md:104
msgid "These concepts can all be found in the following code:"
msgstr ""

#: A.11-beat-tracking.md:106
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.11-beat-tracking.md:116
msgid ""
"Let's look at each of these lines. First we define our ring of notes which "
"we'll continually play. We then create a `live_loop` called `:arp` which "
"loops round for us. Each time round the `live_loop` we set our synth to `:"
"dpulse` and then play the next note in our ring using `.tick`. Remember that "
"this will increment our beat counter and use the latest beat value as an "
"index into our notes ring. Finally, we wait for an eighth of a beat before "
"looping round again."
msgstr ""

#: A.11-beat-tracking.md:124
msgid "Multiple Simultaneous Beats"
msgstr ""

#: A.11-beat-tracking.md:126
msgid ""
"A really important thing to know is that `tick`s are local to the "
"`live_loop`. This means that each `live_loop` has its own independent beat "
"counter. This is much more powerful than having a global metronome and beat. "
"Let's take a look at this in action:"
msgstr ""

#: A.11-beat-tracking.md:131
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"
msgstr ""

#: A.11-beat-tracking.md:149
msgid "Clashing Beats"
msgstr ""

#: A.11-beat-tracking.md:151
msgid ""
"A big cause of confusion with Sonic Pi's tick system is when people want to "
"tick over multiple rings in the same `live_loop`:"
msgstr ""

#: A.11-beat-tracking.md:154
#, no-wrap
msgid ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"
msgstr ""

#: A.11-beat-tracking.md:164
msgid ""
"Even though each `live_loop` has its own independent beat counter, we're "
"calling `.tick` twice within the same `live_loop`. This means that the beat "
"will be incremented twice every time round. This can produce some "
"interesting polyrhythms but is often not what you want. There are two "
"solutions to this problem. One option is to manually call `tick` at the "
"start of the `live_loop` and then use `.look` to look up the current beat in "
"each `live_loop`. The second solution is to pass a unique name to each call "
"to `.tick` such as `.tick(:foo)`. Sonic Pi will then create and track a "
"separate beat counter for each named tick you use. That way you can work "
"with as many beats as you need! See the section on named ticks in 9.4 of the "
"built-in tutorial for more information."
msgstr ""

#: A.11-beat-tracking.md:178
msgid ""
"Let's bring all this knowledge of `tick`s, `ring`s and `live_loop`s together "
"for a final fun example. As usual, don't treat this as a finished piece. "
"Start changing things and play around with it and see what you can turn it "
"into. See you next time..."
msgstr ""

#: A.11-beat-tracking.md:183
#, no-wrap
msgid ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.12-sample-slicing.md:1
msgid "A.12 Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:3
msgid "Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:5
msgid ""
"Way back in episode 3 of this Sonic Pi series we looked at how to loop, "
"stretch and filter one of the most famous drum breaks of all time - the Amen "
"Break. In this tutorial we're going to take this one step further and learn "
"how to slice it up, shuffle the slices and glue it back together in a "
"completely new order. If that sounds a bit crazy to you, don't worry, it "
"will all become clear and you'll soon master a powerful new tool for your "
"live coded sets."
msgstr ""

#: A.12-sample-slicing.md:13
msgid "Sound as Data"
msgstr ""

#: A.12-sample-slicing.md:15
msgid ""
"Before we get started let's just take a brief moment to understand how to "
"work with samples. By now, you've all hopefully played with Sonic Pi's "
"powerful sampler. If not, there's no time like the present! Boot up your "
"Raspberry Pi, launch Sonic Pi from the Programming menu, type the following "
"into a fresh buffer and then hit the Run button to hear a pre-recorded drum "
"beat:"
msgstr ""

#: A.12-sample-slicing.md:26
msgid ""
"A recording of a sound is simply represented as data - lots of numbers "
"between -1 and 1 which represent the peaks and troughs of the sound wave. If "
"we play those numbers back in order, we get the original sound. However, "
"what's to stop us from playing them back in a different order and creating a "
"new sound?"
msgstr ""

#: A.12-sample-slicing.md:32
msgid ""
"How are samples actually recorded? It's actually pretty simple once you "
"understand the basic physics of sound. When you make a sound - for example "
"by hitting a drum, the noise travels through the air in a similar fashion to "
"how the surface of a lake ripples when you throw a pebble into it. When "
"those ripples reach your ears, your eardrum moves sympathetically and "
"converts those movements into the sound you hear. If we wish to record and "
"play back the sound, we therefore need a way of capturing, storing and "
"reproducing those ripples. One way is to use a microphone which acts like an "
"eardrum and moves back and forth as the sound ripples hit it. The microphone "
"then converts its position into a tiny electric signal which is then "
"measured many times a second. These measurements are then represented as a "
"series of numbers between -1 and 1."
msgstr ""

#: A.12-sample-slicing.md:46
msgid ""
"If we were to plot a visualisation of the sound it would be a simple graph "
"of data with time on the x axis and microphone/speaker position as a value "
"between -1 and 1 on the y axis. You can see an example of such a graph at "
"the top of the diagram."
msgstr ""

#: A.12-sample-slicing.md:51
msgid "Playing Part of a Sample"
msgstr ""

#: A.12-sample-slicing.md:53
msgid ""
"So, how do we code Sonic Pi to play a sample back in a different order? To "
"answer this question we need to take a look at the `start:` and `finish:` "
"opts for `sample`. These let us control the start and finish positions of "
"our playback of the numbers which represent the sound. The values for both "
"of these opts are represented as a number between `0` and `1` where `0` "
"represents the start of the sample and `1` is the end. So, to play the first "
"half of the Amen Break, we just need to specify a `finish:` of `0.5`:"
msgstr ""

#: A.12-sample-slicing.md:66
msgid ""
"We can add in a `start:` value to play an even smaller section of the sample:"
msgstr ""

#: A.12-sample-slicing.md:68
#, no-wrap
msgid "sample :loop_amen, start: 0.25, finish: 0.5"
msgstr ""

#: A.12-sample-slicing.md:72
msgid ""
"For fun, you can even have the `finish:` opt's value be *before* `start:` "
"and it will play the section backwards:"
msgstr ""

#: A.12-sample-slicing.md:75
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.25"
msgstr ""

#: A.12-sample-slicing.md:79
msgid "Re-ordering Sample Playback"
msgstr ""

#: A.12-sample-slicing.md:81
msgid ""
"Now that we know that a sample is simply a list of numbers that can be "
"played back in any order and also how to play a specific part of a sample we "
"can now start having fun playing a sample back in the 'wrong' order."
msgstr ""

#: A.12-sample-slicing.md:86
msgid ""
"![Amen Slices](../images/tutorial/articles/A.12-sample-slicing/amen_slice."
"png)"
msgstr ""

#: A.12-sample-slicing.md:88
msgid ""
"Let's take our Amen Break and chop it up into 8 equally-sized slices and "
"then shuffle the pieces around. Take a look at the diagram: at the top A) "
"represents the graph of our original sample data. Chopping it into 8 slices "
"gives us B) - notice that we've given each slice a different colour to help "
"distinguish them. You can see each slice's start and finish values at the "
"top. Finally C) is one possible re-ordering of the slices. We can then play "
"this back to create a new beat. Take a look at the code to do this:"
msgstr ""

#: A.12-sample-slicing.md:97
#, no-wrap
msgid ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"
msgstr ""

#: A.12-sample-slicing.md:108
msgid ""
"we choose a random slice to play which should be a random number between 0 "
"and 7 (remember that we start counting at 0). Sonic Pi has a handy function "
"for exactly this: `rand_i(8)`. We then store this random slice index in the "
"variable `slice_idx`."
msgstr ""

#: A.12-sample-slicing.md:113
msgid ""
"We define our `slice_size` which is 1/8 or 0.125. The `slice_size` is "
"necessary for us to convert our `slice_idx` into a value between 0 and 1 so "
"we can use it as our `start:` opt."
msgstr ""

#: A.12-sample-slicing.md:117
msgid ""
"We calculate the start position `s` by multiplying the `slice_idx` by the "
"`slice_size`."
msgstr ""

#: A.12-sample-slicing.md:120
msgid ""
"We calculate the finish position `f` by adding the `slice_size` to the start "
"position `s`."
msgstr ""

#: A.12-sample-slicing.md:123
msgid ""
"We can now play the sample slice by plugging in the `s` and `f` values into "
"the `start:` and `finish:` opts for `sample`."
msgstr ""

#: A.12-sample-slicing.md:126
msgid ""
"Before we play the next slice we need to know how long to `sleep` which "
"should be the duration of the sample slice. Luckily, Sonic Pi has us covered "
"with `sample_duration` which accepts all the same opts as `sample` and "
"simply returns the duration. Therefore, by passing `sample_duration` our "
"`start:` and `finish:` opts, we can find out the duration of a single slice."
msgstr ""

#: A.12-sample-slicing.md:133
msgid ""
"We wrap all of this code in a `live_loop` so that we continue to pick new "
"random slices to play."
msgstr ""

#: A.12-sample-slicing.md:139
msgid ""
"Let's combine everything we've seen so far into a final example which "
"demonstrates how we can take a similar approach to combine randomly sliced "
"beats with some bass to create the start of an interesting track. Now it's "
"your turn - take the code below as a starting point and see if you can take "
"it in your own direction and create something new..."
msgstr ""

#: A.12-sample-slicing.md:145
#, no-wrap
msgid ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"
msgstr ""
